[Script Info]
; Script generated by Aegisub 3.2.1
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Export Encoding: Unicode (UTF-8)
Last Style Storage: Default
Audio File: ../../../Volumes/Mac/翻译集合/翻译过的视频/Tutorial Enhancing Android UI with Custom Views.mp4
Video Zoom Percent: 0.500000
Active Line: 2

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: 城之内,Weibei SC,30,&H00FFFFFF,&H00FEFEFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0.8,0.3,2,10,10,10,134
Style: 游戏,Hiragino Sans GB,30,&H00FFFFFF,&H00FEFEFF,&H00040100,&H00000000,0,0,0,0,100,100,0,0,1,0.7,0.2,2,10,10,12,1
Style: 十代,Songti SC,16,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0.2,2,10,10,10,1
Style: 海马,Kaiti TC,16,&H00FFFFFF,&H00FEFEFF,&H00060607,&H00000000,0,0,0,0,100,100,0,0,1,1,0.2,2,10,10,10,134
Style: ch,Heiti SC,70,&H00FFFFFF,&H00FBFBFF,&H00AD9000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,0.45,2,15,15,15,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.00,0:00:08.74,城之内,,0,0,0,,{\an8}中英字幕by:Ocean-藏心(微博)    推荐指数:★★★★\N简介: 视频短小精悍,12分钟讲通了自定义视图的方方面面
Dialogue: 0,0:00:02.00,0:00:04.00,ch,,0,0,0,,用自定义视图来增强AndroidUI{\r游戏}\NEnhancing Android UI with Custom Views
Dialogue: 0,0:00:09.48,0:00:11.20,游戏,,0,0,0,,我是大卫 史密斯\NHello,I am David Smith
Dialogue: 0,0:00:11.24,0:00:13.42,游戏,,0,0,0,,我是一个Android开发的头头,在Double Encore这家公司\NAn Android dev lead on  Double Encore
Dialogue: 0,0:00:13.48,0:00:15.42,游戏,,0,0,0,,还是在NewCircle的Android讲师\Nand an Android Instructor here at NewCircle
Dialogue: 0,0:00:15.82,0:00:18.32,游戏,,0,0,0,,今天我准备带你领略\NToday,I am going to walk you through the process
Dialogue: 0,0:00:18.40,0:00:21.78,游戏,,0,0,0,,Android里面自定义View以及ViewGroup的过程\Nbuilding custom views and view groups on Android
Dialogue: 0,0:00:22.20,0:00:26.32,游戏,,0,0,0,,作为开发者,写自定义控件\NAs Developers,building custom view components is
Dialogue: 0,0:00:26.38,0:00:29.02,游戏,,0,0,0,,是你能够欣然接受创意性UI设计的必备条件之一.\Na necessary part of  embracing creative ui design
Dialogue: 0,0:00:29.12,0:00:32.50,游戏,,0,0,0,,我们不应对设计师的天马行空感到恐惧\Nwe shouldn't afraid to implement designer's unique vision
Dialogue: 0,0:00:32.50,0:00:34.50,游戏,,0,0,0,,不应把问题归咎于framework或者\Njust because the framework
Dialogue: 0,0:00:34.50,0:00:35.40,游戏,,0,0,0,,社区\Nor the community
Dialogue: 0,0:00:35.50,0:00:36.94,游戏,,0,0,0,,没有提供现成的组件\Ndoesn't provider a component that
Dialogue: 0,0:00:37.00,0:00:39.76,游戏,,0,0,0,,帮我们来干这活\Nwill do the job for us out the  box
Dialogue: 0,0:00:39.76,0:00:41.50,游戏,,0,0,0,,卷起你的袖子把,骚年\Ngetting our hands dirty
Dialogue: 0,0:00:41.52,0:00:44.66,游戏,,0,0,0,,在这方面, 有很赞的方法来搞很赞的App\Nin this area,this is a great way to build great apps
Dialogue: 0,0:00:44.80,0:00:47.54,游戏,,0,0,0,,自定义的图标控件\Nthere are many great advantages
Dialogue: 0,0:00:47.54,0:00:49.46,游戏,,0,0,0,,会有相当多的益处\Nto building your own icon components
Dialogue: 0,0:00:49.50,0:00:52.08,游戏,,0,0,0,, 例如说,你可以全权控制\Nsuch as the ability to have full control of
Dialogue: 0,0:00:52.08,0:00:53.74,游戏,,0,0,0,,你的控件如何显示\Nhow your content is displayed
Dialogue: 0,0:00:53.78,0:00:55.66,游戏,,0,0,0,,但是,写自定义控件最重要的一点在于,\Nbut one of the best reasons
Dialogue: 0,0:00:55.66,0:00:58.08,游戏,,0,0,0,,但是,写自定义控件最重要的一点在于,\Nto become an expert custom view creation
Dialogue: 0,0:00:58.08,0:01:01.18,游戏,,0,0,0,,可以使你的视图层级结构平面化\Nis the ability to flatten your view hierarchy.
Dialogue: 0,0:01:01.22,0:01:03.50,游戏,,0,0,0,,如果设计的好的话\None custom view
Dialogue: 0,0:01:03.54,0:01:07.74,游戏,,0,0,0,,framework用多个控件镶嵌才能搞定的\N可以一步到位由一个自定义控件来搞定.\Ncan be designed do the job of several nested framework widgets.
Dialogue: 0,0:01:07.76,0:01:10.40,游戏,,0,0,0,,你的视图层级结构里面的视图越少\Nand the fewer of views you have in your hierarchy
Dialogue: 0,0:01:10.42,0:01:13.20,游戏,,0,0,0,,你的程序性能越好\Nthe better your application perform
Dialogue: 0,0:01:13.24,0:01:17.52,游戏,,0,0,0,,我们的第一个例子是写一个简单的控件,\Nour first example will be a simple widget
Dialogue: 0,0:01:17.52,0:01:20.82,游戏,,0,0,0,,可以显示两张重叠的图片logos,\Nthat displays a pair of overlapping image logos
Dialogue: 0,0:01:20.90,0:01:23.58,游戏,,0,0,0,,文本部分显示在图片的右边,且居中于垂直方向\Nwith the text element on the right in vertically center
Dialogue: 0,0:01:23.62,0:01:25.62,游戏,,0,0,0,,例如,你可以利用一个像这样的控件\Nyou might use a widget like this
Dialogue: 0,0:01:25.62,0:01:28.50,游戏,,0,0,0,,来显示一场运动比赛的比分\Nto represent  the score of sport match for example
Dialogue: 0,0:01:28.54,0:01:30.94,游戏,,0,0,0,,在我们写自定义控件时,\Nwhen we build custom views
Dialogue: 0,0:01:31.04,0:01:33.04,游戏,,0,0,0,,有两个重要的函数,\Nthere are two primary functions
Dialogue: 0,0:01:33.04,0:01:35.04,游戏,,0,0,0,,我们必须了解知道\Nthat we must take into consideration
Dialogue: 0,0:01:35.08,0:01:37.04,游戏,,0,0,0,,测量和绘画\NMeasurement and drawing
Dialogue: 0,0:01:37.04,0:01:39.34,游戏,,0,0,0,,我们先来瞄一瞄measurement\Nlet's have a look at measurement first.
Dialogue: 0,0:01:39.38,0:01:42.86,游戏,,0,0,0,,在一个View被draw(在屏幕上绘制)之前.\Nbefore a view hierarchy can be drawn.
Dialogue: 0,0:01:42.90,0:01:46.38,游戏,,0,0,0,,先要向Android framework确定measure的规格(~spec)\Nthe first is to ask the Android framework is the measurement packs
Dialogue: 0,0:01:46.38,0:01:47.74,游戏,,0,0,0,,此时,\Nin this step
Dialogue: 0,0:01:47.74,0:01:51.02,游戏,,0,0,0,,所有的Views会按照在View层级结构中从上到下的次序被测量\NAll the views in the hierarchy will be measured top down
Dialogue: 0,0:01:51.12,0:01:53.12,游戏,,0,0,0,,这意味着测量从root view 开始\Nmeaning measure starts from the root view
Dialogue: 0,0:01:53.12,0:01:54.88,游戏,,0,0,0,,在root view里,对它的孩子依次进行测量\Nand track through each child view
Dialogue: 0,0:01:55.16,0:01:58.38,游戏,,0,0,0,,也就是调用孩子节点的onMeasure()方法\Neach view receives a call onMeasure()
Dialogue: 0,0:01:58.38,0:02:01.88,游戏,,0,0,0,,这就是父节点要求子节点更新其measure的时机\Nwhen its parent requests that update its measure size
Dialogue: 0,0:02:02.94,0:02:06.12,游戏,,0,0,0,,子节点自行measure其大小\Nit's the responsibility of each view to set its own size
Dialogue: 0,0:02:06.18,0:02:08.70,游戏,,0,0,0,,根据父节点提供的约束条件\Nbased on the constrain given by the parent
Dialogue: 0,0:02:08.70,0:02:12.12,游戏,,0,0,0,,调用setMeasureDimension()来存储测量的结果\Nand store those measurements by calling setMeasureDimension()
Dialogue: 0,0:02:12.18,0:02:15.78,游戏,,0,0,0,,不调用setMeasureDimension()的话,会导致异常\Nforgetting to do this will result an exception
Dialogue: 0,0:02:15.78,0:02:20.64,游戏,,0,0,0,,每个视图在onMeasure()的时候,会传入两个复合型int值\Neach view is given two packed int values onMeasure()
Dialogue: 0,0:02:20.64,0:02:22.64,游戏,,0,0,0,,这两个值被称作"测量规格"\Nthese are called measure specs
Dialogue: 0,0:02:22.68,0:02:25.20,游戏,,0,0,0,,view应该根据这两个spec进行一些检查\Nand there is something that a view should inspect
Dialogue: 0,0:02:25.20,0:02:27.22,游戏,,0,0,0,,来决定自身的大小\Nto determine how to set its size
Dialogue: 0,0:02:27.30,0:02:30.60,游戏,,0,0,0,,一个measure spec很简单就是一个表示大小的值\Na measure spec is simply a size value
Dialogue: 0,0:02:30.60,0:02:33.82,游戏,,0,0,0,,它的高(16)位表示了Mode标识\Nwith a mode flag encoded into its high order bits
Dialogue: 0,0:02:33.84,0:02:36.40,游戏,,0,0,0,,Mode有3种\Nthere are three possible
Dialogue: 0,0:02:36.40,0:02:38.66,游戏,,0,0,0,,Mode有3种\Nvalues for a spec mode
Dialogue: 0,0:02:38.72,0:02:42.26,游戏,,0,0,0,,不确定,至多,以及精确\NUNSPECIFIED , AT MOST , and EXACTLY
Dialogue: 0,0:02:42.30,0:02:47.34,游戏,,0,0,0,,不确定mode:view可以被设置为任意大小\NUNSPECIFIED tells the view to set its dimensions to any desired size
Dialogue: 0,0:02:47.54,0:02:53.98,游戏,,0,0,0,,至多:就是view大小不能超过给定值\NAT MOST ...any size less than or equal to the given spec
Dialogue: 0,0:02:54.02,0:02:58.80,游戏,,0,0,0,,准确mode:就是View只能设置为给定的大小\NEXACTLY ...on to the size given
Dialogue: 0,0:02:58.82,0:03:01.84,游戏,,0,0,0,,看,哥来教你一手.\Nthis is a helper utility here
Dialogue: 0,0:03:01.90,0:03:05.62,游戏,,0,0,0,,我经常拿这个方法来快速测量大多自定义视图的大小\Nthat i often use to quickly size most custom views
Dialogue: 0,0:03:05.70,0:03:09.86,游戏,,0,0,0,,因为哥这招在大多数情况下都挺管用\Nas it provides general behaviors needed in most situations
Dialogue: 0,0:03:09.96,0:03:11.72,游戏,,0,0,0,,
Dialogue: 0,0:03:11.78,0:03:14.28,游戏,,0,0,0,,当用wrap content设置宽高的时候,\Nit may also be important to provide measurements
Dialogue: 0,0:03:14.32,0:03:16.54,游戏,,0,0,0,,如果能提供一个测量的方法,来求出目标的宽高.\Nof what your desire size is
Dialogue: 0,0:03:16.62,0:03:20.78,游戏,,0,0,0,,就显得比较重要了.\Nfor situations where wrap content will be used to layout the view
Dialogue: 0,0:03:20.92,0:03:24.46,游戏,,0,0,0,,这个方法就是我们用来计算我们\Nhere is the method we used to compute the desired width
Dialogue: 0,0:03:24.58,0:03:26.46,游戏,,0,0,0,,自定义视图的目标宽度的.\Nfor our custom view example.
Dialogue: 0,0:03:26.48,0:03:30.42,游戏,,0,0,0,,我们先取到自定义视图里面的3个元素的宽度\Nwe obtain width values for the three major elements in this view
Dialogue: 0,0:03:30.60,0:03:32.94,游戏,,0,0,0,,由此返回自定义视图本身的所要求的宽度值\Nand return the space that will be required
Dialogue: 0,0:03:32.94,0:03:35.34,游戏,,0,0,0,,用此值来draw重叠的logos以及文字说明\Nto draw the overlapping logos and text
Dialogue: 0,0:03:35.54,0:03:37.96,游戏,,0,0,0,,与算宽度值类似\Nimilarly,
Dialogue: 0,0:03:38.04,0:03:42.34,游戏,,0,0,0,,这个方法是算高度的\Nhere is the method our example used to compute desired height value
Dialogue: 0,0:03:42.44,0:03:45.48,游戏,,0,0,0,,这里的高度只与图片内容有关.\Nthis is governed completely by the image content
Dialogue: 0,0:03:45.54,0:03:47.40,游戏,,0,0,0,,因此,我们在这个方向上不用考虑\Nso we don't need to pay attention to
Dialogue: 0,0:03:47.40,0:03:49.86,游戏,,0,0,0,,文本元素的内容.\Nthe text element when measure in this direction
Dialogue: 0,0:03:49.86,0:03:51.44,游戏,,0,0,0,,
Dialogue: 0,0:03:51.44,0:03:54.48,游戏,,0,0,0,,这有一个小贴士,\Nhere is the tip to help keep you on the right track.
Dialogue: 0,0:03:54.48,0:03:59.06,游戏,,0,0,0,,不要想太多,去花时间鼓捣你并不需要的东西.\Ndon't spend time testing and overwriting states you don't need
Dialogue: 0,0:03:59.06,0:04:00.84,游戏,,0,0,0,,你的自定义控件跟系统控件不同\Nunlike the framework widgets
Dialogue: 0,0:04:00.88,0:04:04.94,游戏,,0,0,0,,你的控件只需满足你的需求就行(其他的事情交给framework)\Nyour custom view only need to suit your application need
Dialogue: 0,0:04:05.10,0:04:08.46,游戏,,0,0,0,,过于修补代码来处理\Nover optimizing the code to handle measurement states
Dialogue: 0,0:04:08.46,0:04:10.84,游戏,,0,0,0,,那些不会出现的测量情形\Nthat will never occur in your application
Dialogue: 0,0:04:10.84,0:04:13.14,游戏,,0,0,0,,是浪费时间的表现\Nis a waste time of an effort
Dialogue: 0,0:04:13.14,0:04:16.94,游戏,,0,0,0,,先找自定义View的父元素\Nplease use custom view inside its final layout
Dialogue: 0,0:04:16.94,0:04:20.14,游戏,,0,0,0,,对framework提供的measure spec进行检查\Ninspect the values the framework give you for measure specs
Dialogue: 0,0:04:20.22,0:04:24.84,游戏,,0,0,0,,然后,写出针对特定情况的测量代码\Nand then build the measuring code to handle those specific cases
Dialogue: 0,0:04:24.94,0:04:29.84,游戏,,0,0,0,,自定义视图的另一个主要作用是绘制自身的内容\Na custom views other primary job is to draw its content
Dialogue: 0,0:04:29.88,0:04:33.64,游戏,,0,0,0,,要做这个,你会从onDraw()方法中得到一个空白的canvas对象\Nfor this you're given a blink canvas via onDraw() method
Dialogue: 0,0:04:33.72,0:04:38.06,游戏,,0,0,0,,画布的大小和位置是根据你测量的view决定的\Nthis canvas is sized and positioned according to your measured view
Dialogue: 0,0:04:38.14,0:04:41.86,游戏,,0,0,0,,画布的初始坐标是其背后视图的(left,top)\Nso the origin matches up with the top left of the view back
Dialogue: 0,0:04:42.00,0:04:45.06,游戏,,0,0,0,,画布里面有画形状,\Ncanvas supports calls to draw shapes
Dialogue: 0,0:04:45.06,0:04:47.96,游戏,,0,0,0,,颜色,文本,位图以及其他的方法\Ncolors , text , bitmap and more
Dialogue: 0,0:04:48.10,0:04:50.30,游戏,,0,0,0,,好多framework 组件,像\Nmany framework components such as
Dialogue: 0,0:04:50.50,0:04:52.70,游戏,,0,0,0,,画图的或者文本显示的,\Ndrawable images and text layouts
Dialogue: 0,0:04:52.74,0:04:55.00,游戏,,0,0,0,,都提供的自身的onDraw()方法\Neven provide their own draw methods to
Dialogue: 0,0:04:55.06,0:04:57.96,游戏,,0,0,0,,直接在画布上渲染其内容\Nrender their contents on to the canvas directly
Dialogue: 0,0:04:58.08,0:05:02.06,游戏,,0,0,0,,在此例中,我们就利用了其自身画图的方法\Nwhich is what we have taken advantage of in this example
Dialogue: 0,0:05:02.14,0:05:04.56,游戏,,0,0,0,,你可能也觉得,\Nyou may find yourself
Dialogue: 0,0:05:04.60,0:05:07.44,游戏,,0,0,0,,能在XML文件里面给自定义视图\Nwanting to provide attributes to your custom view
Dialogue: 0,0:05:07.76,0:05:09.76,游戏,,0,0,0,,自定义一些属性值是蛮不错的\Nfrom with in the layout xml
Dialogue: 0,0:05:09.80,0:05:13.26,游戏,,0,0,0,,我们可以通过在工程资源目录下\Nwe accomplish this by declaring a style-able block
Dialogue: 0,0:05:13.30,0:05:15.06,游戏,,0,0,0,,声明一个<style-able>标签来做到这点\Nin the project resources
Dialogue: 0,0:05:15.14,0:05:17.90,游戏,,0,0,0,,标签里面必须包含自定义视图\Nthis block must contain all the attributes
Dialogue: 0,0:05:18.00,0:05:20.36,游戏,,0,0,0,,所需要的全部属性值\Nwe would like to read from the layout xml
Dialogue: 0,0:05:20.46,0:05:22.12,游戏,,0,0,0,,通常,\Nwhen possible ,
Dialogue: 0,0:05:22.22,0:05:24.70,游戏,,0,0,0,,最有效的做法是重用\Nit is most efficient to reuse attributes
Dialogue: 0,0:05:24.70,0:05:26.52,游戏,,0,0,0,,framework定义好的属性值.\Nalready defined by the framework
Dialogue: 0,0:05:26.92,0:05:28.44,游戏,,0,0,0,,看哥做的.\Nas we have done here
Dialogue: 0,0:05:28.44,0:05:32.24,游戏,,0,0,0,,我们在<styleable>里面声明view所需要的属性值\Nwe are utilizing an existing text and drawable attributes to
Dialogue: 0,0:05:32.30,0:05:35.84,游戏,,0,0,0,,在布局文件中,用真实值来填充这些属性\Nfeed in the content sources and text styling information
Dialogue: 0,0:05:36.02,0:05:38.02,游戏,,0,0,0,,在布局文件中,用真实值来填充这些属性\Nyou should apply
Dialogue: 0,0:05:38.02,0:05:40.44,游戏,,0,0,0,,在创建View的时候\Nduring view creation
Dialogue: 0,0:05:40.44,0:05:43.04,游戏,,0,0,0,, 我们用 obtainStyledAttributes()这个方法\Nwe use obtainStyledAttributes()
Dialogue: 0,0:05:43.10,0:05:47.44,游戏,,0,0,0,,来提取在<styleab>中的属性名称\Nto extract the values of the attributes name in our styleleable block
Dialogue: 0,0:05:47.44,0:05:50.34,游戏,,0,0,0,,此方法返回的是一个TypedArray\Nthe method returned a typed array instance
Dialogue: 0,0:05:50.34,0:05:54.74,游戏,,0,0,0,,遍历这个数组,就能得到不同数据类型的属性值\Nwhich allows us to retrieve each attribute as the appropriate type
Dialogue: 0,0:05:54.74,0:05:58.24,游戏,,0,0,0,,管它是"画图","维度"或"颜色",都可以检索到\Nwhether it be a drawable,dimension or color
Dialogue: 0,0:05:58.34,0:05:59.64,游戏,,0,0,0,,记住\Ndon't forget
Dialogue: 0,0:05:59.64,0:06:02.24,游戏,,0,0,0,,TypedArray是个重量级的对象\NTypedArrays are heavy weight objects
Dialogue: 0,0:06:02.24,0:06:04.14,游戏,,0,0,0,,在你提取完所需的属性值后\Nand they should be recycled immediately
Dialogue: 0,0:06:04.14,0:06:07.84,游戏,,0,0,0,,应该马上将其回收\Nafter all the attributes you need have been exacted
Dialogue: 0,0:06:07.92,0:06:08.64,游戏,,0,0,0,,
Dialogue: 0,0:06:08.68,0:06:10.84,游戏,,0,0,0,,现在,我们已经目睹了\Nnow, we've seen how easy it is
Dialogue: 0,0:06:10.88,0:06:13.94,游戏,,0,0,0,,写自定义view真的是很惬意啊\Nto build our own custom content into a view
Dialogue: 0,0:06:13.94,0:06:16.84,游戏,,0,0,0,,那么,咱们能不能写过自定义的布局管理器呢\Nwhat about building a custom layout manager
Dialogue: 0,0:06:16.92,0:06:19.74,游戏,,0,0,0,,像线性布局跟相对布局这样的控件\Nwidgets like LinearLayout and RelativeLayout
Dialogue: 0,0:06:19.86,0:06:23.20,游戏,,0,0,0,,其中管理子视图的代码量很大\Nhave a lot of code in them to manage child views
Dialogue: 0,0:06:23.40,0:06:25.80,游戏,,0,0,0,,那么,咱来干这事儿是不是有点牵强\Nso this must be really hard , right?
Dialogue: 0,0:06:25.88,0:06:29.08,游戏,,0,0,0,,且别担心先,山人自有妙计.\Nwell,hopefully ,this next example will convince you
Dialogue: 0,0:06:29.14,0:06:30.66,游戏,,0,0,0,,看下一个例子吧\Nthat this is not the case
Dialogue: 0,0:06:30.70,0:06:32.98,游戏,,0,0,0,,这里,俺写了一个自己的ViewGroup\Nhere we're going to building a view group
Dialogue: 0,0:06:33.04,0:06:38.20,游戏,,0,0,0,,它将其所有子视图分配到3x3的等距网格中\Nthat lays out all its child views with equal spacing in a 3x3 grid
Dialogue: 0,0:06:38.30,0:06:40.62,游戏,,0,0,0,,这个效果也可用\Nthe same effect could be accomplished by
Dialogue: 0,0:06:40.72,0:06:45.00,游戏,,0,0,0,,线性布局套线性布局来做\Nnesting LinearLayout and inside LinearLayout(x2)
Dialogue: 0,0:06:45.04,0:06:48.14,游戏,,0,0,0,,但这会使得布局的层级结构很深\Ncreating a hierarchy many many levels deep
Dialogue: 0,0:06:48.24,0:06:49.00,游戏,,0,0,0,,但是,\Nhowever
Dialogue: 0,0:06:49.08,0:06:50.74,游戏,,0,0,0,,哥可以教你如何4两拨千斤\Nwith just a little bit of effort
Dialogue: 0,0:06:50.78,0:06:53.72,游戏,,0,0,0,,哥的妙计可以大大的收窄布局的层级结构\Nwe can drastically flatten that hierarchy
Dialogue: 0,0:06:53.72,0:06:56.62,游戏,,0,0,0,,从而获取很多的性能\Ninto something much more performance
Dialogue: 0,0:06:56.76,0:06:59.52,游戏,,0,0,0,,就跟	view差不多\Njust as with views,
Dialogue: 0,0:06:59.52,0:07:02.12,游戏,,0,0,0,,ViewGroup们也要负责其自身的测量\Nview groups are responsible for measuring themselves
Dialogue: 0,0:07:02.16,0:07:05.34,游戏,,0,0,0,,此例中,我们计算了ViewGroup的大小\Nfor this example, we are computing the size of the view group
Dialogue: 0,0:07:05.34,0:07:08.54,游戏,,0,0,0,,通过framework下的getDefaultSize()方法\Nusing the framework getDefaultSize() method
Dialogue: 0,0:07:08.54,0:07:12.04,游戏,,0,0,0,,此方法本质上依据"测量规格"返回测量大小\Nwhich essentially return the size provided by the measurespec
Dialogue: 0,0:07:12.08,0:07:13.58,游戏,,0,0,0,,有一点例外\Nin all cases except
Dialogue: 0,0:07:13.64,0:07:17.04,游戏,,0,0,0,,就是父视图的宽高是固定时\Nwhen exact size requirement is expose by the parent
Dialogue: 0,0:07:17.14,0:07:21.14,游戏,,0,0,0,,ViewGroup在测量时比View多做了一件事\NViewGroups has one more job doing measurement though
Dialogue: 0,0:07:21.20,0:07:25.54,游戏,,0,0,0,,它必须通知它的子视图去测量其自身的宽高\Nit must also tell all its child views to measure themselves
Dialogue: 0,0:07:25.62,0:07:28.82,游戏,,0,0,0,,我们要做的是让每个孩子视图的宽高\Nwe want to have each view take a bit exactly 1/3
Dialogue: 0,0:07:28.88,0:07:31.48,游戏,,0,0,0,,只取到父视图宽高的1/3\Nof both container's height and width
Dialogue: 0,0:07:31.48,0:07:34.94,游戏,,0,0,0,,我们构造了一个新的measurespec来做这事儿\Nthis is done by constructing a new measure spec
Dialogue: 0,0:07:35.04,0:07:37.54,游戏,,0,0,0,,其组成包括:经计算的view的大小(父1/3)\Nwith a computed fraction of the view size
Dialogue: 0,0:07:37.66,0:07:40.44,游戏,,0,0,0,,和EXACTLY标识的模式\Nand the mode flag set to EXACTLY
Dialogue: 0,0:07:40.56,0:07:43.04,游戏,,0,0,0,,这会使得每个子视图\Nthis will notify each child view
Dialogue: 0,0:07:43.12,0:07:46.32,游戏,,0,0,0,,必须测量到的宽高必须是\Nthat they must be measured to exactly the size
Dialogue: 0,0:07:46.40,0:07:47.44,游戏,,0,0,0,,我们指定的精确宽高\Nwe are giving them
Dialogue: 0,0:07:47.52,0:07:51.02,游戏,,0,0,0,,我们要命令每个子视图都这么做\None method of dispatching these commands
Dialogue: 0,0:07:51.02,0:07:54.14,游戏,,0,0,0,,我们可以调用每个孩子的onMeasure()方法\Nis to call measure on every child view
Dialogue: 0,0:07:54.20,0:07:56.82,游戏,,0,0,0,,除此之外,在ViewGroup里面还有个帮助者方法\Nbut there are also helper methods inside ViewGroup
Dialogue: 0,0:07:56.86,0:07:59.14,游戏,,0,0,0,,可以使这个过程简化\Nto simplify this process
Dialogue: 0,0:07:59.20,0:08:02.64,游戏,,0,0,0,,在这里,我们调用的了measureChildren()\Nin our example here,we are calling measure children
Dialogue: 0,0:08:02.74,0:08:06.14,游戏,,0,0,0,,这使所有子视图都用相同的测量规格\Nwhich applies the same spec to every child view
Dialogue: 0,0:08:06.22,0:08:10.54,游戏,,0,0,0,,做完以上的后,我们还要设置自己的维度(宽高)\Nof course,we are still require to mark our own dimension,as well
Dialogue: 0,0:08:10.64,0:08:14.94,游戏,,0,0,0,,通过调用setMeasureDimension来完成\Nvia setMeasuredDimension() before returning
Dialogue: 0,0:08:15.06,0:08:16.94,游戏,,0,0,0,,
Dialogue: 0,0:08:17.04,0:08:18.22,游戏,,0,0,0,,搞定了测量之后\Nafter measurement
Dialogue: 0,0:08:18.28,0:08:20.34,游戏,,0,0,0,,ViewGroup也要对其子视图\NViewGroups are also responsible
Dialogue: 0,0:08:20.38,0:08:22.78,游戏,,0,0,0,,的位置宽高做界定\Nfor setting the bounds of their child views
Dialogue: 0,0:08:22.78,0:08:24.62,游戏,,0,0,0,,这事儿由onLayout()回调来干\Nthough the onLayout() callback
Dialogue: 0,0:08:24.70,0:08:28.22,游戏,,0,0,0,,由于网格大小是固定的,哥这代码不言自明\Nwith our fixed size grid,this is pretty straight forward
Dialogue: 0,0:08:28.36,0:08:30.72,游戏,,0,0,0,,我们基于索引来求出\Nwe first determine based on index
Dialogue: 0,0:08:30.80,0:08:33.32,游戏,,0,0,0,,每个子视图所在的行列号\Nwhich row's and column's view is in.
Dialogue: 0,0:08:33.44,0:08:35.62,游戏,,0,0,0,,之后调用子视图的layout()方法\Nwe can then call layout on the child
Dialogue: 0,0:08:35.72,0:08:40.32,游戏,,0,0,0,,并指定其左,上,宽,高参数\Nand we can set its left,right,top and bottom position values
Dialogue: 0,0:08:40.42,0:08:44.72,游戏,,0,0,0,,注意,在layout中,用了getMeasuredWidth()来求宽度\Nnotice that inside layout  we can the getMeasureWidth()
Dialogue: 0,0:08:44.76,0:08:47.62,游戏,,0,0,0,,getMeasureHeight()求高度\Nand getMeasuredHeight() methods on the view as well
Dialogue: 0,0:08:47.72,0:08:50.26,游戏,,0,0,0,,此时的这些函数是有效的\Nthese will always be validate at the stage
Dialogue: 0,0:08:50.32,0:08:53.22,游戏,,0,0,0,,因为测量是在布局之前完成的\Nsince the measurement pass comes before layout
Dialogue: 0,0:08:53.22,0:08:54.72,游戏,,0,0,0,,这是个很方便的办法\Nand this is the handy way
Dialogue: 0,0:08:54.72,0:08:57.62,游戏,,0,0,0,,来设置每个子视图的边界\Nto set the bounding box of each child view
Dialogue: 0,0:08:57.72,0:09:00.52,游戏,,0,0,0,,另一个小贴士哦\Nhere is another tip
Dialogue: 0,0:09:00.52,0:09:02.50,游戏,,0,0,0,,测量和布局\Nmeasurement and layout
Dialogue: 0,0:09:02.50,0:09:05.22,游戏,,0,0,0,,好不好用取决于你的实现\Ncan be a simple or complex as you make it
Dialogue: 0,0:09:05.32,0:09:07.52,游戏,,0,0,0,,当你尝试处理每一个\Nit is easy to get lost
Dialogue: 0,0:09:07.58,0:09:10.88,游戏,,0,0,0,,可能影响子视图布局的配置变化时,\Nattempting to handle every possible configuration change
Dialogue: 0,0:09:10.88,0:09:13.42,游戏,,0,0,0,,你会迷失方向.\Nthat may effect how you layout child views
Dialogue: 0,0:09:13.60,0:09:15.72,游戏,,0,0,0,,坚持去写这样的代码\Nstick to writing code
Dialogue: 0,0:09:15.76,0:09:19.22,游戏,,0,0,0,,只处理那些程序中的确会出现的情况\Nthe cases your application will actually encounter
Dialogue: 0,0:09:19.30,0:09:24.82,游戏,,0,0,0,,尽管视图组通常不会画自身的内容\Nwhile ViewGroups don't generally draw any content of there own
Dialogue: 0,0:09:24.88,0:09:27.42,游戏,,0,0,0,,但是在很多情况下还是有这个需求的\Nthere are many situations where this could be useful
Dialogue: 0,0:09:27.52,0:09:29.72,游戏,,0,0,0,,有两个地方,\Nthere are helpful instances
Dialogue: 0,0:09:29.80,0:09:32.62,游戏,,0,0,0,,我们可以要求ViewGroup画一些内容\Nwhere we can ask ViewGroup to do some drawing
Dialogue: 0,0:09:32.70,0:09:37.32,游戏,,0,0,0,,一个是在dispatchDraw()里,父类的方法调用之后\Nthe first is inside dispatchDraw() after super has been called
Dialogue: 0,0:09:37.38,0:09:40.82,游戏,,0,0,0,,此时,由于孩子视图已经绘制完毕\Nat this stage,child views have already been drawn
Dialogue: 0,0:09:40.90,0:09:44.62,游戏,,0,0,0,,因此我们所画的东西就会在其之上\Nand we have an opportunity to do additional drawing on top
Dialogue: 0,0:09:44.72,0:09:46.02,游戏,,0,0,0,,在我们的例子中\Nin our example
Dialogue: 0,0:09:46.06,0:09:49.62,游戏,,0,0,0,,我们利用这点绘制的网格的分割线\Nwe are leveraging this to draw grid lines over our box view
Dialogue: 0,0:09:49.66,0:09:53.60,游戏,,0,0,0,,第二个地方是ViewGroup的onDraw()回调\Nthe second is using the same onDraw() callback
Dialogue: 0,0:09:53.60,0:09:55.52,游戏,,0,0,0,,正如之前我们在View里见到的onDraw一样\Nas we saw before was view
Dialogue: 0,0:09:55.58,0:09:59.62,游戏,,0,0,0,,我们在这儿画的东西会赶在孩子视图绘制之前\N anything we draw here will be drawn before the child views
Dialogue: 0,0:09:59.68,0:10:01.62,游戏,,0,0,0,,所以这里的内容是在孩子视图内容之下的\Nand thus will show us underneath them
Dialogue: 0,0:10:01.70,0:10:04.06,游戏,,0,0,0,,这里适合画各种\Nthis can be helpful for drawing any type
Dialogue: 0,0:10:04.06,0:10:06.92,游戏,,0,0,0,,动态的背景或者是一些状态选择器\Nof dynamic backgrounds or selector states
Dialogue: 0,0:10:06.96,0:10:11.32,游戏,,0,0,0,,如果你要在ViewGroup的onDraw里面添代码\Nif you wish to put code into the onDraw() of a ViewGroup
Dialogue: 0,0:10:11.40,0:10:15.12,游戏,,0,0,0,,你不能忘记使ViewGroup的onDraw回调有效\Nyou must also remember to enable drawing callbacks
Dialogue: 0,0:10:15.18,0:10:17.12,游戏,,0,0,0,,调用setWillNotDraw(false)\Nwas setWillNotDraw() false
Dialogue: 0,0:10:17.22,0:10:21.22,游戏,,0,0,0,,否则,你的onDraw()方法不能被触发\Notherwise,your own onDraw() method will never be triggered
Dialogue: 0,0:10:21.30,0:10:25.62,游戏,,0,0,0,,因为ViewGroup自身onDraw方法默认是禁用的\Nthis is because ViewGroup by default has self drawing disabled
Dialogue: 0,0:10:25.74,0:10:29.42,游戏,,0,0,0,,咱们回头再看看属性吧\Nso back to attributes for a minute
Dialogue: 0,0:10:29.52,0:10:32.06,游戏,,0,0,0,,如果我们想要填充的属性\Nwhat if attributes we want to feed into the View
Dialogue: 0,0:10:32.06,0:10:34.42,游戏,,0,0,0,,并不存在到平台上怎么办\Ndon't already exist in the platform
Dialogue: 0,0:10:34.46,0:10:37.92,游戏,,0,0,0,,这会使得重用一个属性(未预定义)变得很笨拙\Nit would be awkward to trying reuse one for a different purpose
Dialogue: 0,0:10:37.92,0:10:39.52,游戏,,0,0,0,,解决办法还是有的\Nwhile in that case
Dialogue: 0,0:10:39.52,0:10:43.22,游戏,,0,0,0,,我们可以在styleable中自定义属性\Nwe can define custom attributes inside our styleable block
Dialogue: 0,0:10:43.30,0:10:45.40,游戏,,0,0,0,,不同之处仅仅在于\Nthe only different here is that
Dialogue: 0,0:10:45.40,0:10:49.42,游戏,,0,0,0,,我们必须定义好其代表的数据类型\Nwe must also define the type of data that attribute represent
Dialogue: 0,0:10:49.52,0:10:51.84,游戏,,0,0,0,,这些数据类型都是系统定义好的\Nsomething we didn't need to do for the framework
Dialogue: 0,0:10:51.84,0:10:54.12,游戏,,0,0,0,,我们只管拿来用\Nsince it already has them pre defined
Dialogue: 0,0:10:54.20,0:10:58.10,游戏,,0,0,0,,这里我们定义了一个维度属性和颜色属性\Nhere,we are defining a dimension and a color attribute
Dialogue: 0,0:10:58.10,0:11:02.24,游戏,,0,0,0,,通过XML文件给分割线自定义了样式\Nto provide the styling for the boxes grid lines via XML
Dialogue: 0,0:11:02.48,0:11:04.44,游戏,,0,0,0,,
Dialogue: 0,0:11:04.58,0:11:08.32,游戏,,0,0,0,,现在,我们可以在布局内部应用自定义的属性了\Nnow, we can apply this attributes externally in our layouts
Dialogue: 0,0:11:08.40,0:11:12.12,游戏,,0,0,0,,要注意的是,属性是定义在我们程序包下的\Nnotice that attributes defined in our own application package
Dialogue: 0,0:11:12.24,0:11:17.42,游戏,,0,0,0,,这需要一个指向APK内部资源的命名空间\Nrequire a separate namespace that points to our internal APK resources
Dialogue: 0,0:11:17.54,0:11:21.52,游戏,,0,0,0,,同样要注意,自定义的布局跟\Nnotice also that our custom layout behavior no differently
Dialogue: 0,0:11:21.56,0:11:23.82,游戏,,0,0,0,,framework定义的其他控件没有两样\Nthan the other layout widgets in the framework
Dialogue: 0,0:11:23.88,0:11:26.72,游戏,,0,0,0,,我们可以直接在XML文件中\Nwe can simply add child views to it directly
Dialogue: 0,0:11:26.78,0:11:29.62,游戏,,0,0,0,,为其添加子视图\Nthrough the XML layout file
Dialogue: 0,0:11:29.70,0:11:31.92,游戏,,0,0,0,,乐者为王(-_^)\Njust for fun
Dialogue: 0,0:11:31.96,0:11:34.52,游戏,,0,0,0,,我们可以把layout用include包含进来\Nwe will even include the layout inside itself
Dialogue: 0,0:11:34.58,0:11:37.12,游戏,,0,0,0,,来创建整个9x9的效果\Nto create the full 9x9 effect
Dialogue: 0,0:11:37.18,0:11:39.72,游戏,,0,0,0,,正如你之前看到的\Nthat you saw in the earlier screenshot
Dialogue: 0,0:11:39.78,0:11:43.22,游戏,,0,0,0,,我们也定义了一个有点假的分割线\Nwe have also defined a slightly faker grid separator
Dialogue: 0,0:11:43.22,0:11:46.42,游戏,,0,0,0,,用于区分主要的区块和次要的区块\Nto distinguish the major blocks from the minor blocks
Dialogue: 0,0:11:46.50,0:11:49.92,游戏,,0,0,0,,哥希望你真的懂了\Ni hope that now you can see how simple it is
Dialogue: 0,0:11:50.00,0:11:52.62,游戏,,0,0,0,,去写自定义视图跟布局不难\Nto get started building custom views and layouts
Dialogue: 0,0:11:52.70,0:11:55.52,游戏,,0,0,0,,减少对框架控件的依赖\Nreduce dependence on the framework widgets
Dialogue: 0,0:11:55.52,0:12:00.22,游戏,,0,0,0,,可以提升用户体验,以及优化视图层级结构\Nleads to better user interfaces and less clutter in your view hierarchy
Dialogue: 0,0:12:00.28,0:12:04.02,游戏,,0,0,0,,你的用户跟设备都会感谢这点\Nyour users and your devices will thank you for it
Dialogue: 0,0:12:04.14,0:12:08.46,游戏,,0,0,0,,一定要上github去看哥的源码啊\Nbe sure to visit Github link to find full example showing here
Dialogue: 0,0:12:08.46,0:12:09.74,游戏,,0,0,0,,里面除了有完整的实例还有些其他的\Nas well as others
Dialogue: 0,0:12:09.74,0:12:12.56,游戏,,0,0,0,,相信可以对你写自定义view有所帮助\Nto help you comfortable building custom views
Dialogue: 0,0:12:12.66,0:12:16.66,游戏,,0,0,0,,感谢大家肯花时间听讲.我希望你学到了一些新东西\Nthanks you for you time today and i hope you learn something new
Dialogue: 0,0:12:16.74,0:12:19.82,游戏,,0,0,0,,如果觉得视频不错,请推荐给更多的人\N如有翻译错误,请留言指出,本人不胜感激
Dialogue: 0,0:12:19.84,0:12:25.37,游戏,,0,0,0,,BLOG:http://blog.2qwe.com\N新浪微博:http://weibo.com/2802042662 Ocean-藏心
