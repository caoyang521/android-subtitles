[Script Info]
; Script generated by Aegisub 3.2.1
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1280
PlayResY: 720

[Aegisub Project Garbage]
Export Filters: 帧率转换
Audio File: ../Google I_O 2010 - The world of ListView/Google I_O 2010 - The world of ListView.mp4
Video Zoom Percent: 1.000000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 城之内,Weibei SC,40,&H00FFFFFF,&H00FEFEFF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,0.8,0.3,2,10,10,10,134
Style: 游戏,Hiragino Sans GB,32,&H00FFFFFF,&H00FEFEFF,&H00FF0000,&H00000000,0,0,0,0,100,100,0,0,1,0.7,0.2,2,10,10,12,1
Style: 十代,Songti SC,32,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0.2,2,10,10,10,1
Style: 海马,Kaiti TC,20,&H00FFFFFF,&H00FEFEFF,&H00060607,&H00000000,0,0,0,0,100,100,0,0,1,1,0.2,2,10,10,10,1
Style: ch,Heiti SC,50,&H00FFFFFF,&H00FBFBFF,&H00AD9000,&H00000000,0,0,0,0,100,100,0,0,1,1,0.3,2,10,10,10,1
Style: en,Monaco,32,&H00FFFFFF,&H00FFFFFF,&H00020209,&H00040000,-1,0,0,0,100,100,0,0,1,1.7,0.3,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.04,0:00:04.42,城之内,,0,0,0,,{\an8}中英字幕by:Ocean-藏心    推荐指数:★★★\N简介: 介绍了ListView的方方面面,但是内容有点老\N再加上翻译比较粗糙,本来是3.5星,就推荐成3星吧
Dialogue: 0,0:00:00.04,0:00:01.16,ch,,0,0,0,,大家下午好\N{\ren}Good afternoon everyone
Dialogue: 0,0:00:01.20,0:00:03.46,ch,,0,0,0,,欢迎来到"ListView的世界"\N{\ren}and welcome to the world of ListView
Dialogue: 0,0:00:03.50,0:00:04.42,ch,,0,0,0,,我是Romain Guy\N{\ren}my name is Romain Guy
Dialogue: 0,0:00:04.42,0:00:06.42,ch,,0,0,0,,我是工作在Google的一位Android工程师\N{\ren}and i'm an Android Engineer at Google
Dialogue: 0,0:00:06.42,0:00:08.42,ch,,0,0,0,,我主要开发UI工具包和做一些其他的工作\N{\ren}i work on UI toolkit and few other things
Dialogue: 0,0:00:08.98,0:00:11.96,ch,,0,0,0,,我旁边的这位是Adam Powell,他也是Google的工程师\N{\ren}and joining me today's Adam Powell,is also an Engineer at Google
Dialogue: 0,0:00:12.00,0:00:13.56,ch,,0,0,0,,也工作在UI开发包这个组\N{\ren}he works also on UI toolkit
Dialogue: 0,0:00:13.68,0:00:16.14,ch,,0,0,0,,如果ListView曾令你抓狂过\N{\ren}and if you've ever been mad at ListView
Dialogue: 0,0:00:16.14,0:00:18.14,ch,,0,0,0,,那么这很有可能是我的不是或者是他的不是\N{\ren}it's probably my fault and or his fault
Dialogue: 0,0:00:18.14,0:00:19.00,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:00:19.02,0:00:21.46,ch,,0,0,0,,因此,如果在这个座谈会中,你有事想让我们知道\N{\ren}so if you have a thing to tell us into the session
Dialogue: 0,0:00:21.48,0:00:23.72,ch,,0,0,0,,尽管来告诉我们好了\N{\ren}come talk to us and you can
Dialogue: 0,0:00:23.74,0:00:25.08,ch,,0,0,0,,我们可以满足你的任何要求\N{\ren}do whatever you want to us
Dialogue: 0,0:00:26.00,0:00:27.88,ch,,0,0,0,,在我们会谈开始之前\N{\ren}before we get started
Dialogue: 0,0:00:27.92,0:00:31.24,ch,,0,0,0,,我们在线上有Google Wave,\N你可以在我俩的演讲过程中分享出你的笔记\N{\ren}we have a Google Wave where you can share notes though the presentation
Dialogue: 0,0:00:31.24,0:00:33.24,ch,,0,0,0,,你也可以在线上问问题\N{\ren}you can also ask questions
Dialogue: 0,0:00:33.34,0:00:35.54,ch,,0,0,0,,你也可以对他人问的问题进行表决\N{\ren}you can vote on questions asked by other people
Dialogue: 0,0:00:35.56,0:00:39.82,ch,,0,0,0,,你也可以给那些不好的问题投差评\N{\ren}you can also down those questions that you think are stupid
Dialogue: 0,0:00:39.82,0:00:41.82,ch,,0,0,0,,Url已经显示在屏幕上了\N{\ren}and here is the url
Dialogue: 0,0:00:41.82,0:00:43.82,ch,,0,0,0,,我们希望大家能记住它\N{\ren}we want you will be able to see it
Dialogue: 0,0:00:43.84,0:00:47.94,ch,,0,0,0,,所以你现在可以把它记下来,如果你现在来不及\N{\ren}so try to write it down,if you don't have time to write it down right now
Dialogue: 0,0:00:47.98,0:00:50.44,ch,,0,0,0,,稍后我们会把幻灯片上传到网上\N{\ren}we will put the slide up in the session
Dialogue: 0,0:00:50.48,0:00:54.66,ch,,0,0,0,,你还可以去GoogleIO的网站,来寻找这个Wave的链接\N{\ren}you can also go to Google IO website and there is link to that Wave
Dialogue: 0,0:00:54.68,0:00:57.52,ch,,0,0,0,,在我们的会谈过程中,我们会现场回答Wave上的一些问题\N{\ren}and we will also take live questions of course
Dialogue: 0,0:00:57.54,0:01:00.48,ch,,0,0,0,,大家都有谁用过ListView啊\N{\ren}so how many of you have ever used ListView
Dialogue: 0,0:01:00.48,0:01:02.96,ch,,0,0,0,,作为一个Android开发者,请举手\N{\ren}as developer in the Android application,raise your hand
Dialogue: 0,0:01:03.00,0:01:05.98,ch,,0,0,0,,这有点令人小害怕啊,不过这很好\N{\ren}that's a scary and good
Dialogue: 0,0:01:06.02,0:01:10.82,ch,,0,0,0,,大家都有谁觉得ListView有点难用啊\N{\ren}how many of you have found ListView to be difficult to use
Dialogue: 0,0:01:12.14,0:01:13.44,ch,,0,0,0,,你们没举手的都是在骗人吧\N{\ren}you are the ones are lying
Dialogue: 0,0:01:14.18,0:01:18.08,ch,,0,0,0,,大家都有谁觉得ListView就应该是"这么难用"呢\N{\ren}and how many have used (i've a swore at) ListView in the best should is
Dialogue: 0,0:01:18.24,0:01:21.26,ch,,0,0,0,,呦.我瞄到了一些人羞怯的伸手,这挺好,挺好的\N{\ren}yeah,i see some timid hands,that's good,that's good
Dialogue: 0,0:01:21.26,0:01:23.36,ch,,0,0,0,,这说明你们在用ListView做着一些复杂的东西\N{\ren}that means you're doing some complex stuff with it
Dialogue: 0,0:01:23.40,0:01:25.16,ch,,0,0,0,,对于没有用过ListView的同志们\N{\ren}for those of you've never used ListView
Dialogue: 0,0:01:25.16,0:01:27.06,ch,,0,0,0,,ListView可是Android中一个相当普遍的UI控件呢\N{\ren}i mean it's a pretty common widget on Android
Dialogue: 0,0:01:27.06,0:01:30.04,ch,,0,0,0,,它几乎用于我们发布的每个App中\N{\ren}it uses in i think almost every application we ship
Dialogue: 0,0:01:30.04,0:01:33.40,ch,,0,0,0,,请看左边显示的\N{\ren}and you can see an example here in the slide on the left side
Dialogue: 0,0:01:33.66,0:01:36.28,ch,,0,0,0,,这是我们ApiDemo中的一个Demo,这个Demo中仅仅是\N{\ren}that's one of our ApiDemo,so it just stacks
Dialogue: 0,0:01:36.30,0:01:37.74,ch,,0,0,0,,把Item中的控件一项一项按垂直方向堆积起来\N{\ren}widgets vertically
Dialogue: 0,0:01:37.76,0:01:40.64,ch,,0,0,0,,大多数情况下,ListView仅仅展示简单的文本\N{\ren}most of the time,ListView shows simple text
Dialogue: 0,0:01:40.66,0:01:44.26,ch,,0,0,0,,或者显示文本+图标,\N但是你还可以用ListView做更复杂的事情\N{\ren}(sometimes you have) icon and text,but you can do very very complex (though ListViews)
Dialogue: 0,0:01:44.26,0:01:47.42,ch,,0,0,0,,在我们android 1.0发布之前,我们有一版Gmail\N{\ren}before we ship android 1.0 actually,we had the version of Gmail
Dialogue: 0,0:01:47.44,0:01:48.86,ch,,0,0,0,,当你打开一封邮件后\N{\ren}where when you open the Email
Dialogue: 0,0:01:48.88,0:01:51.60,ch,,0,0,0,,我们用了由WebView填充的ListView\N{\ren}we were using a ListView made of WebViews
Dialogue: 0,0:01:51.62,0:01:53.16,ch,,0,0,0,,来展示邮件往来的对话内容\N{\ren}to display conversation
Dialogue: 0,0:01:53.16,0:01:55.34,ch,,0,0,0,,但是后来我们就没有这样做了,因为那种方法虽然ok\N{\ren}we stop doing that,because it works
Dialogue: 0,0:01:55.34,0:01:57.34,ch,,0,0,0,,但是那并不是很好用\N{\ren}but it's not that great to use
Dialogue: 0,0:01:57.34,0:02:00.24,ch,,0,0,0,,除非你想做一些非常非常疯狂的事情,你才可以这样干\N{\ren}but if you really want do something really crazy,you can
Dialogue: 0,0:02:00.24,0:02:01.82,ch,,0,0,0,,除了干简单的事情之外\N{\ren}and of course
Dialogue: 0,0:02:01.82,0:02:04.22,ch,,0,0,0,,你还可以用ListView干一些很复杂的事情\N{\ren}you can also do some very complex things with ListViews
Dialogue: 0,0:02:04.22,0:02:06.96,ch,,0,0,0,,在右边,你看到的是我写的一个实例App\N{\ren}so on the right side,you see an example,an App i wrote
Dialogue: 0,0:02:06.96,0:02:10.94,ch,,0,0,0,,这个App自定义了一个ListView,\N实际上这是GridView,它俩很相似的\N{\ren}that customizes a ListView is actually a GridView which is very similar
Dialogue: 0,0:02:10.94,0:02:11.90,ch,,0,0,0,,你可以\N{\ren}and you can
Dialogue: 0,0:02:11.90,0:02:14.72,ch,,0,0,0,,自定义它们(ListView,GridView)的背景,\N你可以自定义它们的选择状态\N{\ren}customize the background,you can customize the selection
Dialogue: 0,0:02:14.74,0:02:18.36,ch,,0,0,0,,你可以自定义非常非常复杂的Item项来填充其内容\N{\ren}you can have a very complex item inside the (shelf)
Dialogue: 0,0:02:18.36,0:02:19.02,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:02:19.04,0:02:23.16,ch,,0,0,0,,我先给大家提个醒,今天我们这里讲的任何内容\N{\ren}and just for the...i note that everything we're gonna talk about today
Dialogue: 0,0:02:23.20,0:02:25.76,ch,,0,0,0,,适用于ListView的同时,也适用于GridView\N{\ren}applies to ListView but also applies to GridView
Dialogue: 0,0:02:25.78,0:02:28.34,ch,,0,0,0,,有几项是专门针对ListView的\N{\ren}there is a couple of things that are (special) to ListView
Dialogue: 0,0:02:28.36,0:02:29.18,ch,,0,0,0,,但是\N{\ren}but
Dialogue: 0,0:02:29.20,0:02:31.34,ch,,0,0,0,,其他的大多数特性都也适用于GridView\N{\ren}pretty much everything applies to GridView as well
Dialogue: 0,0:02:31.36,0:02:32.96,ch,,0,0,0,,因此如果你用到GridView的时候\N{\ren}so if you've ever need a GridView
Dialogue: 0,0:02:32.96,0:02:35.30,ch,,0,0,0,,你可以把我们这次会谈以及这次的幻灯片当成开发参考\N{\ren}you can refer to this talk,you can refer to the slides
Dialogue: 0,0:02:35.30,0:02:37.30,ch,,0,0,0,,ListView跟GridView可以说是完全一样的\N{\ren}and everything will be the same
Dialogue: 0,0:02:37.30,0:02:39.30,ch,,0,0,0,,这里列出了我们这次会谈的议题\N{\ren}so here's are agenda for the session
Dialogue: 0,0:02:39.32,0:02:41.88,ch,,0,0,0,,我们要谈的方面有适配器,可视化\N{\ren}we gonna talk about adapters and visualization
Dialogue: 0,0:02:41.92,0:02:45.66,ch,,0,0,0,,以及ListView工作的基本原理\N{\ren}and how basically ListView works inside
Dialogue: 0,0:02:45.68,0:02:47.94,ch,,0,0,0,,然后我们会谈到你该如何的自定义ListView的条目\N{\ren}then we will gonna see how you can customize items
Dialogue: 0,0:02:47.98,0:02:49.56,ch,,0,0,0,,关于这方面涉及的是Item的各种属性\N{\ren}this is the item properties
Dialogue: 0,0:02:49.56,0:02:52.52,ch,,0,0,0,,再往下是表头跟表尾,以及视图选择器(Selector)\N{\ren}then headers and footers,we'll gonna talk about selectors
Dialogue: 0,0:02:52.54,0:02:55.16,ch,,0,0,0,,最后,我们会以一些其他特性来结束对ListView的讲解\N{\ren}then we gonna finish the talk with a few other features
Dialogue: 0,0:02:55.18,0:02:57.98,ch,,0,0,0,,还有你对ListView绝对绝对不能做的事情\N{\ren}and what you should never ever ever do with a ListView
Dialogue: 0,0:02:57.98,0:03:00.72,ch,,0,0,0,,在最后一个幻灯片时,我会接受\N{\ren}and i will asked showing the last slide
Dialogue: 0,0:03:00.74,0:03:02.22,ch,,0,0,0,,各位现场观众的提问\N{\ren}who amongst the audience
Dialogue: 0,0:03:02.24,0:03:04.70,ch,,0,0,0,,如果ListView真的让你抓狂的话\N{\ren}is doing the things that you should never doing are really mad you
Dialogue: 0,0:03:05.32,0:03:09.06,ch,,0,0,0,,那么,Adam就开始从适配器讲起了\N{\ren}so Adam is going to starts with adapters
Dialogue: 0,0:03:09.06,0:03:09.70,ch,,0,0,0,,好的\N{\ren}ok
Dialogue: 0,0:03:09.72,0:03:11.48,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:03:11.52,0:03:15.00,ch,,0,0,0,,这里涉及的问题是当数据集很大的时候\N{\ren}so the problem present here is dealing with large data sets
Dialogue: 0,0:03:15.00,0:03:16.96,ch,,0,0,0,,具体来说,当展示这些大数据集的时候\N{\ren}specifically presenting those large data sets
Dialogue: 0,0:03:16.98,0:03:19.80,ch,,0,0,0,,如果你有1万条数据项时\N{\ren}if you have ten thousand items available to you
Dialogue: 0,0:03:19.80,0:03:22.96,ch,,0,0,0,,你如何将这1万条数据显示在你的ListView中呢,\N使得用户能对这些数据项进行操作\N{\ren}how do you get that on screen so that the user can proves them
Dialogue: 0,0:03:22.96,0:03:26.30,ch,,0,0,0,,用户可以很随意的得到任意一项\N{\ren}so that you can get through them relatively quickly
Dialogue: 0,0:03:26.30,0:03:30.20,ch,,0,0,0,,那么,问题在于处理大数据集时,内存的性能至关重要\N{\ren}the typically challenges for dealing with that is memory in performance
Dialogue: 0,0:03:30.20,0:03:33.04,ch,,0,0,0,,你肯定不想一下子将1万条数据项\N全绑定到你的视图层级结构中\N{\ren}you don't want we attach ten thousand of views into your view hierarchy
Dialogue: 0,0:03:33.04,0:03:35.78,ch,,0,0,0,,这种情形下,视图这种对象是相当重量级的\N{\ren}views are fairly heavy wight objects in that sense
Dialogue: 0,0:03:35.82,0:03:38.36,ch,,0,0,0,,但是你还想要"飞划"它们66(溜溜- -!)的\N{\ren}and you want to be able to fling though them quickly
Dialogue: 0,0:03:38.38,0:03:40.60,ch,,0,0,0,,人们会对触摸设备有一种期望\N{\ren}people really sort of expect to be able to
Dialogue: 0,0:03:40.62,0:03:43.54,ch,,0,0,0,,那就是可以在这些设备上快速的找到想要的内容\N{\ren}navigate things quickly on touch screen devices specially
Dialogue: 0,0:03:43.56,0:03:46.68,ch,,0,0,0,,我们在ListView中提供的解决方案是\N{\ren}so the solution that we've implemented in ListView
Dialogue: 0,0:03:46.70,0:03:49.80,ch,,0,0,0,,我们仅仅按需填充ListView的数据项\N{\ren}is that we populate use on demand
Dialogue: 0,0:03:49.82,0:03:52.28,ch,,0,0,0,,因此我们只在\N{\ren}so we only bring up new views
Dialogue: 0,0:03:52.30,0:03:53.50,ch,,0,0,0,,需要新视图时引进它\N{\ren}as they are actually needed
Dialogue: 0,0:03:53.52,0:03:56.16,ch,,0,0,0,,那些不准备在屏幕上做显示的视图\N{\ren}nothing actually gets added to the view hierarchy
Dialogue: 0,0:03:56.16,0:03:58.16,ch,,0,0,0,,是不会被添加到视图的层级结构中的\N{\ren}that isn't going to be able to display on screen
Dialogue: 0,0:03:58.18,0:04:00.84,ch,,0,0,0,,其次,我们对视图层级结构中的视图进行了循环利用\N{\ren}secondly,we recycle those views
Dialogue: 0,0:04:00.88,0:04:03.46,ch,,0,0,0,,我们重用我们已经创建过的视图\N{\ren}so we reuse the views that we've already created
Dialogue: 0,0:04:03.48,0:04:05.82,ch,,0,0,0,,我们在重用时仅仅更改其内容而不改变其形态\N{\ren}and just filing new content as they come through
Dialogue: 0,0:04:05.82,0:04:08.38,ch,,0,0,0,,这样做有助于性能的提升\N{\ren}this help us address a lot of performance issue that come up
Dialogue: 0,0:04:08.38,0:04:10.52,ch,,0,0,0,,当你在上下循环快速划滚ListView时\N{\ren}when you're cycling through things very quickly
Dialogue: 0,0:04:10.52,0:04:12.52,ch,,0,0,0,,当你飞划往下看内容时\N{\ren}when you fling through a very long list
Dialogue: 0,0:04:12.56,0:04:14.18,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:04:14.18,0:04:16.18,ch,,0,0,0,,我们先来看几个术语\N{\ren}so a little bit terminology to start off with
Dialogue: 0,0:04:16.20,0:04:18.94,ch,,0,0,0,,由于有很多不同的方法来引用数据\N{\ren}just because there's a lot different ways to refer data
Dialogue: 0,0:04:18.94,0:04:20.94,ch,,0,0,0,,当你运用ListView时\N{\ren}when you working with a ListView
Dialogue: 0,0:04:20.96,0:04:22.56,ch,,0,0,0,,当我们谈到"索引"时\N{\ren}when we talk about an index
Dialogue: 0,0:04:22.58,0:04:25.62,ch,,0,0,0,,我们谈的是在视图层级结构中的视图组中的孩子视图\N{\ren}we are talking about child views within the ViewGroup
Dialogue: 0,0:04:25.64,0:04:27.22,ch,,0,0,0,,我们谈的是在视图层级结构中的视图组中的孩子视图\N{\ren}in the hierarchy
Dialogue: 0,0:04:27.26,0:04:29.46,ch,,0,0,0,,如果你调用getChildAt\N{\ren}so if you're calling getChildAt()
Dialogue: 0,0:04:29.46,0:04:31.46,ch,,0,0,0,,来获取一个视图的话\N{\ren}to go ahead fetch a view that's there
Dialogue: 0,0:04:31.46,0:04:33.46,ch,,0,0,0,,此时传入的参数就是index\N{\ren}that's when we talking about indexes
Dialogue: 0,0:04:33.46,0:04:36.00,ch,,0,0,0,,当我们说position时\N{\ren}when we talking about position
Dialogue: 0,0:04:36.02,0:04:39.24,ch,,0,0,0,,我们谈的是某个元素在你的适配器中所处的位置\N{\ren}we were talking about position of an element within your adapter
Dialogue: 0,0:04:39.82,0:04:42.82,ch,,0,0,0,,最后,当我们谈到id时\N{\ren}and finally,when we talk about ids
Dialogue: 0,0:04:42.84,0:04:46.06,ch,,0,0,0,,每个在适配器中的数据项可以有一个唯一的标识\N{\ren}each item within the adapter can have a unique identifier
Dialogue: 0,0:04:46.06,0:04:49.28,ch,,0,0,0,,用它可以来引用存放在适配器中的数据值\N{\ren}that refers to the value of the data store there
Dialogue: 0,0:04:49.32,0:04:51.78,ch,,0,0,0,,某些操作会使得这三个概念变得混淆起来\N{\ren}so if things start shuffling around
Dialogue: 0,0:04:51.80,0:04:54.74,ch,,0,0,0,,当你在适配器中执行插入或者删除操作时\N{\ren}you perform insertions and deletions on the data that's back
Dialogue: 0,0:04:54.74,0:04:56.74,ch,,0,0,0,,这些操作改变了你的底层数据集\N{\ren}that's backing in your adapter
Dialogue: 0,0:04:56.76,0:04:59.58,ch,,0,0,0,,这时,PPT上Stable IDs就显得比较有用了\N{\ren}then (this slide) are still a few extra tricks
Dialogue: 0,0:04:59.58,0:05:01.58,ch,,0,0,0,,当你的适配器有固定的ids时\N{\ren}when you have stable ids
Dialogue: 0,0:05:01.60,0:05:03.90,ch,,0,0,0,,你可以通过Adapter的hasStableIds方法返回true\N{\ren}when you tell the ListView that you have stable ids
Dialogue: 0,0:05:03.92,0:05:07.78,ch,,0,0,0,,来告诉ListView,你的id是固定的\N{\ren}by returning true from your adapter's hasStableIds()
Dialogue: 0,0:05:07.78,0:05:10.60,ch,,0,0,0,,这样,我们就会做一些额外的工作\N{\ren}then we were able to perform a few extra tricks that just makes the
Dialogue: 0,0:05:07.78,0:05:10.60,ch,,0,0,0,,{\ren\an8}注:CursorAdapter的hasStableId返回true,BaseAdapter为false
Dialogue: 0,0:05:10.60,0:05:12.60,ch,,0,0,0,,来让ListView记录所有id的变化情况.\N{\ren}the presentation a little bit nicer
Dialogue: 0,0:05:10.60,0:05:12.60,ch,,0,0,0,,{\ren\an8}注:可以参考ListView源码中hasStableId的语句来理解这里的意思
Dialogue: 0,0:05:12.62,0:05:15.32,ch,,0,0,0,,这样当很多元素被添加或者移除时\N{\ren}when a lot of elements get add or remove
Dialogue: 0,0:05:15.32,0:05:18.72,ch,,0,0,0,,我们可以尽力保持在屏幕上的数据项的id固定不变\N{\ren}we can trying keep the data relatively stable on screen
Dialogue: 0,0:05:18.74,0:05:22.74,ch,,0,0,0,,理解"索引","位置","标识"都是用来干啥的是很重要的\N{\ren}and understanding what the index,position and id do is very important
Dialogue: 0,0:05:22.74,0:05:26.96,ch,,0,0,0,,我觉得ListView的文档有点垃圾\N{\ren}because (i got meet) the documentation of ListView is somewhat lacking
Dialogue: 0,0:05:26.96,0:05:30.00,ch,,0,0,0,,这是俺们的错误,俺很对不住大家\N{\ren}to (Remain Polite),and it's turned our fault,we are very sorry
Dialogue: 0,0:05:30.02,0:05:31.46,ch,,0,0,0,,但是,我们对于\N{\ren}but we've been very careful
Dialogue: 0,0:05:31.46,0:05:35.02,ch,,0,0,0,,参数的取名是相当相当小心的\N{\ren}with respect to the naming of our parameters
Dialogue: 0,0:05:35.04,0:05:37.68,ch,,0,0,0,,因此不论何时你看到某个方法,他的参数里有"位置"\N{\ren}so whenever you see a method that talks about position
Dialogue: 0,0:05:37.70,0:05:41.14,ch,,0,0,0,,或者某个把"索引"作为其参数的方法\N{\ren}or you see a parameter of a method that's called index
Dialogue: 0,0:05:41.16,0:05:44.34,ch,,0,0,0,,你应该知道,参数是个什么名字,它就代表这种含义\N{\ren}you know,it's guaranteed that it's gonna be those meanings
Dialogue: 0,0:05:44.38,0:05:49.06,ch,,0,0,0,,在这方面,我们是尽力而为的.\N{\ren}everything is pretty good in that regard
Dialogue: 0,0:05:49.06,0:05:51.06,ch,,0,0,0,,必须的\N{\ren}definitely
Dialogue: 0,0:05:51.68,0:05:52.82,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:05:52.82,0:05:56.12,ch,,0,0,0,,Adapter中数据项的展示始于getView方法的调用\N{\ren}the meet of your adapter is going to be the getView method
Dialogue: 0,0:05:56.12,0:05:59.88,ch,,0,0,0,,这个方法会将你的数据从数据源那里取出\N{\ren}this is what takes your data from your data source whatever that may be
Dialogue: 0,0:05:59.88,0:06:02.28,ch,,0,0,0,,不管这个数据源是来自网络\N{\ren}whether be something that you're fetching from network
Dialogue: 0,0:06:02.30,0:06:04.86,ch,,0,0,0,,还是来自本地数据库\N{\ren}something from a database that's local
Dialogue: 0,0:06:04.88,0:06:06.46,ch,,0,0,0,,这都无所谓\N{\ren}doesn't matter what it is
Dialogue: 0,0:06:06.46,0:06:09.98,ch,,0,0,0,,getView这个方法给予你对数据展示的全权控制\N{\ren}getView() gives you full presentation control of your data
Dialogue: 0,0:06:10.02,0:06:14.44,ch,,0,0,0,,你可以返回任意的View,这个View将成为ListView中的元素\N{\ren}you can return any arbitrary view and that becomes your element within the ListView
Dialogue: 0,0:06:14.44,0:06:16.44,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:06:16.44,0:06:21.30,ch,,0,0,0,,在getView的这个过程中,我们做了很多的优化工作\N{\ren}within getView(),we are offer a lot of opportunities to optimize this entire process
Dialogue: 0,0:06:21.34,0:06:26.58,ch,,0,0,0,,由于为了符合我们的优化策略,\N我们会对开发者的行为做一些假设\N{\ren}and kind of to go along with that,because we make assumptions in order to make these optimizations
Dialogue: 0,0:06:26.60,0:06:29.12,ch,,0,0,0,,所以如果你的行为跟我们的假设不符,\N你可能就搬起石头砸自己的脚了\N{\ren}there is a lot of opportunities to (shoot) yourself in the foot
Dialogue: 0,0:06:29.18,0:06:33.78,ch,,0,0,0,,我确信大伙中某些人会遇到过以下的情况\N{\ren}and i'm sure that some of you have come cross one or more of these before
Dialogue: 0,0:06:33.82,0:06:35.80,ch,,0,0,0,,为啥我不能点击到那个元素\N{\ren}why can't i click on this element that
Dialogue: 0,0:06:35.80,0:06:39.54,ch,,0,0,0,,这个元素是某个列表数据项中的一个孩子视图,\N其位于父视图下面很远(估计是不可视)\N{\ren}that's a child far down in this particular list item
Dialogue: 0,0:06:39.56,0:06:42.20,ch,,0,0,0,,这里就牵扯到我们所做的假设,我们一会就来分析为什么\N{\ren}we'll get in (assume) that,we will get into why
Dialogue: 0,0:06:42.20,0:06:46.24,ch,,0,0,0,,更具象一点,我们会告诉大家\N{\ren}and specifically we will get into the fairly narrow
Dialogue: 0,0:06:46.24,0:06:49.30,ch,,0,0,0,,在任何getView中,你应该干的几件事儿\N{\ren}subset of things that you should be doing with any getView()
Dialogue: 0,0:06:54.40,0:06:56.00,ch,,0,0,0,,好\N{\ren}oh
Dialogue: 0,0:06:56.00,0:06:58.00,ch,,0,0,0,,那我就开讲了\N{\ren}so
Dialogue: 0,0:06:58.00,0:07:00.00,ch,,0,0,0,,ListView会"自作聪明"\N{\ren}ListView tries to be smart
Dialogue: 0,0:07:00.02,0:07:04.56,ch,,0,0,0,,正如你所见,它有时的确聪明过头了\N{\ren}as you can see,it's fairly easy to out smart here and there
Dialogue: 0,0:07:04.56,0:07:06.02,ch,,0,0,0,,但是\N{\ren}but
Dialogue: 0,0:07:06.06,0:07:09.42,ch,,0,0,0,,在getView中,我们传递进去了一个参数叫convertView\N{\ren}through getView(),we pass an extra view param call convertView
Dialogue: 0,0:07:09.44,0:07:13.06,ch,,0,0,0,,我们谈到过,ListView会复用其数据项的视图\N{\ren}we talk about how ListView end up reusing some of these views
Dialogue: 0,0:07:13.06,0:07:15.06,ch,,0,0,0,,当你快速飞划的时候\N{\ren}as you fling through data quickly
Dialogue: 0,0:07:15.06,0:07:17.06,ch,,0,0,0,,convertView是我们得以复用视图的关键\N{\ren}convertView is how it makes that happen
Dialogue: 0,0:07:17.08,0:07:21.32,ch,,0,0,0,,ListView会对所有移出屏幕(不可见)的视图进行记录\N{\ren}ListView will keep track of all the extra views they're moving off screen
Dialogue: 0,0:07:21.32,0:07:25.02,ch,,0,0,0,,之后,当下次getView的时候,就返回给你一个记录过的视图,\N来让你用数据填充它,从而达到复用的效果\N{\ren}and then give you one back to fill out with your existing data
Dialogue: 0,0:07:25.06,0:07:28.24,ch,,0,0,0,,这个返回的被记录过的视图就是convertView\N{\ren}this is the convertView parameter that we saw on the slide here
Dialogue: 0,0:07:28.28,0:07:29.64,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:07:29.68,0:07:32.80,ch,,0,0,0,,这个过程也自动的匹配了数据项的类型\N{\ren}so this automatically match up item types for you as well
Dialogue: 0,0:07:32.84,0:07:35.44,ch,,0,0,0,,如果在你的Adapter中,你有多种不同的数据类型的话\N{\ren}if you have multiple different types of data within your adapter
Dialogue: 0,0:07:35.46,0:07:38.24,ch,,0,0,0,,返回的convertView也会正确的返回相应的ViewType\N{\ren}then convertView will always be the correct type
Dialogue: 0,0:07:38.24,0:07:41.72,ch,,0,0,0,,只要你告诉ListView,\N你的Adapter每个位置的ViewType是什么就OK\N{\ren}as long as you tell ListView what type each position in your adapter is
Dialogue: 0,0:07:41.72,0:07:43.72,ch,,0,0,0,,这点我们一会也会说道说道\N{\ren}we will get to that (in) a little bit as well
Dialogue: 0,0:07:43.72,0:07:44.72,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:07:44.76,0:07:48.88,ch,,0,0,0,,如果传递给getView的convertView不是null的话\N{\ren}if the convertView parameter pass to your getView() is not null
Dialogue: 0,0:07:48.88,0:07:53.74,ch,,0,0,0,,亲,一定要重用它.这会使你的应用性能大幅提升\N{\ren}please,reuse it.it's going to help the performance (of) your application quiet a bit
Dialogue: 0,0:07:53.74,0:07:55.74,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:07:55.74,0:07:58.18,ch,,0,0,0,,有多种不同的方式来实现getView\N{\ren}so there are different ways to implement the getView()
Dialogue: 0,0:07:58.22,0:08:00.56,ch,,0,0,0,,这里我们介绍三种不同的方式\N{\ren}we gonna see three of the different method
Dialogue: 0,0:08:00.56,0:08:03.42,ch,,0,0,0,,分别是慢方式,正确方式,以及快方式\N{\ren}there is the slow way,the correct way,the fast way
Dialogue: 0,0:08:03.42,0:08:06.20,ch,,0,0,0,,首先,大家先快速浏览一下PPT上的内容\N{\ren}so first of all,look at this slide really quickly and
Dialogue: 0,0:08:06.20,0:08:08.20,ch,,0,0,0,,接下来,是该举手的时候了\N{\ren}please raise your hand and that's ok,don't be ashamed
Dialogue: 0,0:08:08.20,0:08:10.62,ch,,0,0,0,,如果你曾经这样写getView的话,就举手\N{\ren}if you've ever written the getView() like this
Dialogue: 0,0:08:10.62,0:08:12.62,ch,,0,0,0,,我肯定有人这么干过\N{\ren}(i wanna).. i'm sure somebody have done it
Dialogue: 0,0:08:12.64,0:08:15.12,ch,,0,0,0,,哦,有了,这样咱屋里至少有了一个诚实的人\N{\ren}ok,at least there is someone honest in the room
Dialogue: 0,0:08:15.12,0:08:17.12,ch,,0,0,0,,这儿也有呢\N{\ren}you see more,we here too
Dialogue: 0,0:08:17.12,0:08:20.16,ch,,0,0,0,,这种实现方式是很幼稚的\N{\ren}so this is the naive way you would implement getView
Dialogue: 0,0:08:20.20,0:08:22.50,ch,,0,0,0,,因为你创建了一个新的视图\N{\ren}you've just created a new View
Dialogue: 0,0:08:22.52,0:08:24.70,ch,,0,0,0,,在每次调用getView的时候\N{\ren}every time getView is invoked
Dialogue: 0,0:08:24.70,0:08:26.70,ch,,0,0,0,,在第二行,\N{\ren}so you can see here at line No.2
Dialogue: 0,0:08:26.70,0:08:28.48,ch,,0,0,0,,我们从XML中通过反射创建了一个新的视图\N{\ren}we were inflating a View from XML
Dialogue: 0,0:08:28.52,0:08:31.36,ch,,0,0,0,,这个操作是很昂贵的,我们不得不解析XML\N{\ren}this is a very expensive operation we have to parse the XML
Dialogue: 0,0:08:31.38,0:08:33.94,ch,,0,0,0,,尽管这个过程我们优化了一遍又一遍\N{\ren}and even though this is highly optimize on Android. (it still takes)
Dialogue: 0,0:08:33.98,0:08:36.30,ch,,0,0,0,,但是这仍然需要相当多的时间,我们要实例化视图\N{\ren}quiet bit of time,we have to initialize the view we have to
Dialogue: 0,0:08:36.32,0:08:38.60,ch,,0,0,0,,还要给视图分配视图\N{\ren}allocate the memory
Dialogue: 0,0:08:38.64,0:08:42.24,ch,,0,0,0,,当要反射的View是由多个子视图组成是,那花费会相当高\N{\ren}it can be very costly when the view is made of sub views
Dialogue: 0,0:08:42.28,0:08:45.38,ch,,0,0,0,,拿这个例子来说,我们反射的View\N{\ren}so here for instance,the view when inflating in that example
Dialogue: 0,0:08:45.38,0:08:48.62,ch,,0,0,0,,是一个线性布局,其中包含了一个ImageView和TextView\N{\ren}is a LinearLayout that contains an ImageView and a TextView
Dialogue: 0,0:08:48.62,0:08:50.12,ch,,0,0,0,,一旦我们创建了这个视图\N{\ren}once we've created it
Dialogue: 0,0:08:50.14,0:08:52.32,ch,,0,0,0,,在第3和第4行\N{\ren}in line 3 and 4,we just
Dialogue: 0,0:08:52.34,0:08:54.92,ch,,0,0,0,,我们还绑定了数据到这两个视图之上\N{\ren}bind some data to do those two views so
Dialogue: 0,0:08:54.94,0:08:57.40,ch,,0,0,0,,我们在TextView上填充了文本,ImageView上设置了图片\N{\ren}we put some text in the TextView,an image in the ImageView
Dialogue: 0,0:08:57.42,0:09:00.00,ch,,0,0,0,,之后,我们把我们建好的View返回\N{\ren}then we return the view we've created
Dialogue: 0,0:09:00.02,0:09:01.64,ch,,0,0,0,,这里最大的问题是\N{\ren}now the big problem with that is
Dialogue: 0,0:09:01.68,0:09:03.44,ch,,0,0,0,,如果用户飞划这个列表时\N{\ren}if the user is flinging the list
Dialogue: 0,0:09:03.46,0:09:07.16,ch,,0,0,0,,当用户试着滑动上千条数据项时\N{\ren}and it's trying to scroll through thousand of items
Dialogue: 0,0:09:07.20,0:09:09.70,ch,,0,0,0,,这样我们就要创建上千的视图了\N{\ren}then we will gonna create thousands of those views
Dialogue: 0,0:09:09.70,0:09:11.98,ch,,0,0,0,,这内存花销肯定不小\N{\ren}which is gonna take a lot of memory
Dialogue: 0,0:09:12.02,0:09:13.76,ch,,0,0,0,,为了给大家一个清晰的认识\N{\ren}to give you an idea
Dialogue: 0,0:09:13.78,0:09:17.82,ch,,0,0,0,,一个视图在Android系统中大约会占用1到2K的内存\N{\ren}a view on Android cost about 1KB or 2KB of RAM
Dialogue: 0,0:09:17.86,0:09:20.22,ch,,0,0,0,,如果你有上千条视图\N{\ren}if you have a thousand of views,that's
Dialogue: 0,0:09:20.22,0:09:22.98,ch,,0,0,0,,这就有1M的内存被你浪费了\N{\ren}already 1MB RAM that's you're wasting
Dialogue: 0,0:09:23.02,0:09:26.30,ch,,0,0,0,,这意味着垃圾回收器\N{\ren}which means the garbage collector is gonna
Dialogue: 0,0:09:26.34,0:09:28.80,ch,,0,0,0,,垃圾回收器将会停止你的UI线程\N{\ren}it's gonna stop your UI thread
Dialogue: 0,0:09:28.82,0:09:30.46,ch,,0,0,0,,这将使动画呆滞\N{\ren}it's gonna make the animation stutter
Dialogue: 0,0:09:30.50,0:09:32.80,ch,,0,0,0,,那用户作何感想,肯定会对你的应用感到失望\N{\ren}and the user will be really (be sad at) your application
Dialogue: 0,0:09:32.84,0:09:34.44,ch,,0,0,0,,你可别不相信\N{\ren}don't believe that
Dialogue: 0,0:09:34.44,0:09:37.62,ch,,0,0,0,,列表中含有上千条数据项是罕见的\N{\ren}list a thousand of items are weird
Dialogue: 0,0:09:37.66,0:09:39.40,ch,,0,0,0,,因为就我而言,我就知道很多人\N{\ren}because for instance,i know many people
Dialogue: 0,0:09:39.44,0:09:42.98,ch,,0,0,0,,他们的通讯录中就有上千个联系人呢\N{\ren}we have thousands of contacts in the address book
Dialogue: 0,0:09:43.02,0:09:46.26,ch,,0,0,0,,坐拥上千联系人很随意,\N当你把你的电子邮件程序设置成\N{\ren}it's very easy to do when your email application set to
Dialogue: 0,0:09:46.26,0:09:49.16,ch,,0,0,0,,快速存储联系人时,每当你回复Email的时候,\N联系人就自动保存到你的通讯录中了\N{\ren}quick contacts automatically whenever you reply to an email
Dialogue: 0,0:09:49.18,0:09:51.38,ch,,0,0,0,,因此,为了解决这个问题\N{\ren}so to fix this,it's
Dialogue: 0,0:09:51.40,0:09:53.80,ch,,0,0,0,,就正如我们提及的,你只需重用这个convertView就行\N{\ren}like we mention,you just have to reuse convertView
Dialogue: 0,0:09:53.84,0:09:55.96,ch,,0,0,0,,因此,只需简单的检查一下\N{\ren}so simply check whether our view is
Dialogue: 0,0:09:55.96,0:09:57.62,ch,,0,0,0,,参数中的convertView是否为空\N{\ren}whether or not the convertView is null
Dialogue: 0,0:09:57.66,0:09:59.82,ch,,0,0,0,,如果是空,那么你就需要新建一个视图\N{\ren}if it's null,then you have to create a new view
Dialogue: 0,0:09:59.86,0:10:02.82,ch,,0,0,0,,你可以通过从XML中反射来创建也可以在程序中直接创建\N{\ren}you can inflate it from XML,you can create the view programmatically
Dialogue: 0,0:10:02.84,0:10:05.14,ch,,0,0,0,,不管你怎么创建,你必须要创建一个新的视图\N{\ren}do whatever you want,but you have to create a new view
Dialogue: 0,0:10:05.14,0:10:07.14,ch,,0,0,0,,另一方面\N{\ren}in the other case
Dialogue: 0,0:10:07.16,0:10:10.28,ch,,0,0,0,,如果convertView已经存在了,那么你就只需重用它即可\N{\ren}if the convertView is already available,just reuse it
Dialogue: 0,0:10:10.30,0:10:14.38,ch,,0,0,0,,正如我们所说到的,我们保证返回的convertView的类型\N就是你所需要的视图类型\N{\ren}like we said we guarantee that convertView is the type of view that you want
Dialogue: 0,0:10:14.40,0:10:16.20,ch,,0,0,0,,因此,你知道其中会含有你的TextView\N{\ren}so you know that gonna have your TextView
Dialogue: 0,0:10:16.22,0:10:17.78,ch,,0,0,0,,你知道其中会含有你的ImageView\N{\ren}you know that gonna have your ImageView
Dialogue: 0,0:10:17.82,0:10:20.10,ch,,0,0,0,,这样做会使程序跑的非常快\N{\ren}and this is going to be much faster
Dialogue: 0,0:10:20.12,0:10:21.84,ch,,0,0,0,,从根本上来说,使用这个方式\N{\ren}basically,with this method
Dialogue: 0,0:10:21.90,0:10:25.48,ch,,0,0,0,,你仅需要分配来填充整个屏幕的视图数量的视图内存\N{\ren}you're going to allocate only the number of views you need to fill the screen
Dialogue: 0,0:10:25.52,0:10:28.12,ch,,0,0,0,,有时这个数量是1或者2,但是\N{\ren}sometimes you gonna allocate like one or two more,but
Dialogue: 0,0:10:28.12,0:10:32.30,ch,,0,0,0,,大多数情况下,这个数量可能会是7个,拿Nexus One来说的话\N{\ren}most of the time you're gonna be only like 7 all these views on the Nexus One for instance
Dialogue: 0,0:10:32.30,0:10:34.30,ch,,0,0,0,,俺说的话可是很现实的呦\N{\ren}so it's very (real)
Dialogue: 0,0:10:34.30,0:10:37.52,ch,,0,0,0,,不过,咱儿这儿还有下一个优化技术\N{\ren}now,there is another technique to
Dialogue: 0,0:10:37.56,0:10:39.70,ch,,0,0,0,,来使getView的实现更快一些\N{\ren}to make that implementation go faster
Dialogue: 0,0:10:39.74,0:10:42.04,ch,,0,0,0,,这个更好的实现方式是用了一个叫ViewHolder的类\N{\ren}it's a better way that we called a ViewHolder that
Dialogue: 0,0:10:42.04,0:10:44.42,ch,,0,0,0,,这个类是在Android团队开发1.0b之前开发的\N{\ren}we developed on the Android team just before 1.0b
Dialogue: 0,0:10:44.42,0:10:46.42,ch,,0,0,0,,因为那时我们遇到了性能方面的阻碍\N{\ren}cause we were running into performance issues
Dialogue: 0,0:10:46.42,0:10:48.42,ch,,0,0,0,,尤其是在通讯录这里\N{\ren}especially with address books
Dialogue: 0,0:10:48.42,0:10:50.42,ch,,0,0,0,,上千条的联系人\N{\ren}full of thousands of contacts
Dialogue: 0,0:10:50.46,0:10:52.08,ch,,0,0,0,,那么用ViewHolder能更快的原理在于\N{\ren}so the idea is that
Dialogue: 0,0:10:52.12,0:10:55.10,ch,,0,0,0,,你将会创建一个小型的数据结构在你的应用程序中\N{\ren}you're gonna create a small data structure in your application
Dialogue: 0,0:10:55.12,0:10:59.14,ch,,0,0,0,,这个数据结构会把数据静态存储在程序中\N{\ren}that is going to hold data that's static
Dialogue: 0,0:10:59.18,0:11:01.86,ch,,0,0,0,,这里的数据指的就是列表中每行的视图们\N{\ren}for each given row of the list
Dialogue: 0,0:11:01.86,0:11:03.44,ch,,0,0,0,,因此,在刚才的例子中\N{\ren}so in that example
Dialogue: 0,0:11:03.44,0:11:05.44,ch,,0,0,0,,对于每个列表中的数据项\N{\ren}for each item in the list
Dialogue: 0,0:11:05.46,0:11:07.52,ch,,0,0,0,,我们是用findViewById来找\N{\ren}we are doing a findViewById()
Dialogue: 0,0:11:07.56,0:11:10.80,ch,,0,0,0,,TextView和ImageView的\N{\ren}to find a TextView and an ImageView in line's 5 and 6
Dialogue: 0,0:11:10.82,0:11:14.36,ch,,0,0,0,,为啥我们要不断的通过这种方法来做成千上万次呢\N{\ren}so why should we bother doing it you know thousands of times
Dialogue: 0,0:11:14.36,0:11:16.04,ch,,0,0,0,,当我们处于一个大的数据列表中时\N{\ren}as with call though (in a) big list
Dialogue: 0,0:11:16.06,0:11:20.08,ch,,0,0,0,,因此,我们干脆一劳永逸的把找到过的保存起来\N{\ren}so instead we're just gonna hold things once and forever
Dialogue: 0,0:11:20.08,0:11:23.22,ch,,0,0,0,,保存到这个叫做ViewHolder小型类中,这个类你在哪创建都行\N{\ren}in this little class called ViewHolder so you can create it wherever you want
Dialogue: 0,0:11:23.26,0:11:25.06,ch,,0,0,0,,不过要把这个类变成静态的\N{\ren}try to make that class static
Dialogue: 0,0:11:25.08,0:11:28.50,ch,,0,0,0,,因此你不能把他创建在封闭实例中\N{\ren}so you don't (create) the enclosing instance
Dialogue: 0,0:11:28.50,0:11:30.70,ch,,0,0,0,,这就是ViewHolder的原理了\N{\ren}and this is how what occur looks like
Dialogue: 0,0:11:30.70,0:11:32.08,ch,,0,0,0,,当你使用ViewHolder的时候\N{\ren}when you you use the ViewHolder
Dialogue: 0,0:11:32.12,0:11:35.70,ch,,0,0,0,,这个方式跟上一种唯一不同的是,\N当convertView是空的时候,你创建新视图时\N{\ren}so the only difference that when you create a new view when the convertView is null
Dialogue: 0,0:11:35.70,0:11:37.70,ch,,0,0,0,,此时,你创建你ViewHolder的实例\N{\ren}you create your instance of the ViewHolder
Dialogue: 0,0:11:37.72,0:11:40.60,ch,,0,0,0,,之后,你把ViewHolder中的各个视图给找到\N{\ren}you do the work of finding the children of the views
Dialogue: 0,0:11:40.64,0:11:43.40,ch,,0,0,0,,这里,我们找的是TextView和ImageView\N{\ren}so here we find the TextView and the ImageView
Dialogue: 0,0:11:43.40,0:11:45.40,ch,,0,0,0,,这是第5行到第9行的内容\N{\ren}so that's line 5 to 9
Dialogue: 0,0:11:45.40,0:11:48.98,ch,,0,0,0,,之后你把holder作为convertView的tag设置上去\N{\ren}then you can set the holder as the tag for the view
Dialogue: 0,0:11:49.00,0:11:51.20,ch,,0,0,0,,tag,仅仅是一种随机的对象\N{\ren}so the tag is just a random object
Dialogue: 0,0:11:51.24,0:11:54.06,ch,,0,0,0,,它可以是任何你想要的东西,你都可以将其设置到tag上\N{\ren}it can be anything you want that you can put it on the view
Dialogue: 0,0:11:54.06,0:11:57.90,ch,,0,0,0,,这里我们用tag的这个特性来存储额外的数据\N{\ren}and we use the tag facility here store extra data
Dialogue: 0,0:11:57.92,0:11:59.18,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:11:59.22,0:12:02.42,ch,,0,0,0,,当你有一个convertView传给ListView时\N{\ren}when you have a convertView that (backs) to you by ListView
Dialogue: 0,0:12:02.42,0:12:05.80,ch,,0,0,0,,你就可以用convertView来获取tag,\N这样你就获取到了ViewHolder\N{\ren}you simply get the tag,you gets it as a ViewHolder
Dialogue: 0,0:12:05.80,0:12:07.82,ch,,0,0,0,,之后,我们看16和17行\N{\ren}then you should look lines 16 and 17
Dialogue: 0,0:12:07.84,0:12:10.72,ch,,0,0,0,,我们可以直接获取TextView和ImageView了\N{\ren}you can see that we access the TextView and the ImageView directly
Dialogue: 0,0:12:10.72,0:12:14.06,ch,,0,0,0,,因此我们把findViewById的花费给节省下来了\N{\ren}so we save the cost of doing the findViewById
Dialogue: 0,0:12:14.06,0:12:15.68,ch,,0,0,0,,这是一个很简单的例子\N{\ren}this is a very simple example
Dialogue: 0,0:12:15.68,0:12:18.80,ch,,0,0,0,,不过,在一些其他的应用中,你可以设置更多的数据\N{\ren}but in some applications,you can store even more data in there
Dialogue: 0,0:12:18.82,0:12:22.98,ch,,0,0,0,,比方说你可以存储字符串来做数据库查询\N{\ren}you can store for instance char arrays to do a (database) queries
Dialogue: 0,0:12:23.00,0:12:26.24,ch,,0,0,0,,来避免额外给查询语句分配空间来执行查询\N{\ren}to avoid allocating new arrays of characters every time you do a query
Dialogue: 0,0:12:26.26,0:12:27.76,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:12:27.80,0:12:32.10,ch,,0,0,0,,这里显示了3种方式的性能对比\N{\ren}and this is the comparison of the performance of the 3 methods
Dialogue: 0,0:12:32.14,0:12:36.10,ch,,0,0,0,,这些数据我们是从Froyo设备上获得的\N{\ren}so we took those numbers using a the Froyo (xx)
Dialogue: 0,0:12:36.10,0:12:38.10,ch,,0,0,0,,这个版本你们现在还不能得到\N{\ren}of Android that you guys don't have yet
Dialogue: 0,0:12:38.10,0:12:40.10,ch,,0,0,0,,这里的getView运行在\N{\ren}so this is running
Dialogue: 0,0:12:40.14,0:12:42.74,ch,,0,0,0,,更快的CPU上,因为这是在Nexus One上测试的\N{\ren}with a fast CPU cause we were on the Nexus One
Dialogue: 0,0:12:42.76,0:12:45.82,ch,,0,0,0,,我们创建了一个有1万项数据项的列表\N{\ren}and we create a list of 10,000 items
Dialogue: 0,0:12:45.84,0:12:49.20,ch,,0,0,0,,每个数据项在一个线性布局中,包含一个TextView和ImageView\N{\ren}each item in a LinearLayout that contains an Image and a TextView
Dialogue: 0,0:12:49.24,0:12:49.86,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:12:49.88,0:12:54.56,ch,,0,0,0,,按照最笨的实现方式,我们得到的结果是20帧每秒\N{\ren}with the Dumb boy,so with the dumb implementation of getView,we get about 20 frames per second
Dialogue: 0,0:12:54.58,0:12:57.84,ch,,0,0,0,,当我们复用convertView后\N{\ren}when we implement getView correctly by reusing the convertView
Dialogue: 0,0:12:57.86,0:13:00.46,ch,,0,0,0,,我们能达到50帧每秒\N{\ren}we go up to 50 frames per second
Dialogue: 0,0:13:00.50,0:13:04.20,ch,,0,0,0,,最后,当我们用上ViewHolder后,\N我们达到了55帧每秒的性能\N{\ren}and finally when we use the ViewHolder we go up to 55 frames per second
Dialogue: 0,0:13:04.22,0:13:05.80,ch,,0,0,0,,这是个什么样的概念,给你个感性认识,在Nexus One上\N{\ren}to give an idea on the Nexus One
Dialogue: 0,0:13:05.84,0:13:08.90,ch,,0,0,0,,我们能达到的最大帧数是60帧每秒\N{\ren}the max number of frames per second you can get is 60
Dialogue: 0,0:13:08.94,0:13:11.40,ch,,0,0,0,,如果你把一些别的开销也算进去的话\N{\ren}so when you take it into account the overhead of just
Dialogue: 0,0:13:11.40,0:13:13.40,ch,,0,0,0,,比方说,重绘整个视图层级的开销\N{\ren}redrawing the view hierarchy
Dialogue: 0,0:13:13.40,0:13:16.08,ch,,0,0,0,,命令消息的传递,以及绑定视图\N{\ren}issuing all the commands,binding the views
Dialogue: 0,0:13:16.08,0:13:18.08,ch,,0,0,0,,还有加载位图等等\N{\ren}reading the bitmaps stuff like that
Dialogue: 0,0:13:18.08,0:13:21.20,ch,,0,0,0,,这几乎是你能达到的最大速度了\N{\ren}this is pretty much as fast as you can go
Dialogue: 0,0:13:21.24,0:13:22.32,ch,,0,0,0,,在你的Adapter里\N{\ren}inside that adapter
Dialogue: 0,0:13:22.34,0:13:25.72,ch,,0,0,0,,因此,如果你的程序能达到这样的速度\N{\ren}so if you can reach those numbers inside your application
Dialogue: 0,0:13:25.74,0:13:29.30,ch,,0,0,0,,你算是过关了,如果你是处于左边的,那么继续努力吧\N{\ren}you are good to go if you were on the left side,then keep working
Dialogue: 0,0:13:29.30,0:13:31.30,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:13:31.30,0:13:33.30,ch,,0,0,0,,\N{\ren}ok
Dialogue: 0,0:13:33.34,0:13:34.46,ch,,0,0,0,,正如我之前提到的\N{\ren}so as i mention before
Dialogue: 0,0:13:34.46,0:13:37.00,ch,,0,0,0,,有很多时候,你会搬起石头砸自己的脚\N{\ren}there is a lot ways you shoot yourself in the foot during this process
Dialogue: 0,0:13:37.02,0:13:37.64,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:13:37.68,0:13:39.58,ch,,0,0,0,,大多数情况是,\N{\ren}most,it has to do with trying to
Dialogue: 0,0:13:39.62,0:13:43.18,ch,,0,0,0,,你在getView的实现过程中,过于聪明了,\N想当然的去干一些事情来为自己做优化\N{\ren}out smart the way the getView tries to optimize things for you
Dialogue: 0,0:13:43.24,0:13:46.40,ch,,0,0,0,,因此,你不能创建任何局部的视图缓存\N{\ren}so don't create any sort of local view cache
Dialogue: 0,0:13:46.48,0:13:48.74,ch,,0,0,0,,不要试着自作聪明的说,"好,\N{\ren}don't try and be smart and say,"ok,well
Dialogue: 0,0:13:48.74,0:13:51.42,ch,,0,0,0,,我知道位置1肯定会是这个元素,\N{\ren}i know the position one is always going to be this element
Dialogue: 0,0:13:51.42,0:13:53.42,ch,,0,0,0,,因此我要在我的适配器中保存这个视图\N{\ren}so i'm just gonna save this view (via) in my adapter
Dialogue: 0,0:13:53.42,0:13:56.62,ch,,0,0,0,,这样无论何时我请求位置1这个元素时,\N适配器总能正确的返回那个视图\N{\ren}always return this whenever i ask for position one
Dialogue: 0,0:13:56.62,0:13:59.34,ch,,0,0,0,,这里的问题在于\N{\ren}the problem with is that
Dialogue: 0,0:13:59.34,0:14:02.84,ch,,0,0,0,,由于ListView内部的循环器的实现方式\N{\ren}due to the implementation of the recycler inside ListView
Dialogue: 0,0:14:02.86,0:14:03.70,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:14:03.74,0:14:07.50,ch,,0,0,0,,如果你在getView中没有返回一个新建的View的话\N{\ren}if you're not passing back ether a new view that was just created
Dialogue: 0,0:14:07.54,0:14:11.36,ch,,0,0,0,,或者你没有把convertView这个实例返回\N{\ren}or exactly the convertView instance was passed to you
Dialogue: 0,0:14:11.38,0:14:16.34,ch,,0,0,0,,我们就假定依附在ListView上的其他任何东西是不可用的\N{\ren}it's going to assume that anything else whosever attached to the ListView is dead
Dialogue: 0,0:14:16.34,0:14:18.16,ch,,0,0,0,,ListView就会跳过这些东西,以及丢掉这些\N{\ren}and it just gonna go ahead and throw it away
Dialogue: 0,0:14:18.16,0:14:22.28,ch,,0,0,0,,有时,ListView会以一种很奇怪的方式对视图进行重新依附\N{\ren}now,sometimes this can end up getting reattached in really strange ways
Dialogue: 0,0:14:22.32,0:14:25.76,ch,,0,0,0,,这样以来,问题并不会马上出现\N{\ren}and it won't always look like there is a problem at first
Dialogue: 0,0:14:25.78,0:14:28.66,ch,,0,0,0,,直到ListView产生一些很奇怪的行为\N{\ren}until you start observing some very strange behavior
Dialogue: 0,0:14:28.68,0:14:30.06,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:14:30.10,0:14:32.44,ch,,0,0,0,,首先不要局部缓存视图\N{\ren}don't cache views locally like that
Dialogue: 0,0:14:32.46,0:14:35.58,ch,,0,0,0,,其次不能在适配器中访问你缓存的视图\N{\ren}and don't access views from the adapter that way
Dialogue: 0,0:14:35.60,0:14:36.46,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:14:36.48,0:14:38.70,ch,,0,0,0,,同时,不要改变convertView的结构\N{\ren}don't change convertView structure either
Dialogue: 0,0:14:38.74,0:14:40.34,ch,,0,0,0,,不能因为系统传递给我一个视图\N{\ren}just because you have a view coming in
Dialogue: 0,0:14:40.36,0:14:44.58,ch,,0,0,0,,我就可以随意额外的添加或者删除视图的内容\N{\ren}that doesn't necessarily mean that you need to be adding or removing extra content from that view
Dialogue: 0,0:14:44.58,0:14:46.58,ch,,0,0,0,,这样的规范是为了适应系统的特性\N{\ren}that's the type system  for
Dialogue: 0,0:14:46.62,0:14:50.38,ch,,0,0,0,,实际上,我们可以做到传递给你的convertView就是\N{\ren}we can actually have convertView pass you back
Dialogue: 0,0:14:50.42,0:14:55.16,ch,,0,0,0,,你所需的视图类型,并且这个convertView\N的所有子视图都已经初始化过了\N{\ren}exactly the type of view that you need that already has all these other subviews initialized for you
Dialogue: 0,0:14:55.16,0:14:57.84,ch,,0,0,0,,仅仅因为你的适配器中有不同类型的数据\N{\ren}so just because you have different types of data within your adapter
Dialogue: 0,0:14:57.84,0:15:00.62,ch,,0,0,0,,并不意味着你可以尝试去\N{\ren}doesn't necessarily mean that you need to try to
Dialogue: 0,0:15:00.64,0:15:04.02,ch,,0,0,0,,执行特定的操作来改变convertView的结构\N{\ren}perform all sorts of manipulations on convertView when it comes in
Dialogue: 0,0:14:55.16,0:15:04.02,ch,,0,0,0,,{\ren\an8}注:请参考API中Adapter的getViewTypeCount,和getView的说明
Dialogue: 0,0:15:04.04,0:15:08.06,ch,,0,0,0,,最后请注意,不要对getView的调用做任何预判\N{\ren}and lastly,don't make assumptions about getView calls
Dialogue: 0,0:15:08.08,0:15:11.94,ch,,0,0,0,,我们已经看到过某些开发者这样做,"那好,\N{\ren}we've seen developers try to do things like,"ok
Dialogue: 0,0:15:11.98,0:15:14.72,ch,,0,0,0,,getView现在刚从位置5调用过了\N{\ren}getView was just called for position 5
Dialogue: 0,0:15:14.72,0:15:17.76,ch,,0,0,0,,那么我就要存储一些关于\N{\ren}so i'm going to store something about
Dialogue: 0,0:15:17.78,0:15:20.80,ch,,0,0,0,,这个在位置5处的视图实例的东西\N{\ren}this particular view instance is position 5
Dialogue: 0,0:15:20.82,0:15:24.62,ch,,0,0,0,,我将把此视图实例缓存在别的地方\N以便我下次可以直接获取\N{\ren}and i'm gonna cache that in some place just so that i can refer back to that view quickly
Dialogue: 0,0:15:24.64,0:15:27.56,ch,,0,0,0,,无论何时背后数据更新过以后\N{\ren}whenever data it behind updates
Dialogue: 0,0:15:27.58,0:15:29.86,ch,,0,0,0,,此处的问题在于\N{\ren}the problem with this is that
Dialogue: 0,0:15:29.86,0:15:32.76,ch,,0,0,0,,所有getView的调用的顺序是乱序的\N{\ren}the order of getView calls isn't guaranteed
Dialogue: 0,0:15:32.78,0:15:35.72,ch,,0,0,0,,因为我们可能在底层这样来调用getView\N{\ren}so we may end up calling getView behind the scenes
Dialogue: 0,0:15:35.74,0:15:38.58,ch,,0,0,0,,为了测量ListView到底能有多大\N{\ren}to go ahead and measure out how big the ListView can be
Dialogue: 0,0:15:38.60,0:15:43.74,ch,,0,0,0,,出于性能的考虑,我们可能会用到\N被扔掉过的convertView来做测量的参考\N{\ren}and we might do this with a throw-away convertView that were passing to you,again,for performance reasons
Dialogue: 0,0:15:43.74,0:15:45.02,ch,,0,0,0,,因此 \N{\ren}so
Dialogue: 0,0:15:45.02,0:15:47.02,ch,,0,0,0,,那么你最终获取到的视图\N{\ren}the view that you get
Dialogue: 0,0:15:47.06,0:15:50.24,ch,,0,0,0,,我们最后一次调用的getView所传递进去的convertView\N{\ren}the last view that you get passed to you for a position
Dialogue: 0,0:15:50.26,0:15:53.38,ch,,0,0,0,,实际上有可能不是最后一个将要屏幕上将要显示的View\N{\ren}may not actually be the one that ends up on screen later on
Dialogue: 0,0:15:53.42,0:15:58.72,ch,,0,0,0,,事实上,这儿有一个很棒的例子来\N阐释此问题(关于假定getView调用的顺序)的所在\N{\ren}and actually a great example of making assumptions about the ordering of getView calls
Dialogue: 0,0:15:58.72,0:16:02.58,ch,,0,0,0,,这个例子是最近发生在我们Android团队内部的一件事\N{\ren}is something that happen to us inside the Android team really recently
Dialogue: 0,0:16:02.60,0:16:05.54,ch,,0,0,0,,开发Gmail程序时就犯了假定getView调用顺序的错误\N{\ren}the Gmail application was making one of these assumptions
Dialogue: 0,0:16:05.58,0:16:08.70,ch,,0,0,0,,在Froyo系统中,开发人员对UI做了一些改变\N{\ren}and so in Froyo,they (changes) something about their UI
Dialogue: 0,0:16:08.72,0:16:11.16,ch,,0,0,0,,这些改变在ListView中走了一条不同的代码路径\N{\ren}that made them go through different (code) path in ListView
Dialogue: 0,0:16:11.18,0:16:14.10,ch,,0,0,0,,这把getView的调用顺序给改变了\N{\ren}and suddenly the order of getView calls changed
Dialogue: 0,0:16:14.10,0:16:17.28,ch,,0,0,0,,这导致在你收件箱中的每一封邮件\N{\ren}and every single one of your emails in your inbox
Dialogue: 0,0:16:17.28,0:16:19.28,ch,,0,0,0,,看起来都跟第一封邮件一样\N{\ren}looked like the first email in your inbox
Dialogue: 0,0:16:19.28,0:16:22.50,ch,,0,0,0,,这里的bug不是出在ListView身上,而是出在应用程序身上\N{\ren}and that wasn't (a bug) in ListView,that was a problem in the application
Dialogue: 0,0:16:22.52,0:16:25.18,ch,,0,0,0,,因此它假定了它会\N{\ren}cause they were assuming that they would
Dialogue: 0,0:16:25.20,0:16:27.68,ch,,0,0,0,,按顺序得到0,1,2,3位置上的视图\N{\ren}give you 0,give you 1,give you 2,give 3
Dialogue: 0,0:16:27.72,0:16:29.34,ch,,0,0,0,,然而事实并不如此\N{\ren}which wasn't the case any more
Dialogue: 0,0:16:29.34,0:16:31.08,ch,,0,0,0,,为了进一步掌握,想一下我们有\N{\ren}to give an idea,think we have
Dialogue: 0,0:16:31.10,0:16:34.98,ch,,0,0,0,,至少有4到5种不同的方式来\N在ListView中来进行对视图的布局\N{\ren}at least 4,5 different ways to perform layout in ListView
Dialogue: 0,0:16:35.02,0:16:38.44,ch,,0,0,0,,有时,我们会从屏幕底部开始来进行布局\N{\ren}sometimes we are gonna start by doing the layout from the bottom of the screen
Dialogue: 0,0:16:38.46,0:16:41.48,ch,,0,0,0,,有时我们会从顶部,还有时我们会从中间\N{\ren}sometimes we start from the top,sometimes we start from the middle
Dialogue: 0,0:16:41.48,0:16:45.66,ch,,0,0,0,,因此,不要对这些函数的调用想当然\N{\ren}so again,don't make any assumption about the other of the calls
Dialogue: 0,0:16:47.92,0:16:48.92,ch,,0,0,0,,好的\N{\ren}ok
Dialogue: 0,0:16:49.36,0:16:51.76,ch,,0,0,0,,当你数据源变化时,你该怎么办\N{\ren}so what happens when your data changes
Dialogue: 0,0:16:51.80,0:16:55.28,ch,,0,0,0,,无论何时当你数据源变化时,你都需要更新你的适配器\N{\ren}whenever your data changes you need to update your adapter in some way
Dialogue: 0,0:16:55.28,0:16:57.82,ch,,0,0,0,,你还需要告诉ListView,\N{\ren}and not only that,but you need to tell ListView
Dialogue: 0,0:16:57.84,0:16:59.58,ch,,0,0,0,,你的适配器的确是更新了\N{\ren}that the adapter was updated
Dialogue: 0,0:16:59.58,0:17:02.02,ch,,0,0,0,,你通过调用notifyDatasetChanged来做到这点\N{\ren}you do this by calling notifyDatasetChanged
Dialogue: 0,0:17:02.04,0:17:06.08,ch,,0,0,0,,这个方法的作用是触发你的ListView重新扫描你的适配器\N{\ren}this basically triggers ListView to rescan your adapter
Dialogue: 0,0:17:06.10,0:17:07.84,ch,,0,0,0,,对其显示在屏幕上的数据项视图\N{\ren}for the views that are on screen
Dialogue: 0,0:17:07.86,0:17:09.38,ch,,0,0,0,,重新填充数据\N{\ren}repopulate them
Dialogue: 0,0:17:09.38,0:17:13.20,ch,,0,0,0,,还干各种细活,比方说还能自动滚动列表\N{\ren}deal with any sort of manipulations in terms of scrolling a list
Dialogue: 0,0:17:13.24,0:17:16.66,ch,,0,0,0,,当现在的数据元素减少时\N{\ren}if there is few data elements in there now
Dialogue: 0,0:17:16.70,0:17:19.14,ch,,0,0,0,,或者当数据元素增多时\N{\ren}or growing a lot,there is more
Dialogue: 0,0:17:19.16,0:17:22.64,ch,,0,0,0,,如果你的数据数据集变得不可用时\N{\ren}if your dataset becomes unavailable for example
Dialogue: 0,0:17:22.64,0:17:25.72,ch,,0,0,0,,比方说你的数据存储文件不在了\N{\ren}if,like your backing file gets deleted
Dialogue: 0,0:17:25.74,0:17:28.04,ch,,0,0,0,,或者你的网络连接中断了\N{\ren}if your network access goes out
Dialogue: 0,0:17:28.04,0:17:30.42,ch,,0,0,0,,调用这个notifyDatasetInvalided会通知我们\N{\ren}notifyDatasetInvalided() will tell us
Dialogue: 0,0:17:30.44,0:17:33.40,ch,,0,0,0,,ListView中已经没有数据了,数据全部没了\N{\ren}that there is no more data,it's entirely gone
Dialogue: 0,0:17:33.40,0:17:36.18,ch,,0,0,0,,这样我们就不会再去尝试获取数据了\N{\ren}and we are not going to trying access it anymore
Dialogue: 0,0:17:36.18,0:17:38.06,ch,,0,0,0,,这点我们之后还会谈到,但是\N{\ren}and we'll talk about it more or later,but
Dialogue: 0,0:17:38.06,0:17:40.58,ch,,0,0,0,,notifyDatasetChanged被及时调用是非常重要的\N{\ren}it's very very important to call notifyDatasetChanged()
Dialogue: 0,0:17:40.58,0:17:42.82,ch,,0,0,0,,大多数我所看到的跟ListView有关的bug\N{\ren}most of the bugs i (see filed) against  ListView
Dialogue: 0,0:17:42.82,0:17:46.86,ch,,0,0,0,,都是由于程序没有正确调用\NnotifyDatasetChanged而产生的\N{\ren}usually come from the application not calling notifyDatasetChanged correctly
Dialogue: 0,0:17:46.90,0:17:48.74,ch,,0,0,0,,这个方法一定要在UI线程被调用\N{\ren}it has to be called on the UI thread
Dialogue: 0,0:17:48.76,0:17:51.66,ch,,0,0,0,,以及每次当你修改你的适配器时,都要被调用一次\N{\ren}and it has to be called every time you modify your adapter
Dialogue: 0,0:17:51.68,0:17:55.94,ch,,0,0,0,,尤其是当你把适配器中数据项的个数更改时\N{\ren}especially when you change the number of items inside the adapter
Dialogue: 0,0:17:55.94,0:18:02.10,ch,,0,0,0,,我不记得具体是哪个发布版本了,Donut或者Eclair,\N那就是1.6或者2.0\N{\ren}and that's really...i don't remember for what release,it was may be Donut or Eclair,so 1.6 or 2.0
Dialogue: 0,0:18:02.12,0:18:04.04,ch,,0,0,0,,我们在ListView中加入了一个新的异常\N{\ren}we added a new exception in ListView
Dialogue: 0,0:18:04.04,0:18:05.50,ch,,0,0,0,,这个异常尝试去侦测\N{\ren}so it tries to detect the case
Dialogue: 0,0:18:05.52,0:18:08.42,ch,,0,0,0,,当你改变了适配器的内容而没有通知ListView时\N{\ren}when you change the adapter without telling the ListView
Dialogue: 0,0:18:08.44,0:18:10.36,ch,,0,0,0,,如果侦测到了,那么程序就会崩溃\N{\ren}when that happens now we crashed
Dialogue: 0,0:18:10.40,0:18:16.04,ch,,0,0,0,,我们会抛出一个异常,会在Logcat中显示很长很长的信息\N{\ren}we throw an exception and we have very very long and detail message in the logcat
Dialogue: 0,0:18:16.06,0:18:19.12,ch,,0,0,0,,来告诉你在所处的线程中做了一些很糟糕的事情\N{\ren}telling you that you are doing something wrong probably with the thread
Dialogue: 0,0:18:19.14,0:18:23.44,ch,,0,0,0,,这个异常信息有助于你改正程序\N{\ren}so if you see that message,pay attention to it,it's very important that you fix this issue
Dialogue: 0,0:18:27.30,0:18:30.50,ch,,0,0,0,,之前我们提到过,ListView可以对不同的视图类型进行处理\N{\ren}so we mention before that ListView handle different view types for you
Dialogue: 0,0:18:30.50,0:18:34.46,ch,,0,0,0,,大多数情况下你像展示不止一种数据类型在ListView中\N{\ren}a lot times you have more than one type of data that you wanna display it at once
Dialogue: 0,0:18:34.48,0:18:37.36,ch,,0,0,0,,某些列表元素可能包含有图片\N{\ren}certain list elements you may wanna include Images in
Dialogue: 0,0:18:37.36,0:18:40.30,ch,,0,0,0,,而有些你想加入引用文本\N{\ren}certain ones may have extended (quote) text
Dialogue: 0,0:18:40.30,0:18:44.82,ch,,0,0,0,,这些不同类型的数据最终要展示到同一个列表中\N{\ren}all of these things end up being different types of data that you wanna display within the same list
Dialogue: 0,0:18:44.82,0:18:47.60,ch,,0,0,0,,ListView可以帮助你做到这点\N{\ren}and ListView will help you out with this
Dialogue: 0,0:18:47.60,0:18:51.04,ch,,0,0,0,,适配器中有个方法叫getItemViewType\N{\ren}the function getItemViewType on your adapter
Dialogue: 0,0:18:51.04,0:18:53.48,ch,,0,0,0,,此方法会告诉ListView\N{\ren}tells ListView what type
Dialogue: 0,0:18:53.48,0:18:56.60,ch,,0,0,0,,在此位置的视图的类型是什么\N{\ren}the view at that position should be
Dialogue: 0,0:18:56.60,0:18:57.90,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:18:57.90,0:19:01.44,ch,,0,0,0,,这里返回值仅仅是一个整数值而已\N{\ren}generally this is just an integer parameter that you pass back
Dialogue: 0,0:19:01.44,0:19:02.40,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:19:02.40,0:19:04.40,ch,,0,0,0,,你有多少种类型\N{\ren}however many types you have
Dialogue: 0,0:19:04.40,0:19:06.40,ch,,0,0,0,,那么getViewTypeCount中就是返回多少\N{\ren}return that from getViewTypeCount
Dialogue: 0,0:19:06.40,0:19:08.98,ch,,0,0,0,,ListView会维护\N{\ren}and ListView will maintain
Dialogue: 0,0:19:08.98,0:19:12.86,ch,,0,0,0,,从根本上来说,会对每种视图类型维护一个回收器\N{\ren}basically a recycler for each one of these different view types that you have
Dialogue: 0,0:19:12.86,0:19:16.62,ch,,0,0,0,,当getView被调用的时候,ListView总会\N传给你正确类型的convertView\N{\ren}and it'll always be ready to hand you back the correct one when getView gets called
Dialogue: 0,0:19:16.62,0:19:19.94,ch,,0,0,0,,还有一点关于数据项类型也是很重要的\N{\ren}and something also very important about the item types
Dialogue: 0,0:19:19.94,0:19:23.54,ch,,0,0,0,,那就是当你实现getViewTypeCount的时候,\N所返回的类型个数\N{\ren}that the number of types you have,so when you implement the getViewTypeCount()
Dialogue: 0,0:19:23.56,0:19:26.38,ch,,0,0,0,,必须是一个常数值,在整个过程中,此值不能被改变\N{\ren}that number has to be constant through out the duration
Dialogue: 0,0:19:26.38,0:19:28.38,ch,,0,0,0,,在适配器的整个生命周期过程中\N{\ren}through out the lifecycle of your adapter
Dialogue: 0,0:19:28.38,0:19:30.04,ch,,0,0,0,,你都不能让这个数字发生改变\N{\ren}you can not make the number change
Dialogue: 0,0:19:30.04,0:19:33.76,ch,,0,0,0,,你这样做是可以的,你可以声明10种数据类型,\N但是实际上你只用了2种\N{\ren}it's ok if you said that you have ten types and you actually end up using only two
Dialogue: 0,0:19:33.76,0:19:37.50,ch,,0,0,0,,这样做并不会产生资源的浪费\N{\ren}it's not gonna waste in your resources
Dialogue: 0,0:19:37.52,0:19:40.66,ch,,0,0,0,,但是如果你改变了这个值,那么ListView中会发生很糟的事情\N{\ren}but if you change that number,then very very bad things will happen in ListView
Dialogue: 0,0:19:40.66,0:19:42.66,ch,,0,0,0,,你会看到很古怪的列表展示效果\N{\ren}and you will see like very weird behavior
Dialogue: 0,0:19:42.66,0:19:45.76,ch,,0,0,0,,你会看到很古怪的列表展示效果\N{\ren}that might be (vary source) from time to time
Dialogue: 0,0:19:45.78,0:19:46.92,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:19:46.92,0:19:50.10,ch,,0,0,0,,尝试找出你最终要用到的类型数量\N{\ren}try to figure out what is the maximum number of types we gonna need
Dialogue: 0,0:19:50.10,0:19:54.26,ch,,0,0,0,,然后在getViewTypeCount中返回\N{\ren}and return that number from the getViewTypeCount()
Dialogue: 0,0:19:59.52,0:20:02.22,ch,,0,0,0,,当你读取数据源变得很慢的时候发生了什么\N{\ren}so what happens when you have data source that's really slow
Dialogue: 0,0:20:02.22,0:20:04.22,ch,,0,0,0,,可能你正在从网络中获取数据\N{\ren}you are bringing something in over network
Dialogue: 0,0:20:04.22,0:20:06.22,ch,,0,0,0,,或者你正在读取一个很大的文件\N{\ren}you're reading a large file
Dialogue: 0,0:20:07.02,0:20:13.38,ch,,0,0,0,,换一种说法,你的UI线程不能够及时响应了\N{\ren}one way another you are not going to be able to keep up with that on your thread and still remain responsive
Dialogue: 0,0:20:13.40,0:20:14.02,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:20:14.02,0:20:17.60,ch,,0,0,0,,取数据这个操作可以发生在任何地方,\N你可以另开一个线程专门来取数据\N{\ren}fetching that data can actually happen in anywhere,you can spend on another thread
Dialogue: 0,0:20:17.60,0:20:19.60,ch,,0,0,0,,在这个线程里对网络发送请求来取数据\N{\ren}send over request out to the network
Dialogue: 0,0:20:19.60,0:20:20.46,ch,,0,0,0,,这都是可以的\N{\ren}it doesn't matter
Dialogue: 0,0:20:20.46,0:20:23.24,ch,,0,0,0,,但是很重要的一点要牢记\N{\ren}but the important thing to remember is that
Dialogue: 0,0:20:23.24,0:20:26.64,ch,,0,0,0,,提交适配器变化的操作一定要在UI线程\N{\ren}you always commit your adapter changes on the UI thread
Dialogue: 0,0:20:26.64,0:20:27.72,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:20:27.72,0:20:31.18,ch,,0,0,0,,再一次善意提醒,一定要及时调用notifyDatasetChanged\N{\ren}and once again,make sure you call notifyDatasetChanged
Dialogue: 0,0:20:31.18,0:20:31.96,ch,,0,0,0,,牢记\N{\ren}so
Dialogue: 0,0:20:31.96,0:20:33.96,ch,,0,0,0,,任何数据的改变都要在\N{\ren}any changes have to be reflected
Dialogue: 0,0:20:33.96,0:20:35.96,ch,,0,0,0,,UI线程上反映出来\N{\ren}on that UI thread
Dialogue: 0,0:20:35.98,0:20:40.06,ch,,0,0,0,,你还必须保证调用notifyDatasetChanged的地方\N{\ren}and you also have to call notifyDatasetChanged in the same UI event
Dialogue: 0,0:20:40.06,0:20:42.28,ch,,0,0,0,,与你提交变化给适配器的地方处在相同的UI事件中\N{\ren}where you commit the changes to the adapter
Dialogue: 0,0:20:42.28,0:20:45.18,ch,,0,0,0,,你不能改变了适配器的内容之后,\N{\ren}you can't change the adapter then sometimes either
Dialogue: 0,0:20:45.18,0:20:47.24,ch,,0,0,0,,再把notifyDatasetChanged发送给ListView\N{\ren}send notifyDatasetChanged to the ListView
Dialogue: 0,0:20:47.24,0:20:49.92,ch,,0,0,0,,因为这两个操作不在同一时候,\N那么在这两个操作之间也许会有一个对布局的请求\N{\ren}cause in between that may be a request for a layout
Dialogue: 0,0:20:49.92,0:20:52.26,ch,,0,0,0,,这样当notifyDatasetChange发生时,\NListView会有互斥的数据\N{\ren}and then ListView will have conflicting data
Dialogue: 0,0:20:54.96,0:20:57.76,ch,,0,0,0,,接下来我们会将一些数据项属性的内容\N{\ren}then we are gonna talk about a couple of item properties
Dialogue: 0,0:20:57.76,0:21:00.04,ch,,0,0,0,,第一个要讲的内容很简单\N{\ren}so the first one is actually really simple
Dialogue: 0,0:21:00.04,0:21:02.26,ch,,0,0,0,,那就是失效数据项\N{\ren}it's the ability to disable these items
Dialogue: 0,0:21:02.26,0:21:06.66,ch,,0,0,0,,如果你看过Adapter的源码的话,\N你就知道当你创建自己的Adapter时\N{\ren}if you look at the adapter interface so when you create your own adapter
Dialogue: 0,0:21:06.66,0:21:10.64,ch,,0,0,0,,会有一个方法来通知ListView每条数据项是否是可用的\N{\ren}there is a method that you tell ListView weather or not a item is enabled
Dialogue: 0,0:21:10.64,0:21:13.00,ch,,0,0,0,,默认的实现是所有的Item都是可用的\N{\ren}by default,all items are enabled
Dialogue: 0,0:21:13.00,0:21:16.80,ch,,0,0,0,,一个可用的数据项可以让你设置selector\N{\ren}and having an enabled item lets you (selected) with the drawables
Dialogue: 0,0:21:16.80,0:21:18.80,ch,,0,0,0,,所以你会在默认的主题中看到\N{\ren}so which you gets with the default theme
Dialogue: 0,0:21:18.80,0:21:21.16,ch,,0,0,0,,每个item背后的橘黄色强调\N{\ren}the orange highlights behind the item
Dialogue: 0,0:21:21.18,0:21:22.84,ch,,0,0,0,,同时,可用的item还是可点击的\N{\ren}it lets you also click the item
Dialogue: 0,0:21:22.86,0:21:25.46,ch,,0,0,0,,当你点击的时候,你会获取到onListItemClick的事件\N{\ren}and you can get an onListItemClick event
Dialogue: 0,0:21:25.46,0:21:27.08,ch,,0,0,0,,但是在某些情况下\N{\ren}in some cases though
Dialogue: 0,0:21:27.08,0:21:28.28,ch,,0,0,0,,你想让某些item失效(不可用)\N{\ren}you want to disable those items
Dialogue: 0,0:21:28.28,0:21:33.00,ch,,0,0,0,,失效数据项并不一定是向用户展示此item不可用,例如:\N{\ren}and disabling items is not necessarily to show the user that this item is not available for instance
Dialogue: 0,0:21:33.00,0:21:36.02,ch,,0,0,0,,其还可以用来表示此item请求的web服务器暂时不可用\N{\ren}it may be a web server that's not reachable
Dialogue: 0,0:21:36.02,0:21:39.46,ch,,0,0,0,,同时,失效的item还可以用来简单的\N创建一种不同数据项类型\N{\ren}it's also for simply to create different items
Dialogue: 0,0:21:39.46,0:21:41.96,ch,,0,0,0,,不同的类型意味着不同的视觉展示\N{\ren}items have different visual appearance
Dialogue: 0,0:21:41.96,0:21:44.42,ch,,0,0,0,,这儿有一个例子,这个例子是我们的应用市场app\N{\ren}so there's an example,this is market application
Dialogue: 0,0:21:44.42,0:21:48.26,ch,,0,0,0,,如果你注意到了其中的绿色的标题项时\N{\ren}if you look at the green headers in the middle of the ListView
Dialogue: 0,0:21:48.26,0:21:50.26,ch,,0,0,0,,这些数据项就是无效的数据项\N{\ren}those are disabled items
Dialogue: 0,0:21:50.26,0:21:55.38,ch,,0,0,0,,是这些item失效的原因是其只用起到头标的作用即可\N(用于指示出列表中不同的分段)\N{\ren}so the items are disabled because they serve as header so they just indicate different sections of the list
Dialogue: 0,0:21:55.38,0:21:59.50,ch,,0,0,0,,很显然,这个item不需要被轨迹球选择或者被点击\N{\ren}and obviously,it wouldn't make sense to able to select them with trackball or to click on them
Dialogue: 0,0:21:59.52,0:22:01.84,ch,,0,0,0,,所以说,这是一个很有用的特性\N{\ren}so it's a very simple feature that
Dialogue: 0,0:22:01.84,0:22:04.70,ch,,0,0,0,,被深度的用于android平台\N{\ren}use heavily inside the Android platform
Dialogue: 0,0:22:04.70,0:22:08.20,ch,,0,0,0,,因此,你可以选择将这点特性集成到你的应用中去\N{\ren}and you can agree choose of it inside your own applications
Dialogue: 0,0:22:10.24,0:22:13.80,ch,,0,0,0,,有时,在列表中仅仅获取到一个点击的事件是不够的\N{\ren}so sometimes you just getting a click event on the specific list item isn't enough
Dialogue: 0,0:22:13.80,0:22:16.76,ch,,0,0,0,,你想让用户在列表中做出多选或者单选\N{\ren}you want the user the be able to make choices within that list
Dialogue: 0,0:22:16.76,0:22:19.22,ch,,0,0,0,,你可能想让这个选择性变得互相独立\N{\ren}you may want that choice to be mutually exclusive
Dialogue: 0,0:22:19.24,0:22:25.36,ch,,0,0,0,,这次你就可能每次只能选择一个数据项,\N你可能也想让用户做出多选\N{\ren}you can only select one item at a time,you may want the user to be able to select multiple items out of the specific list
Dialogue: 0,0:22:25.40,0:22:27.94,ch,,0,0,0,,基于以上原因,我们提供了ListView的选择模式\N{\ren}so for that,we provide choice mode
Dialogue: 0,0:22:27.94,0:22:31.14,ch,,0,0,0,,single choice模式赋予每个item单选性\N{\ren}you have a single choice mode which gives you radio button and once again
Dialogue: 0,0:22:31.14,0:22:33.14,ch,,0,0,0,,用于互相独立的选择\N{\ren}for mutually exclusive choices
Dialogue: 0,0:22:33.18,0:22:34.32,ch,,0,0,0,,你还有multiple choice mode\N{\ren}you have multiple choice mode
Dialogue: 0,0:22:34.32,0:22:37.14,ch,,0,0,0,,利用这点,你可以对列表中的数据项进行多选\N{\ren}which lets you check a number of items within the list
Dialogue: 0,0:22:37.16,0:22:40.98,ch,,0,0,0,,那么你要用什么方法来获取到选取的结果呢\N{\ren}so what happens when you want to get that check state back out and
Dialogue: 0,0:22:40.98,0:22:43.80,ch,,0,0,0,,从而,读出这些状态来设置视图(radio or checkbox)\N{\ren}read it in another part of your application
Dialogue: 0,0:22:43.80,0:22:46.22,ch,,0,0,0,,这里有一些方法是你可以调用的\N{\ren}you can call several methods on ListView
Dialogue: 0,0:22:46.22,0:22:52.80,ch,,0,0,0,,getCheckedItemPosition此方法\N会在单选模式下返回选中的item的位置\N{\ren}getCheckedItemPosition will return the position of the items you've selected in single choice mode
Dialogue: 0,0:22:52.80,0:22:57.08,ch,,0,0,0,,getCheckedItemPositions在多选模式下管用\N{\ren}if you are multiple choice mode,you can call getCheckedItemPositions plural
Dialogue: 0,0:22:57.08,0:23:00.66,ch,,0,0,0,,这个方法会返回你选中的所有item的位置\N{\ren}and that will give you all the positions that are currently checked
Dialogue: 0,0:23:00.66,0:23:05.82,ch,,0,0,0,,我们之前提到过,有个固定id的概念在适配器中\N{\ren}but we mention before there is this concept of stable id within the adapter
Dialogue: 0,0:23:05.82,0:23:09.76,ch,,0,0,0,,此概念表示在适配器中的每一项都有\N{\ren}where each value within the adapter has
Dialogue: 0,0:23:09.80,0:23:14.58,ch,,0,0,0,,一个整数值来表示其唯一性\N{\ren}an integer that specifies uniquely that value
Dialogue: 0,0:23:14.58,0:23:19.06,ch,,0,0,0,,无论适配器中执行了删除操作或者插入操作,\N其值都能保持不变\N{\ren}no matter how the position may change due to other deletions and insertions
Dialogue: 0,0:23:19.06,0:23:20.16,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:23:20.16,0:23:24.56,ch,,0,0,0,,如果你想对你的适配器做很多插入或删除操作时\N{\ren}if you are going to have a lot of deletions and insertions within your adapter over time
Dialogue: 0,0:23:24.56,0:23:26.72,ch,,0,0,0,,还有你要对适配器进行多选\N{\ren}and you are also making choices
Dialogue: 0,0:23:26.72,0:23:31.08,ch,,0,0,0,,getCheckedItemIds这个方法就会返回被选中的item的id\N{\ren}then you can use getCheckedItemIds to refer to those items by id
Dialogue: 0,0:23:31.08,0:23:35.48,ch,,0,0,0,,这样就克服了position不能跟数据集平行的缺陷\N{\ren}so that the positions don't get out of alignment with your actual data
Dialogue: 0,0:23:36.90,0:23:37.66,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:23:39.30,0:23:39.76,ch,,0,0,0,,怎么回事儿...\N{\ren}come on
Dialogue: 0,0:23:40.68,0:23:41.22,ch,,0,0,0,,好了,继续...\N{\ren}there we go
Dialogue: 0,0:23:41.50,0:23:43.58,ch,,0,0,0,,这里看到的是两种选择模式的例子\N{\ren}so here is an example of each one in the choice modes
Dialogue: 0,0:23:44.10,0:23:47.02,ch,,0,0,0,,你可能在铃声选择器中已经见到过了\N{\ren}you've probably seen this before in the ringtones selector
Dialogue: 0,0:23:47.02,0:23:51.12,ch,,0,0,0,,另外一个是Gmail中的lable选择器\N{\ren}and in the selector for which labels you wanna display in gmail
Dialogue: 0,0:23:51.12,0:23:54.22,ch,,0,0,0,,这些看起来都不咋地,\N{\ren}so this all looks by default,but
Dialogue: 0,0:23:54.26,0:23:57.30,ch,,0,0,0,,但是你写的时候,你可以在getView方法中\N全权控制视图如何显示\N{\ren}as always,you are gonna control the presentation through getView
Dialogue: 0,0:23:57.30,0:24:00.08,ch,,0,0,0,,你可以发挥自己的想象,使其看起来充满妙趣\N{\ren}so you can make these look as fancy as you like
Dialogue: 0,0:24:01.38,0:24:03.74,ch,,0,0,0,,这件关于ListView的事情很让人摸不着头脑\N{\ren}now,something is very (...) by ListView is
Dialogue: 0,0:24:03.76,0:24:05.74,ch,,0,0,0,,那就是我们如何处理可聚焦的数据项\N{\ren}how we handle focusable items
Dialogue: 0,0:24:09.16,0:24:12.48,ch,,0,0,0,,{\ren\an8}注:轨迹球(带键盘的手机中,上下左右+确认键),\N现在已经不怎么用了
Dialogue: 0,0:24:05.76,0:24:09.16,ch,,0,0,0,,我们UI工具团队中遇到的最大限制之一就是\N{\ren}one of the big constraints that we have on the UI toolkit team is
Dialogue: 0,0:24:09.16,0:24:12.48,ch,,0,0,0,,我们一方面要支持轨迹球,另一方面还要支持触摸屏\N{\ren}that we need to support trackballs and touch screens
Dialogue: 0,0:24:12.52,0:24:15.66,ch,,0,0,0,,起初我们的方案是,一旦你触摸了屏幕\N{\ren}and we decide in the early (on) that as soon as you touch the screen
Dialogue: 0,0:24:15.66,0:24:17.48,ch,,0,0,0,,所有的聚焦选择都失效\N{\ren}the focus all the selection goes away
Dialogue: 0,0:24:17.48,0:24:19.12,ch,,0,0,0,,这就是我们提供选择模式的原因\N{\ren}and that's why we have the choice mode for instance
Dialogue: 0,0:24:19.14,0:24:23.34,ch,,0,0,0,,你不能想着用户点击了某项item,\N其被选中的状态就会一直保存在列表中\N{\ren}you can't just let the user tap an item in the list and keep the selection on screen
Dialogue: 0,0:24:23.34,0:24:26.24,ch,,0,0,0,,ListView会很为难,哥,我真的做不到啊\N{\ren}ListView like,"we will fight really hard to make that not happen"
Dialogue: 0,0:24:26.26,0:24:27.72,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:24:27.72,0:24:29.82,ch,,0,0,0,,我们默认所作的是\N{\ren}something we've done is that by default
Dialogue: 0,0:24:29.82,0:24:33.16,ch,,0,0,0,,如果你把某种可聚焦的控件放进了ListView\N{\ren}if you put a focusable item inside the ListView item,for instance
Dialogue: 0,0:24:33.16,0:24:36.04,ch,,0,0,0,,例如,你的列表中的某项有一行按钮\N{\ren}if you have a row in your list contains a couple of buttons
Dialogue: 0,0:24:36.04,0:24:39.50,ch,,0,0,0,,默认的实现是,当你使用轨迹球时,\N整行将会作为一个整体被选中\N{\ren}by default,the entire row will be selected when you use the trackball
Dialogue: 0,0:24:39.50,0:24:42.40,ch,,0,0,0,,这里的原因是,\N{\ren}and the reason for that is that it will be very awkward
Dialogue: 0,0:24:42.42,0:24:45.56,ch,,0,0,0,,如果我们把触摸球的选择分发给\N{\ren}to have trackball navigation that we go from selecting the whole item
Dialogue: 0,0:24:45.56,0:24:49.44,ch,,0,0,0,,此行中的子控件时,这会显得很笨拙\N{\ren}to selecting new items inside the row itself
Dialogue: 0,0:24:49.46,0:24:51.12,ch,,0,0,0,,难么,聪明的你如果先改变这点的话\N{\ren}so if you want more control over that
Dialogue: 0,0:24:51.12,0:24:55.10,ch,,0,0,0,,如果你想让轨迹球往行里面移动\N{\ren}if you want to have selectable,focusable items inside the row
Dialogue: 0,0:24:55.10,0:24:58.10,ch,,0,0,0,,你可以对ListView倾诉你的需求\N{\ren}you can tell ListView that you want that to happen
Dialogue: 0,0:24:58.10,0:25:01.22,ch,,0,0,0,,setItemsCanFocus传入true\N{\ren}so if you call setItemsCanFocus and you pass true
Dialogue: 0,0:25:01.22,0:25:06.56,ch,,0,0,0,,就代表你对ListView说,我想选行里的子控件\N{\ren}you are telling ListView,"ok,so none my rows,i don't want to select the entire rows,i want to select stuff inside the rows"
Dialogue: 0,0:25:06.60,0:25:07.42,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:25:07.42,0:25:11.18,ch,,0,0,0,,这里的例子展示了这种用法,在左边,是我们的联系人程序\N{\ren}and we have an example here,so on the left side,we have the contact application
Dialogue: 0,0:25:11.18,0:25:14.86,ch,,0,0,0,,在列表的数据项中,头像是可聚焦的(ImageButton)\N{\ren}you can see that there is focusable item on the left
Dialogue: 0,0:25:14.86,0:25:17.30,ch,,0,0,0,,当你点击时,就会快速显示联系人\N{\ren}that's the quick contact action
Dialogue: 0,0:25:17.30,0:25:22.04,ch,,0,0,0,,但是默认的实现是,用轨迹球是选不到这里的\N{\ren}but by the default,they decided they didn't want the user to be able to select that with trackball
Dialogue: 0,0:25:22.04,0:25:25.28,ch,,0,0,0,,因此当你使用轨迹球时,你只能选择整个行\N{\ren}so when you use the trackball you can only select the entire row,the entire contact
Dialogue: 0,0:25:25.28,0:25:27.36,ch,,0,0,0,,另一方面,在Twitter的应用中\N{\ren}on the other hand,in the Twitter application
Dialogue: 0,0:25:27.36,0:25:32.32,ch,,0,0,0,,他可以让你用轨迹球选择每个推文中的链接\N{\ren}they use that feature to be able to lets you select the links inside each tweet
Dialogue: 0,0:25:32.32,0:25:34.20,ch,,0,0,0,,因此,你不能选中整个推文\N{\ren}so you won't be able to select the entire tweet
Dialogue: 0,0:25:34.20,0:25:37.46,ch,,0,0,0,,但是你可以在链接之间进行导航\N{\ren}but you can navigate with the trackball from link to link
Dialogue: 0,0:25:37.48,0:25:38.46,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:25:38.46,0:25:41.44,ch,,0,0,0,,我们意识到这样实现是笨拙的,有时会很无奈\N{\ren}we realize that it would be awkward and sometimes is difficult
Dialogue: 0,0:25:41.44,0:25:45.26,ch,,0,0,0,,当你有很复杂的列表项时,其中可能有好几处触摸区域\N{\ren}when you want to have complex list items that have several touchable areas
Dialogue: 0,0:25:45.26,0:25:46.86,ch,,0,0,0,,虽然有方法能够克服困难\N{\ren}there are various to handle that
Dialogue: 0,0:25:46.86,0:25:51.06,ch,,0,0,0,,这些方法在邮件列表中,或者论坛中都能找到\N{\ren}they are like (good) tutorials and explanations on various (mail list since) forum on the web
Dialogue: 0,0:25:51.06,0:25:53.82,ch,,0,0,0,,但是这点上我们显然做得不够,在未来我们会加以改善\N{\ren}and this is something we'd like to improve in the future
Dialogue: 0,0:25:53.82,0:25:56.32,ch,,0,0,0,,如果你有好点子来指导我们如何做的话\N{\ren}so if you have idea on how we should do that
Dialogue: 0,0:25:56.32,0:25:59.90,ch,,0,0,0,,尽情与我们交流在Android群组中\N{\ren}feel free to contact us (via) android groups,we can talk about it
Dialogue: 0,0:25:59.90,0:26:04.84,ch,,0,0,0,,我的一个想法是,搞一个ListView2号出来,\N使其只支持触摸模式\N{\ren}my current idea is to may be have a ListView2 that will support only touch mode
Dialogue: 0,0:26:04.84,0:26:07.94,ch,,0,0,0,,那么这样的话,应用的表现就会跟其他平台相差无几了\N{\ren}and it will be closer to what you see on other platforms
Dialogue: 0,0:26:10.36,0:26:14.40,ch,,0,0,0,,当你显示列表时,如果不给一个情景引导的话,\N会让人感到很奇怪\N{\ren}so it's pretty weird you have a list that you just wanna show without a context
Dialogue: 0,0:26:14.40,0:26:19.68,ch,,0,0,0,,通常,你要让用户知道,这个列表中有什么,\N以及用户如何操作此列表\N{\ren}generally,you wanna say something to the user about what this list contains and what they are supposed to do with it
Dialogue: 0,0:26:19.68,0:26:21.68,ch,,0,0,0,,那么,为了这个需求\N{\ren}so,for this
Dialogue: 0,0:26:21.68,0:26:24.90,ch,,0,0,0,,我们回头再看看最近发布的Twitter应用\N{\ren}again,we come back to the Twitter application that was recently released
Dialogue: 0,0:26:24.90,0:26:26.90,ch,,0,0,0,,这里如你所见的\N{\ren}as you can see here
Dialogue: 0,0:26:26.90,0:26:30.28,ch,,0,0,0,,我们有几个数据项来提供上下文\N{\ren}we've got several different items that provider context
Dialogue: 0,0:26:30.28,0:26:33.14,ch,,0,0,0,,来让用户知道他在看什么,应用中顶部有一个头部\N{\ren}for what is you are looking at,we have the tweets header up top
Dialogue: 0,0:26:33.14,0:26:37.28,ch,,0,0,0,,这里告诉用户,我们正在看GoogleIO的推文话题\N{\ren}we say that we were looking at tweets by Google IO in this case
Dialogue: 0,0:26:37.28,0:26:40.72,ch,,0,0,0,,除此之外,在底部,我们又加了一个额外的数据项\N{\ren}but also at the bottom,we have this extra element
Dialogue: 0,0:26:40.72,0:26:45.52,ch,,0,0,0,,详细说明我们现在处于列表的底部,\N列表在等待命令加载新的内容\N{\ren}that specifies that we were at the end of the list,and we were loading new content on demand
Dialogue: 0,0:26:45.54,0:26:51.46,ch,,0,0,0,,这就是一个很好的例子,来运用头部和底部在ListView中\N{\ren}so this is an example of several different ways of handling headers and footers within ListView
Dialogue: 0,0:26:53.26,0:26:54.68,ch,,0,0,0,,如果你想有一个固定的头部\N{\ren}if you wanna use a fixed header
Dialogue: 0,0:26:54.68,0:26:54.94,ch,,0,0,0,,\N{\ren}well
Dialogue: 0,0:26:54.94,0:26:57.58,ch,,0,0,0,,这很简单,你要做的就是\N{\ren}this is pretty easy,all you need to do is
Dialogue: 0,0:26:57.58,0:27:00.98,ch,,0,0,0,,在ListView的上面或者下面布局一个新的视图就行\N{\ren}place other views either above or below your ListView
Dialogue: 0,0:27:00.98,0:27:05.12,ch,,0,0,0,,这样的布局你可能见到过\N{\ren}and you probably seeing layouts quiet a bit like this before
Dialogue: 0,0:27:07.46,0:27:10.92,ch,,0,0,0,,但是如果你想让上面的头部也能滚动的话,\N事情就变得有点复杂了\N{\ren}if you want them to scroll,then things get a little bit more complex
Dialogue: 0,0:27:10.94,0:27:11.42,ch,,0,0,0,,但是\N{\ren}but
Dialogue: 0,0:27:11.42,0:27:15.06,ch,,0,0,0,,我们为你做了一点工作,\N以至于你不用太多担心其如何实现\N{\ren}we've done a little bit the work for you,so that you don't have to worry to much about it
Dialogue: 0,0:27:15.06,0:27:17.34,ch,,0,0,0,,addHeaderView和addFooterView\N{\ren}addHeaderView and addFooterView
Dialogue: 0,0:27:17.34,0:27:21.42,ch,,0,0,0,,这两个方法,其用法都是你先规定好一个视图,\N{\ren}both you specify a view that will appear at the very beginning and very end
Dialogue: 0,0:27:21.42,0:27:23.98,ch,,0,0,0,,出现在适配器中其他列表项的顶部或者底部\N{\ren}of all the other list content in your adapter
Dialogue: 0,0:27:23.98,0:27:25.98,ch,,0,0,0,,你可以传入任何你想要的视图\N{\ren}you can put whatever you want in here
Dialogue: 0,0:27:25.98,0:27:31.88,ch,,0,0,0,,需要注意的是,这两个方法要在setAdapter之前被调用\N{\ren}however,the trick to this is that you have to call these functions before setAdapter()
Dialogue: 0,0:27:31.88,0:27:35.74,ch,,0,0,0,,由此,你可以猜猜其内部的实现原理\N{\ren}and that might give you a little bit of clues how this implement under the hood
Dialogue: 0,0:27:35.74,0:27:39.20,ch,,0,0,0,,这两个方法也可以传入第二个参数isSelectable\N{\ren}both of these functions also take an extra parameter is selectable
Dialogue: 0,0:27:39.20,0:27:42.70,ch,,0,0,0,,这会告知最终的适配器\N{\ren}this corresponds to wether or not the final adapter being used
Dialogue: 0,0:27:42.70,0:27:45.82,ch,,0,0,0,,这两个加入的数据项是否是可用的\N{\ren}will report back to the list these items are enabled
Dialogue: 0,0:27:45.82,0:27:48.06,ch,,0,0,0,,这里的命名有点问题\N{\ren}there is a little bit naming conflict about that
Dialogue: 0,0:27:48.06,0:27:50.80,ch,,0,0,0,,我们很惭愧,这种做法可不是那么直观\N{\ren}sorry about it,it's not the most intuitive thing in the world
Dialogue: 0,0:27:52.90,0:27:53.58,ch,,0,0,0,,那我接着说了\N{\ren}so
Dialogue: 0,0:27:53.58,0:27:58.38,ch,,0,0,0,,也许你已经猜到了,ListView添加头部或者底部的实现\N是在内部把适配包裹到里另一个适配器中去了\N{\ren}as you might have guessed,ListView does this by internally wrapping your adapter inside another one
Dialogue: 0,0:27:58.40,0:28:02.64,ch,,0,0,0,,它把第一个和最后一个数据项的数据类型做了改变\N{\ren}and it will turns different view types for the first and last item
Dialogue: 0,0:28:02.64,0:28:05.46,ch,,0,0,0,,这里你要小心的是\N{\ren}so what you need to be careful of with this
Dialogue: 0,0:28:05.46,0:28:09.16,ch,,0,0,0,,当你调用getAdapter的时候,你不能假设\N{\ren}is that you don't make assumptions that if you do getAdapter on your list
Dialogue: 0,0:28:09.16,0:28:14.20,ch,,0,0,0,,列表所返回的适配器就是你setAdapter时的适配器\N这里已经不是同一个适配器了\N{\ren}that is going to be the same object instance you passed in to setAdapter in the first place
Dialogue: 0,0:28:17.28,0:28:19.70,ch,,0,0,0,,让我们快速的看看列表的选择器吧\N{\ren}and we gonna take look at the list selectors very quick
Dialogue: 0,0:28:19.70,0:28:22.92,ch,,0,0,0,,当你使用轨迹球在列表中导航时,\N你所看到的就是列表选择器\N{\ren}so the list selectors is what you see when you use the track ball to navigate around
Dialogue: 0,0:28:22.92,0:28:26.06,ch,,0,0,0,,这也是当你在某个数据项上进行长按时,你所见到的\N{\ren}it's also what you see when you perform a long list on the item
Dialogue: 0,0:28:26.06,0:28:28.76,ch,,0,0,0,,或者当你轻触数据项时\N{\ren}or you simply tap the item,when you tap an item,you can
Dialogue: 0,0:28:28.76,0:28:34.16,ch,,0,0,0,,你会看到选择器在屏幕显示150毫秒左右\N{\ren}you will see the selector appear on screen briefly for a like 150 millisecond or something like that
Dialogue: 0,0:28:34.16,0:28:36.52,ch,,0,0,0,,你可以自定义列表选择器\N{\ren}you can customize the list selector
Dialogue: 0,0:28:36.52,0:28:38.44,ch,,0,0,0,,但是你要意识到的是\N{\ren}but what's really important to realize is that
Dialogue: 0,0:28:38.44,0:28:41.14,ch,,0,0,0,,首先,列表选择器在触摸模式下是不显示的\N{\ren}first of all,the list selector is not showing in the touch mode
Dialogue: 0,0:28:41.14,0:28:45.66,ch,,0,0,0,,因此,如果你用轨迹球选择了某个数据项,\N之后你又触摸了屏幕\N{\ren}so if you select an item with a trackball then you touch the screen like where i mention before
Dialogue: 0,0:28:45.66,0:28:47.66,ch,,0,0,0,,选择器的状态就会消失\N{\ren}the selection disappears
Dialogue: 0,0:28:47.66,0:28:51.62,ch,,0,0,0,,其次,选择器默认情况下是在数据项的底部的\N{\ren}and also the selector by default is shown behind the items
Dialogue: 0,0:28:51.62,0:28:54.52,ch,,0,0,0,,因此,当你的数据项有自定义背景时,\N选择器的显示就会出问题\N{\ren}so this can be a problem if your item has custom backgrounds
Dialogue: 0,0:28:54.52,0:28:56.56,ch,,0,0,0,,因此.如果你的数据项的背景纹理或者颜色的话\N{\ren}so if you have texture or custom color
Dialogue: 0,0:28:56.58,0:28:57.20,ch,,0,0,0,,不好意思\N{\ren}sorry
Dialogue: 0,0:28:57.24,0:28:58.16,ch,,0,0,0,,或者自定义的颜色的话\N{\ren}or custom color
Dialogue: 0,0:28:58.16,0:29:00.90,ch,,0,0,0,,你就不能看到你的选择器了\N{\ren}that you won't see...you won't be able to see a selector
Dialogue: 0,0:29:00.96,0:29:04.52,ch,,0,0,0,,在ListView中,不论是在XML中还是JAVA API中\N{\ren}so on the ListView in XML does also equivalent in the Java API
Dialogue: 0,0:29:04.52,0:29:08.70,ch,,0,0,0,,你可以对drawSelectorOnTop传入true\N{\ren}you can use the attribute called drawSelectorOnTop and if you specify it true
Dialogue: 0,0:29:08.70,0:29:10.54,ch,,0,0,0,,这样我们就会把选择器显示在视图上面\N{\ren}then we gonna put the selector on top
Dialogue: 0,0:29:10.56,0:29:13.74,ch,,0,0,0,,不过如果你对默认的选择器这么做的话,\N你就不能看到你的数据项了\N{\ren}if you do that with the default selector,then you won't be able to see your item
Dialogue: 0,0:29:13.74,0:29:17.00,ch,,0,0,0,,因为我们的默认选择器还是在item的后面("不解...")\N{\ren}because our default selector is still on your back
Dialogue: 0,0:29:17.02,0:29:18.60,ch,,0,0,0,,这样做没啥效果\N{\ren}and it won't work really well
Dialogue: 0,0:29:18.60,0:29:22.06,ch,,0,0,0,,这里,我们展示的是市场上的一款叫做多彩笔记的应用\N{\ren}so here,we have an example of an application on market called color notes
Dialogue: 0,0:29:22.06,0:29:25.16,ch,,0,0,0,,这里的数据项都有自定义的背景\N{\ren}as you can see,their items have a custom background color
Dialogue: 0,0:29:25.16,0:29:27.16,ch,,0,0,0,,这里的背景色是黄色\N{\ren}so the items have yellow background
Dialogue: 0,0:29:27.16,0:29:29.52,ch,,0,0,0,,这个应用为数据项创建了自己的选择器\N{\ren}and they've created their own selectors
Dialogue: 0,0:29:29.52,0:29:33.16,ch,,0,0,0,,他们创建了一个简单的橘黄色的边框\N{\ren}so they've created a simple orange border and
Dialogue: 0,0:29:33.16,0:29:38.78,ch,,0,0,0,,他们是怎么做到的呢,很简单,\N就是设置drawSelectorOnTop为true\N{\ren}how they've done that was simply to set drawSelectorOnTop equals true attribute on ListView
Dialogue: 0,0:29:38.78,0:29:41.66,ch,,0,0,0,,这样我们就把选择器放在了数据项的上面了\N{\ren}so that we move the selector back on top of the item
Dialogue: 0,0:29:41.66,0:29:45.60,ch,,0,0,0,,现在,如果你想有一个这样的选择器\N{\ren}now,if you wanna it to have a selector there was a (fields)
Dialogue: 0,0:29:45.60,0:29:47.14,ch,,0,0,0,,在这里,你看到的是一个空心的\N{\ren}cause you can see here,that is hollow
Dialogue: 0,0:29:47.14,0:29:49.14,ch,,0,0,0,,如果你还想要这种橘黄色的高亮\N{\ren}so if you still want the orange highlights
Dialogue: 0,0:29:49.14,0:29:51.72,ch,,0,0,0,,除此之外,你还想要一个自定义的背景色\N{\ren}but you also want it the a custom background color
Dialogue: 0,0:29:51.72,0:29:55.78,ch,,0,0,0,,你就需要多做一点点的工作了,\N在接下来的几个PPT中,你会知道如何去做\N{\ren}you need to do a little more working,we will see how to do that in a couple of slides
Dialogue: 0,0:29:55.78,0:30:00.08,ch,,0,0,0,,这是一种XML,你用来创建自己的选择器\N{\ren}this is the kind of XML that you have to write to create a list selector
Dialogue: 0,0:30:00.10,0:30:02.82,ch,,0,0,0,,请问,有多少人曾经创建过自定义的选择器\N{\ren}so how many of you have ever create you own custom selector
Dialogue: 0,0:30:02.82,0:30:04.34,ch,,0,0,0,,有一些\N{\ren}quiet a few
Dialogue: 0,0:30:04.34,0:30:08.74,ch,,0,0,0,,我确定刚开始的时候,你会很困惑,如何让其起效果\N{\ren}and i'm sure that you'll beat puzzle (at first on) how to make it work
Dialogue: 0,0:30:08.74,0:30:13.58,ch,,0,0,0,,从根本上来讲,你创建了一个drawable,来告诉framework\N{\ren}basically,the idea is that you create a drawable that will tell the framework
Dialogue: 0,0:30:13.58,0:30:17.42,ch,,0,0,0,,根据当前数据项的状态来决定用哪个drawable\N{\ren}what drawable to use based on the current state of the item
Dialogue: 0,0:30:17.42,0:30:20.50,ch,,0,0,0,,因此我们有很多不同的状态,我们有窗口是否在聚焦\N{\ren}so we have a bunch of different states,we have whether or not the window is focused
Dialogue: 0,0:30:20.50,0:30:23.02,ch,,0,0,0,,控件是否在被聚焦\N{\ren}whether or not the widgets is focused
Dialogue: 0,0:30:23.02,0:30:25.76,ch,,0,0,0,,控件是否被按下或者选中\N{\ren}whether or not the widgets is pressed or selected (eta.)
Dialogue: 0,0:30:25.76,0:30:28.62,ch,,0,0,0,,正如这里你所见的\N{\ren}as you can see here,usually
Dialogue: 0,0:30:28.64,0:30:31.60,ch,,0,0,0,,通常你要非常准确的描述这些状态\N{\ren}you have to be extremely precise about the states
Dialogue: 0,0:30:31.60,0:30:33.16,ch,,0,0,0,,请看第六行的代码\N{\ren}so if you look at line number 6
Dialogue: 0,0:30:33.16,0:30:35.74,ch,,0,0,0,,这里如果item是被聚焦的\N{\ren}we were saying,"ok,if the item is focused
Dialogue: 0,0:30:35.74,0:30:38.92,ch,,0,0,0,,以及它不是无效的,以及它是被点击的\N{\ren}and,it's not enabled and it's pressed
Dialogue: 0,0:30:38.92,0:30:42.96,ch,,0,0,0,,这时,我们才会采用list_selector_background_disabled\N{\ren}then we'll gonna use the drawable in the list_selector_background_disabled"
Dialogue: 0,0:30:42.96,0:30:46.24,ch,,0,0,0,,最好的做法不是从头再写\N{\ren}so the best you can do is not to write those from scratch
Dialogue: 0,0:30:46.26,0:30:48.50,ch,,0,0,0,,而是从android平台的源码中引用\N{\ren}just grab the source code of the Android platform
Dialogue: 0,0:30:48.50,0:30:51.06,ch,,0,0,0,,我没记错的话,ApiDemos里面有不少例子\N{\ren}or i think we have some examples in the ApiDemos
Dialogue: 0,0:30:51.06,0:30:55.88,ch,,0,0,0,,你只需要把我们定义好的状态拿来用,\N然后定义自己的drawable就行\N{\ren}and just (keep in) base what we have and just replace everything with your own drawables
Dialogue: 0,0:30:55.88,0:30:58.42,ch,,0,0,0,,这里也有一个小小的技巧\N{\ren}there is also one little trick here
Dialogue: 0,0:30:58.42,0:31:01.24,ch,,0,0,0,,请看代码13行\N{\ren}if you look at them line number 13 for instance
Dialogue: 0,0:31:01.24,0:31:06.02,ch,,0,0,0,,我们引用了list_selector_background_transition\N{\ren}we are referring a drawable called list_selector_background_transition
Dialogue: 0,0:31:06.02,0:31:09.92,ch,,0,0,0,,这里的drawable是当你长按列表中的表项时进行动画的\N{\ren}that's the drawable that animates when you long click an item in a list
Dialogue: 0,0:31:09.92,0:31:11.54,ch,,0,0,0,,这里的动画是从橘黄色变为白色\N{\ren}it turns from orange to white
Dialogue: 0,0:31:11.54,0:31:13.76,ch,,0,0,0,,如果你对此效果的实现感兴趣\N{\ren}if you're interested in how to make that happen
Dialogue: 0,0:31:13.76,0:31:15.58,ch,,0,0,0,,你可以去查看我们的源码\N{\ren}you can just go check out our source code
Dialogue: 0,0:31:15.58,0:31:19.62,ch,,0,0,0,,你会看到我们XML中的动画是如何定义的,\N实际上这很简单\N{\ren}and you will see how to declare that kind of animation in XML,it's actually pretty simple
Dialogue: 0,0:31:20.78,0:31:25.58,ch,,0,0,0,,如果在你的列表中的表项有自定义的背景\N{\ren}now,if your items in the list have custom background
Dialogue: 0,0:31:25.58,0:31:28.58,ch,,0,0,0,,自定义的不透明的背景,就像刚刚我们看到过的应用截屏\N{\ren}custom opaque background like we just saw on the screenshot
Dialogue: 0,0:31:28.58,0:31:32.16,ch,,0,0,0,,但是你仍然想要一个不透明的选择器背景在表项的下面\N{\ren}and you still want to have an opaque selector background behind the item
Dialogue: 0,0:31:32.16,0:31:34.04,ch,,0,0,0,,这有一个妙计你可以拿去用\N{\ren}there is a very simple tricky you can use
Dialogue: 0,0:31:34.06,0:31:37.54,ch,,0,0,0,,你可以用一个选择器的drawable作为你的背景\N{\ren}you can use a selector drawable for your items background
Dialogue: 0,0:31:37.54,0:31:41.46,ch,,0,0,0,,你要做的全部事情就是当其被选中时,\N将其背景设为透明\N{\ren}and all you have to do is give it transparent background when it selected
Dialogue: 0,0:31:41.46,0:31:44.00,ch,,0,0,0,,你可以看看这里的代码,仅仅几行的xml\N{\ren}so here you can see,it's only a few lines of XML
Dialogue: 0,0:31:44.02,0:31:48.08,ch,,0,0,0,,当被选中的时候,\N{\ren}and you can see that for the state_selected equals (for the selected states)
Dialogue: 0,0:31:48.08,0:31:50.08,ch,,0,0,0,,其背景为透明色\N{\ren}with the transparent color
Dialogue: 0,0:31:50.08,0:31:52.08,ch,,0,0,0,,0来表示透明色\N{\ren}which is the just a number 0
Dialogue: 0,0:31:52.10,0:31:57.80,ch,,0,0,0,,其他情况下,我们就用任意颜色来表示我们的背景了\N{\ren}and in every other case,we just use whatever color we decide to use for our item
Dialogue: 0,0:31:57.80,0:32:02.86,ch,,0,0,0,,这是个小小的技巧,但是能让你\N以一种全新的方式自定义ListView\N{\ren}so this is a very simple,but it lets you customize your ListView in a whole new ways
Dialogue: 0,0:32:06.18,0:32:09.04,ch,,0,0,0,,接下来谈谈ListView中的一些其他特性\N{\ren}so coming into a few the other features of ListView
Dialogue: 0,0:32:09.04,0:32:13.02,ch,,0,0,0,,对ListView已经很熟悉的各位\N{\ren}as any of you who have worked with ListView so far will probably already know
Dialogue: 0,0:32:13.02,0:32:16.62,ch,,0,0,0,,相信你们对这个话题的内容已经了然于胸了\N{\ren}there is whole other (grab bag) functionality that's available for you to use
Dialogue: 0,0:32:16.62,0:32:18.98,ch,,0,0,0,,因此,我们会精选一些快速的讲\N{\ren}so we were gonna go though a couple of those really quickly
Dialogue: 0,0:32:20.14,0:32:20.74,ch,,0,0,0,,首先\N{\ren}so
Dialogue: 0,0:32:20.74,0:32:21.84,ch,,0,0,0,,transcript模式\N{\ren}transcriptMode
Dialogue: 0,0:32:21.84,0:32:25.46,ch,,0,0,0,,有多少人尝试过去写聊天客户端呢\N{\ren}how many have you tried to write anything with assembly some sort of chat client
Dialogue: 0,0:32:25.48,0:32:26.20,ch,,0,0,0,,有人么\N{\ren}anyone
Dialogue: 0,0:32:27.06,0:32:28.56,ch,,0,0,0,,不错,我们有这样的人才\N{\ren}ok,we have a few
Dialogue: 0,0:32:28.96,0:32:31.74,ch,,0,0,0,,我希望你会发现transcriptMode的好用之处\N{\ren}so,hopefully,you found transcriptMode useful
Dialogue: 0,0:32:32.32,0:32:36.40,ch,,0,0,0,,这个模式会根据内容的变化来改变列表的行为\N{\ren}so this changes the behavior of the list when the content changes
Dialogue: 0,0:32:36.42,0:32:38.98,ch,,0,0,0,,当你调用notifyDatasetChanged时\N{\ren}so when you call notifyDatasetChanged
Dialogue: 0,0:32:38.98,0:32:42.86,ch,,0,0,0,,你的列表会执行另一种布局更新的路线\N{\ren}your list performs another layout path
Dialogue: 0,0:32:42.86,0:32:46.92,ch,,0,0,0,,这个模式定义了当新内容到来时,\NListView进行滚动的方向\N{\ren}this defines where we were going to scroll to,now that you have your new content
Dialogue: 0,0:32:46.92,0:32:49.50,ch,,0,0,0,,如果这个属性是不可用的话,这也是我们的默认设置\N{\ren}if it is disabled which is our default
Dialogue: 0,0:32:49.50,0:32:53.40,ch,,0,0,0,,当你的适配器内容改变时,我们不会自动滚动任何内容\N{\ren}then we don't scroll when anything changes in terms of your adapter contents
Dialogue: 0,0:32:53.44,0:32:56.16,ch,,0,0,0,,如果你把它设置成正常的话,那么\N{\ren}if you set transcriptMode to normal,however
Dialogue: 0,0:32:56.16,0:32:58.84,ch,,0,0,0,,当你在列表的尾部添加内容时\N{\ren}then if you add the edge of the list
Dialogue: 0,0:32:58.84,0:33:00.50,ch,,0,0,0,,新内容来会传递到列表中\N{\ren}and new content comes in
Dialogue: 0,0:33:00.50,0:33:03.90,ch,,0,0,0,,我们就会把列表向下滚,如果最后一个数据项是可见的话\N{\ren}then we gonna go ahead and scroll to the bottom if the last item is visible
Dialogue: 0,0:33:03.90,0:33:05.60,ch,,0,0,0,,因此\N{\ren}so
Dialogue: 0,0:33:05.60,0:33:07.60,ch,,0,0,0,,这基本上是\N{\ren}this basically makes such that
Dialogue: 0,0:33:07.60,0:33:10.96,ch,,0,0,0,,如果你现在在聊天客户端的列表中部时,\N你滚动列表去查看历史消息时\N{\ren}if you are in the middle of chat client,and you scrolling back in history
Dialogue: 0,0:33:10.96,0:33:12.88,ch,,0,0,0,,此时,又有新消息到来的话\N{\ren}and a new message comes in
Dialogue: 0,0:33:12.88,0:33:15.40,ch,,0,0,0,,此时你不能马上将视图滚动到最底部\N{\ren}you're not gonna scroll the bottom immediately there
Dialogue: 0,0:33:15.40,0:33:17.68,ch,,0,0,0,,但是如果你此时就在底部\N{\ren}but if you already at the bottom
Dialogue: 0,0:33:17.68,0:33:20.90,ch,,0,0,0,,你的注意力有点集中来消息到来时\N{\ren}and sort of paying attention to (live stream) things coming in
Dialogue: 0,0:33:20.90,0:33:24.60,ch,,0,0,0,,这里我们就会自动将列表滚动,使最后一个数据项可见\N{\ren}then we are gonna go ahead scroll down and make that last item visible for you
Dialogue: 0,0:33:24.60,0:33:28.98,ch,,0,0,0,,如果你在做一个聊天客户端,通常\N{\ren}so if you are doing a chat client,usually you're also
Dialogue: 0,0:33:31.02,0:33:33.14,ch,,0,0,0,,你不想要任何东西都从上往下堆砌\N{\ren}you don't wanna everything just (stack) in from the top
Dialogue: 0,0:33:33.14,0:33:35.52,ch,,0,0,0,,这并不是聊天客户端的标准\N{\ren}that's not usually the way that you view a chat client
Dialogue: 0,0:33:35.52,0:33:38.68,ch,,0,0,0,,因此我们有stackFromBottom这个属性,\N可以使所有的元素\N{\ren}so we have stackFromBottom that makes all the elements
Dialogue: 0,0:33:38.68,0:33:40.02,ch,,0,0,0,,从下往上堆砌\N{\ren}as described
Dialogue: 0,0:33:40.02,0:33:42.68,ch,,0,0,0,,从下往上堆砌根据聊天的历史记录\N{\ren}stack up from the bottom in terms of like a chat history
Dialogue: 0,0:33:42.68,0:33:46.54,ch,,0,0,0,,一条一条的往上堆砌,你发一条消息,\N我们就在底部堆砌一个表项\N{\ren}is sort of match up with any sort of input (field) you may have below it
Dialogue: 0,0:33:47.28,0:33:49.58,ch,,0,0,0,,因此我们把列表项以逆序堆砌了\N{\ren}so we stack items in reverse order
Dialogue: 0,0:33:49.58,0:33:52.22,ch,,0,0,0,,我们堆砌的第一条(最底部的一条)\N就是你发送的最后一条消息\N{\ren}and we start with the last item from the adapter
Dialogue: 0,0:33:52.22,0:33:54.54,ch,,0,0,0,,因此,你的适配器中的顺序还是不变的\N{\ren}so your oder still stays the same
Dialogue: 0,0:33:54.54,0:33:57.44,ch,,0,0,0,,我们只是逆序遍历表项进行显示而已\N{\ren}but we just sort of traverse differently,once again
Dialogue: 0,0:33:57.44,0:34:01.84,ch,,0,0,0,,但是你不能也假设getView的调用也是逆序的\N{\ren}this comes down to don't make assumptions about the order of call to getView()
Dialogue: 0,0:34:02.76,0:34:03.66,ch,,0,0,0,,所以嘛\N{\ren}so
Dialogue: 0,0:34:03.66,0:34:07.86,ch,,0,0,0,,这对任何聊天客户端的创建都是很有用处的\N{\ren}again this is really useful for any sort of check client that you might be trying to create
Dialogue: 0,0:34:10.12,0:34:13.50,ch,,0,0,0,,这里有个例子,你可能之前也见到过\N{\ren}here is an example of it,you probably seeing something very similar before
Dialogue: 0,0:34:13.50,0:34:16.00,ch,,0,0,0,,这里用到了transcriptMode\N{\ren}this is using both transcriptMode
Dialogue: 0,0:34:16.00,0:34:19.66,ch,,0,0,0,,和stackFromBottom.正如你所见到的,我们是从底部\N{\ren}and stackFromBottom.as you can see we were building a list
Dialogue: 0,0:34:19.66,0:34:23.98,ch,,0,0,0,,开始构建这个列表的,这样以来\N我们的空白空间就留在顶部而不是底部了\N{\ren}from the bottom so we have the empty space from the top rather than down below
Dialogue: 0,0:34:26.72,0:34:29.78,ch,,0,0,0,,每一个列表都支持一种特性叫做文本过滤\N{\ren}every list supports a feature called textFiltering
Dialogue: 0,0:34:29.78,0:34:32.96,ch,,0,0,0,,这个特性是超级有用的,在我们的第一台设备上\N{\ren}this is the feature that always extremely useful on the first device
Dialogue: 0,0:34:32.96,0:34:35.26,ch,,0,0,0,,第一台android设备,那就是T-mobile的G1了\N{\ren}on the first Android device that come out the T-mobile G1
Dialogue: 0,0:34:35.26,0:34:38.86,ch,,0,0,0,,因为它带有一个键盘,如果你了解这个特性的话,\N你会非常频繁的使用到它\N{\ren}because it had a keyboard,and (if you have a draw) it you can actually use that feature pretty easily
Dialogue: 0,0:34:38.86,0:34:41.66,ch,,0,0,0,,在其他的设备中,你需要自己准备好键盘\N{\ren}on other devices,you have to bring this stuff keyboard
Dialogue: 0,0:34:41.68,0:34:44.84,ch,,0,0,0,,按着menu键,才能用上这个功能\N{\ren}by keeping the menu key pressed to be able to use it
Dialogue: 0,0:34:44.84,0:34:46.96,ch,,0,0,0,,那么这个特性能让你干什么呢\N{\ren}so what it does is it lets you
Dialogue: 0,0:34:46.96,0:34:49.50,ch,,0,0,0,,这里有个截屏,例如,在音乐程序中\N{\ren}here is the screenshot,so for instance,as a music application
Dialogue: 0,0:34:49.50,0:34:51.02,ch,,0,0,0,,你把键盘连接上之后\N{\ren}you should bring up the keyboard
Dialogue: 0,0:34:51.04,0:34:52.50,ch,,0,0,0,,当你敲击字母的时候\N{\ren}and you start typing
Dialogue: 0,0:34:52.52,0:34:54.04,ch,,0,0,0,,列表就会根据你输入的内容来过滤列表内容\N{\ren}you are gonna filter the content via list
Dialogue: 0,0:34:54.04,0:34:57.20,ch,,0,0,0,,因此,我们这里会只显示以你输入字母为子集的列表项\N{\ren}so we gonna show you only the items that match whatever you type
Dialogue: 0,0:34:57.20,0:35:00.84,ch,,0,0,0,,这里的匹配规则全部取决于你的适配器的实现\N{\ren}and the matching rules depend entirely on your adapter
Dialogue: 0,0:35:00.84,0:35:04.48,ch,,0,0,0,,我们有一些适配器默认实现了一些过滤器\N{\ren}we have some adapters that by default,implements a filter
Dialogue: 0,0:35:04.48,0:35:07.06,ch,,0,0,0,,例如,CursorAdapter和ArrayAdapter\N{\ren}for instance,CursorAdapter and the ArrayAdapter
Dialogue: 0,0:35:07.06,0:35:10.58,ch,,0,0,0,,都有一个对过滤器的基本实现\N{\ren}have basic implementation of the filter
Dialogue: 0,0:35:10.58,0:35:15.28,ch,,0,0,0,,我记得在ArrayAdapter中,我们只做了是否相等的比较\N{\ren}i think in ArrayAdapter we just do (an equality) comparisons
Dialogue: 0,0:35:15.30,0:35:18.44,ch,,0,0,0,,如果你输入的内容被包含在表项的内部\N{\ren}so if whatever you type equals what the item contains
Dialogue: 0,0:35:18.44,0:35:21.86,ch,,0,0,0,,我们就会显示此列表项,否则就会将其移除列表\N{\ren}then we gonna show( it,others will be) removed from the list
Dialogue: 0,0:35:21.86,0:35:25.90,ch,,0,0,0,,如果你自定义视图的话,来实现\N自己的过滤器的话是很容易的\N{\ren}it's very simple to implement yourself if you have a custom adapter
Dialogue: 0,0:35:25.90,0:35:28.02,ch,,0,0,0,,你要做的就是实现Filterable接口\N{\ren}all you have to do is implement the Filterable interface
Dialogue: 0,0:35:28.02,0:35:30.02,ch,,0,0,0,,然后在getFilter方法中创建好过滤器\N{\ren}and then implement the getFilter method
Dialogue: 0,0:35:30.04,0:35:34.42,ch,,0,0,0,,在getFilter的方法中,你要返回一个新的过滤器的实例\N{\ren}the getFilter(),you have to return a new instance of the Filter class
Dialogue: 0,0:35:34.42,0:35:37.38,ch,,0,0,0,,而过滤器类仅仅只有两个方法\N{\ren}and the Filter class has only two methods
Dialogue: 0,0:35:37.38,0:35:41.14,ch,,0,0,0,,在android中,过滤器机制的好处在于\N{\ren}what's nice about the filtering mechanism in Android is that
Dialogue: 0,0:35:41.14,0:35:45.20,ch,,0,0,0,,我们为你干了大多数的困难工作,\N我们在背后的线程中处理所有事情\N{\ren}we do all the hard work for you,so we handle everything on the background thread
Dialogue: 0,0:35:45.24,0:35:48.02,ch,,0,0,0,,当用户开始打字的时候\N{\ren}so we gonna invoke when user start typing
Dialogue: 0,0:35:48.06,0:35:51.72,ch,,0,0,0,,我们将调用performFiltering在背后的线程中\N{\ren}we gonna invoke this method called performFiltering on the background thread
Dialogue: 0,0:35:51.72,0:35:54.96,ch,,0,0,0,,你可以在这个方法里面做任何事情,\N任何开销的事情都行\N{\ren}so you can do whatever you want in here,it can be very expensive,doesn't matter
Dialogue: 0,0:35:54.96,0:35:56.96,ch,,0,0,0,,因为这并不会让UI线程受阻\N{\ren}cause you're not going to block the UI
Dialogue: 0,0:35:56.96,0:36:00.78,ch,,0,0,0,,当用户开始输入的时候,我们会传递给你一个字符串\N{\ren}so we gonna pass you as a CharSequence whatever the user has typed
Dialogue: 0,0:36:00.78,0:36:05.74,ch,,0,0,0,,你可以根据用户输入的内容来\N来重建一个数据集用于ListView的显示\N{\ren}and then it's up to you to rebuild a list of data that you want to display in the ListView
Dialogue: 0,0:36:05.74,0:36:08.90,ch,,0,0,0,,为了将选出来的数据进行显示\N{\ren}to display that new set of data
Dialogue: 0,0:36:08.90,0:36:11.10,ch,,0,0,0,,你必须返回一个FilterResults的集合\N{\ren}you have to return a set of FilterResults
Dialogue: 0,0:36:11.12,0:36:13.50,ch,,0,0,0,,FilterResults是一个简单的类\N{\ren}the FilterResults is a simple class
Dialogue: 0,0:36:13.50,0:36:17.52,ch,,0,0,0,,其中包含了在过滤之后你想先要显示的表项\N{\ren}that contains a number of items that you want to show after filtering
Dialogue: 0,0:36:17.52,0:36:21.30,ch,,0,0,0,,这是一个Object,这个Object任何你想要的\N{\ren}and ...an Object,so the Object is whatever you want
Dialogue: 0,0:36:21.30,0:36:26.66,ch,,0,0,0,,它可以是一个游标,也可以是一个数组,等等\N{\ren}it's only used to be able...it can be a cursor,it can be an array,it can be whatever you need
Dialogue: 0,0:36:26.66,0:36:28.66,ch,,0,0,0,,之后,当你把FilterResults返回后\N{\ren}so then when you return that FilterResults
Dialogue: 0,0:36:28.66,0:36:32.46,ch,,0,0,0,,我们会在UI线程中调用publishResults\N{\ren}we gonna invoke the publishResults on the UI thread
Dialogue: 0,0:36:32.46,0:36:35.10,ch,,0,0,0,,我们在参数中传回FilterResults对象\N{\ren}and we gonna give you back the FilterResults Object
Dialogue: 0,0:36:35.10,0:36:39.48,ch,,0,0,0,,你的工作仅仅是把放进FilterResults的东西取出来\N{\ren}and your job in this method is simply to extract the data that you put in the FilterResults
Dialogue: 0,0:36:39.48,0:36:41.96,ch,,0,0,0,,对你的adapter进行修改\N{\ren}and communicate to your adapter
Dialogue: 0,0:36:41.96,0:36:43.82,ch,,0,0,0,,这里就是你修改你适配器的时候\N{\ren}so this is where you modify your adapter
Dialogue: 0,0:36:43.82,0:36:47.26,ch,,0,0,0,,这里也是你调用notifyDatasetChanged的地方\N{\ren}it's also where you call notifyDatasetChanged
Dialogue: 0,0:36:47.28,0:36:49.68,ch,,0,0,0,,实现一个过滤器就是这么简单\N{\ren}implementing a filter is pretty simple
Dialogue: 0,0:36:49.68,0:36:52.98,ch,,0,0,0,,他虽然涉及到几种不同的类,\N但是如果你深入Android源码的话\N{\ren}it involves a couple of classes,but again,if you look at the Android source code
Dialogue: 0,0:36:52.98,0:36:56.28,ch,,0,0,0,,你深入去看ArrayAdapter或者CursorAdapter的源码时\N{\ren}then you go to the source code,the ArrayAdapter or the CursorAdapter
Dialogue: 0,0:36:56.28,0:36:58.80,ch,,0,0,0,,你会看到我们是怎么做的,那简直弱爆了\N{\ren}you will how we've done it,it's extremely simple
Dialogue: 0,0:36:58.80,0:37:00.72,ch,,0,0,0,,这里有趣的一点是\N{\ren}something that's interesting here
Dialogue: 0,0:37:00.72,0:37:05.54,ch,,0,0,0,,那就是,当结果为空的时候,\N你要调用notifyDatasetInvalidate\N{\ren}for instance,if the number of result is zero,you might want to call notifyDatasetInvalidate
Dialogue: 0,0:37:05.54,0:37:08.36,ch,,0,0,0,,来通知ListView没有更多的数据可显示\N{\ren}to tell ListView that there is no more data to display
Dialogue: 0,0:37:12.00,0:37:13.76,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:37:13.76,0:37:17.56,ch,,0,0,0,,我们接着要讨论使用ListView时会遇到的一些情况\N{\ren}then we gonna...we want to talk about a few issue that's you might encounter with ListView
Dialogue: 0,0:37:17.56,0:37:20.10,ch,,0,0,0,,请问有多少人曾经遇到过,你有一个很漂亮的ListView\N{\ren}how many of you have ever seen that like you have a beautiful ListView
Dialogue: 0,0:37:20.10,0:37:23.34,ch,,0,0,0,,你有一个自定义的背景,但是一旦当你滚动的时候,\N列表就全变黑了\N{\ren}you have custom background,and you start scrolling and everything is black
Dialogue: 0,0:37:23.34,0:37:25.54,ch,,0,0,0,,嗯,有一些\N{\ren}ok,so a few already
Dialogue: 0,0:37:25.54,0:37:29.16,ch,,0,0,0,,那么其他人应该没有试着去自定义过ListView的背景了\N{\ren}so the other ones are probably not try to customize background of ListView
Dialogue: 0,0:37:29.16,0:37:30.80,ch,,0,0,0,,这里的原因很简单\N{\ren}the reason for that is simply
Dialogue: 0,0:37:30.80,0:37:34.16,ch,,0,0,0,,在于我们早期对ListView的一项优化\N{\ren}because of optimization that we've done very early in ListView
Dialogue: 0,0:37:34.16,0:37:36.16,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:37:36.18,0:37:41.28,ch,,0,0,0,,我们对于ListView出现的问题是在针对低端机时,如G1\N{\ren}the problem we have with ListView especially on lower devices like T-mobile G1
Dialogue: 0,0:37:41.28,0:37:43.60,ch,,0,0,0,,或者更低端的设备时\N{\ren}or even slower devices
Dialogue: 0,0:37:43.62,0:37:47.98,ch,,0,0,0,,当你开始滚动大量的数据项时,特别是在飞划的时候\N{\ren}is that when you scroll through a lot of items especially when you are flinging
Dialogue: 0,0:37:47.98,0:37:51.36,ch,,0,0,0,,你会看到每秒都有一打一打的表项在滚动\N{\ren}and you see that dozens and dozens of items go by every second
Dialogue: 0,0:37:51.36,0:37:53.68,ch,,0,0,0,,这样我们就会在屏幕上做很多blending操作\N{\ren}we do a lot of (blending) on screen
Dialogue: 0,0:37:53.68,0:37:55.88,ch,,0,0,0,,blending是一种开销很大的操作\N{\ren}blending is very expensive operation
Dialogue: 0,0:37:55.88,0:37:58.88,ch,,0,0,0,,因为列表的表项默认是透明的\N{\ren}that's because list items by default are transparent
Dialogue: 0,0:37:58.88,0:38:00.98,ch,,0,0,0,,为了避免blend的过多执行,我们\N{\ren}so to avoid that,what we do with that
Dialogue: 0,0:38:00.98,0:38:04.36,ch,,0,0,0,,我们试着搞清楚列表背后的颜色是什么\N{\ren}we trying to figure out what is the color behind the list
Dialogue: 0,0:38:04.36,0:38:07.74,ch,,0,0,0,,默认情况下,我们知道它是黑色的\N{\ren}and by default we know what that color is,it's some kind of black
Dialogue: 0,0:38:07.74,0:38:11.06,ch,,0,0,0,,因此,我们就把每个数据项转化成一个位图\N{\ren}so we turn every item into a bitmap
Dialogue: 0,0:38:11.06,0:38:14.94,ch,,0,0,0,,我们对此位图的背景以列表背后的背景色做填充\N{\ren}we fill that the background of that bitmap with the color that's behind the list
Dialogue: 0,0:38:14.94,0:38:18.66,ch,,0,0,0,,一旦我们这样做了,我们就知道所有表项都是不透明的了\N{\ren}so once we've done that,we know that the entirely is going to be opaque
Dialogue: 0,0:38:18.66,0:38:22.68,ch,,0,0,0,,我们就会对视图后面的窗口进行优化,减少其重绘次数\N{\ren}so we can do optimizations like not draw the window that's behind the list
Dialogue: 0,0:38:22.70,0:38:25.74,ch,,0,0,0,,从而在2D库中避免执行blending的代码路径\N{\ren}and avoid (blending code path) in our 2D library
Dialogue: 0,0:38:25.74,0:38:29.00,ch,,0,0,0,,因为那个代码路径比没有blending的代码路径要慢很多\N{\ren}which happen to be slower than the non blending code path
Dialogue: 0,0:38:30.28,0:38:32.46,ch,,0,0,0,,这种优化发生在\N{\ren}and that truly that optimization happens
Dialogue: 0,0:38:32.46,0:38:36.32,ch,,0,0,0,,每当你的手指触摸到屏幕时,每当你的手指跟屏幕交互时\N{\ren}as soon as you touch the screen,as soon as your finger comes into contact with the screen
Dialogue: 0,0:38:36.32,0:38:39.22,ch,,0,0,0,,这就会使得在屏幕上的所有表项变成位图\N{\ren}which (on)all the items on screen into bitmaps
Dialogue: 0,0:38:39.24,0:38:43.06,ch,,0,0,0,,对这个问题的解决方案是简单的,\N只需要设置cacheColorHint\N{\ren}so the solution to that issue is simply to specify the cacheColorHint
Dialogue: 0,0:38:43.06,0:38:46.76,ch,,0,0,0,,这个属性指示ListView的背景颜色\N{\ren}this is an indication for ListView about the background color
Dialogue: 0,0:38:46.76,0:38:50.52,ch,,0,0,0,,因此,如果你对其设置了颜色0,\N正如在Solution第一行中所见到的\N{\ren}so if you specify the color 0 like in the first line of the Solution here
Dialogue: 0,0:38:50.52,0:38:53.52,ch,,0,0,0,,你是在告诉ListView,我的背景不是纯色\N{\ren}you are telling ListView,"ok,i don't have (solid) background
Dialogue: 0,0:38:53.52,0:38:56.26,ch,,0,0,0,,我的背景可能是纹理,或者是一个很复杂的背景\N{\ren}i may have a texture or have a complex background like
Dialogue: 0,0:38:56.26,0:38:58.12,ch,,0,0,0,,请不要帮我过多的优化\N{\ren}please don't do any optimization"
Dialogue: 0,0:38:58.14,0:39:03.02,ch,,0,0,0,,这里我们就会执行慢一点的代码路径,\N我们就能够看到ListView的所有内容了\N{\ren}so then we were gonna to go through a slower code path,but that ListView will be able to see everything
Dialogue: 0,0:39:03.02,0:39:08.06,ch,,0,0,0,,如果你还记得我向你展示的第一张幻灯片的话,\N里面我写的那个App有一个木头纹理\N{\ren}and if you remember one of the first slides when i showed you this app i wrote that has a wooden texture
Dialogue: 0,0:39:08.06,0:39:10.72,ch,,0,0,0,,我就这样做了,我让colorHint失效了\N{\ren}this is what i've done,i disable the cacheColorHint
Dialogue: 0,0:39:10.72,0:39:14.38,ch,,0,0,0,,如果你的背景是一种纯色的话\N{\ren}now,if you have a background color,a solid background color
Dialogue: 0,0:39:14.42,0:39:18.64,ch,,0,0,0,,你知道你将要用到的颜色值,\N比方说你写的App需要一个绿色的背景\N{\ren}and you know,what is the background color for instance,so writing an application that's green in the background
Dialogue: 0,0:39:18.64,0:39:20.84,ch,,0,0,0,,你可以将这个颜色值赋给colorHint\N{\ren}you can simply specify that color
Dialogue: 0,0:39:20.84,0:39:25.32,ch,,0,0,0,,这样,你不但会得到优化,而且还能得到正确的结果\N{\ren}and then you will get the optimization of ListView and you are gonna the correct result
Dialogue: 0,0:39:27.72,0:39:29.82,ch,,0,0,0,,有多少人在之前来回滚动列表时\N{\ren}so how many of you have been fling through a list before
Dialogue: 0,0:39:29.82,0:39:33.56,ch,,0,0,0,,看到过滚动条根据屏幕的滚动而改变其大小\N{\ren}and seen that the scrollbar along the side of the screen change its size
Dialogue: 0,0:39:35.10,0:39:36.30,ch,,0,0,0,,呦,不少人看到过\N{\ren}yes,ok
Dialogue: 0,0:39:36.30,0:39:38.30,ch,,0,0,0,,我们还把这个叫做蛇\N{\ren}a bunch of you / this (??) equal the snake
Dialogue: 0,0:39:38.30,0:39:39.82,ch,,0,0,0,,是的,这叫蛇效应\N{\ren}right,the snake effect
Dialogue: 0,0:39:39.82,0:39:40.84,ch,,0,0,0,,那我来谈谈吧\N{\ren}so
Dialogue: 0,0:39:40.86,0:39:42.84,ch,,0,0,0,,这个效应的原因是\N{\ren}the reason why this happens is again
Dialogue: 0,0:39:42.88,0:39:45.58,ch,,0,0,0,,我们只画了我们在屏幕上所需要的视图\N{\ren}because we were only drawing as many views as we need on screen
Dialogue: 0,0:39:45.58,0:39:48.48,ch,,0,0,0,,当视图们有着很不一样的视图高度时\N{\ren}and when views have vastly different heights
Dialogue: 0,0:39:48.48,0:39:51.44,ch,,0,0,0,,测量出整个列表的高度,以至于我们可以\N{\ren}being able to measure that,such that we can estimate
Dialogue: 0,0:39:51.48,0:39:55.80,ch,,0,0,0,,估计出还有多少空间剩余来对滚动剩余适配器中的内容\N{\ren}how much more space is left to scroll through across the rest of the adapter
Dialogue: 0,0:39:55.80,0:39:57.80,ch,,0,0,0,,变成了一个很困难的问题\N{\ren}becomes a really difficult problem
Dialogue: 0,0:39:57.82,0:40:01.92,ch,,0,0,0,,我们不得不快速的得出一个大约值\N{\ren}it's the sort thing that we have to get some sort approximation fast
Dialogue: 0,0:40:01.92,0:40:05.14,ch,,0,0,0,,这就导致了最终滚动条的大小变化不正常\N{\ren}and that's why you end up seeing the scrollbar changing size
Dialogue: 0,0:40:05.18,0:40:06.44,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:40:07.14,0:40:12.18,ch,,0,0,0,,如果你对这种效果不满意,\N如果这点使你的App很混乱\N{\ren}if you don't like this effect,this is something that really sort of distract from you app
Dialogue: 0,0:40:12.18,0:40:16.60,ch,,0,0,0,,那么你可以在你的列表中把smoothScrollbar设置为false\N{\ren}then you can go ahead and set smoothScrollbar equals false on you list
Dialogue: 0,0:40:16.64,0:40:21.68,ch,,0,0,0,,这会告诉ListView,不要在乎对表项高度的测量开销\N{\ren}what this will do is it tells ListView don't even try to bother measuring heights of items
Dialogue: 0,0:40:21.68,0:40:24.84,ch,,0,0,0,,不要为了减少开销而返回一个对剩余滚动空间的估计值\N{\ren}to give an estimate of how much scroll space is left
Dialogue: 0,0:40:24.84,0:40:30.60,ch,,0,0,0,,而是要根据在屏幕上的表项来精确计算\N{\ren}instead just use your current position in terms of what items are on screen
Dialogue: 0,0:40:30.60,0:40:34.52,ch,,0,0,0,,这点当你有一个小型的数据集时会显得很难受\N{\ren}this will make a little bit chunky if you have a smaller datasets
Dialogue: 0,0:40:34.54,0:40:36.28,ch,,0,0,0,,但是对于很大的数据集的话\N{\ren}but across very large datasets
Dialogue: 0,0:40:36.32,0:40:40.68,ch,,0,0,0,,那就会使得列表中滚动条看起来真的很平滑了\N{\ren}this will really smooth (out) how the list looks in terms of scrollbars
Dialogue: 0,0:40:40.68,0:40:44.02,ch,,0,0,0,,另一种解决方案是,干脆不用滚动条\N{\ren}another solution is also to just remove the scrollbar
Dialogue: 0,0:40:45.40,0:40:48.12,ch,,0,0,0,,好的,到我了,我看到过很多人这么做\N{\ren}ok,so this is something i've seen (way too) many times
Dialogue: 0,0:40:48.12,0:40:51.46,ch,,0,0,0,,每次我看到有人这么做时,我就会在屏幕前抓狂\N{\ren}and every time (i) see it,i start swearing in front of my screen
Dialogue: 0,0:40:51.46,0:40:53.78,ch,,0,0,0,,然后joe就恨我了,因为他坐在我旁边\N{\ren}then (joe hates me ) may be cause he sits next to me
Dialogue: 0,0:40:53.82,0:40:54.52,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:40:54.52,0:40:55.68,ch,,0,0,0,,这是当\N{\ren}this is when
Dialogue: 0,0:40:55.68,0:40:59.62,ch,,0,0,0,,你在XML中把ListView的高度设置成wrap_content时\N{\ren}you set the layout height of a view in XML to wrap_content
Dialogue: 0,0:40:59.64,0:41:00.98,ch,,0,0,0,,那么,有人这么做过么\N{\ren}so,have you ever done that
Dialogue: 0,0:41:00.98,0:41:04.40,ch,,0,0,0,,这没关系了,只是举个手嘛\N{\ren}that's ok,won't be (might) that's you like,just raise your hands
Dialogue: 0,0:41:04.44,0:41:05.92,ch,,0,0,0,,好好好\N{\ren}ok
Dialogue: 0,0:41:05.92,0:41:08.00,ch,,0,0,0,,我喜欢看人们承认自己的错误\N{\ren}i like people admit their errors
Dialogue: 0,0:41:08.00,0:41:11.70,ch,,0,0,0,,这里用warp_content的问题在于ListView是列表的抽象\N{\ren}the problem with wrap_content is that ListView is visualize
Dialogue: 0,0:41:11.70,0:41:15.32,ch,,0,0,0,,ListView可以有两个数据项,也可有上百万个数据项\N{\ren}so ListView can have two items,but it can have millions of items
Dialogue: 0,0:41:15.32,0:41:17.22,ch,,0,0,0,,因此,当你为其设置wrap_content时\N{\ren}so when you tell us wrap_content
Dialogue: 0,0:41:17.22,0:41:20.90,ch,,0,0,0,,那是在说,我想让ListView跟它包含的内容一样大\N{\ren}it means,"ok,i want ListView to be as big as its content"
Dialogue: 0,0:41:20.90,0:41:24.42,ch,,0,0,0,,那么我们这边要不要把百万个表项的高度都测量一下\N{\ren}should we go through the million items and measure them
Dialogue: 0,0:41:24.42,0:41:26.42,ch,,0,0,0,,这样做可能不是一个好主意\N{\ren}that would probably not be a very good idea
Dialogue: 0,0:41:26.42,0:41:27.38,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:41:27.38,0:41:30.80,ch,,0,0,0,,但是因为很多人有个需求,或者很多人尝试去那么做\N{\ren}and because so many people are requesting that (or are) trying to do it
Dialogue: 0,0:41:30.80,0:41:33.36,ch,,0,0,0,,那么我们是使其起作用呢还是不让它起作用\N{\ren}we made it work without making it work
Dialogue: 0,0:41:33.36,0:41:36.28,ch,,0,0,0,,因此,如果你把ListView的高度设置成wrap_content的话\N{\ren}so if you set the height of your ListView to wrap_content
Dialogue: 0,0:41:36.28,0:41:39.38,ch,,0,0,0,,我们会测量出你的列表中前三个表项\N{\ren}we gonna measure the first 3 items of your list
Dialogue: 0,0:41:39.38,0:41:42.14,ch,,0,0,0,,这导致很多人对这种行为感到困惑\N{\ren}and actually a lot of people are confused by the behavior
Dialogue: 0,0:41:42.14,0:41:44.42,ch,,0,0,0,,因为有时我在群组上会看到一些消息\N{\ren}because something times i see message on our groups
Dialogue: 0,0:41:44.42,0:41:48.84,ch,,0,0,0,,当我把log语句放到getView方法中时\N{\ren}saying,"hi,when i put (log) statements in the getView method
Dialogue: 0,0:41:48.84,0:41:54.46,ch,,0,0,0,,我会看到ListView请求表项0,1,2然后0,1,2,3,4,5等等\N{\ren}i see that ListView is requesting items number 0,1,2 and then 0,1,2,3,4,5 again
Dialogue: 0,0:41:54.46,0:41:57.12,ch,,0,0,0,,它们不懂这是什么原因,那么原因就是我刚刚说的\N{\ren}and don't get...they don't (why)..that's the reason
Dialogue: 0,0:41:57.14,0:41:57.90,ch,,0,0,0,,因为\N{\ren}because
Dialogue: 0,0:41:57.90,0:42:01.56,ch,,0,0,0,,在布局的过程中,我们会要求适配器前三个表项\N{\ren}during the layout,we were gonna ask the adapter for the first three items
Dialogue: 0,0:42:01.56,0:42:03.84,ch,,0,0,0,,我们会测量它们,然后把它们放进回收器\N{\ren}we gonna measure them,put them in the recycler
Dialogue: 0,0:42:03.84,0:42:07.18,ch,,0,0,0,,然后,我们才会进入调用真实表项的过程\N{\ren}then we will (we need the real items)we are gonna ask these items again
Dialogue: 0,0:42:07.18,0:42:08.46,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:42:08.46,0:42:09.66,ch,,0,0,0,,这种做法也是花销很大的\N{\ren}it is expensive
Dialogue: 0,0:42:09.66,0:42:12.26,ch,,0,0,0,,尤其是,如果你在列表中有很复杂的表项时\N{\ren}especially if you have very complex items in you ListView
Dialogue: 0,0:42:12.26,0:42:15.38,ch,,0,0,0,,如果你变态的话,你可以把webView放到你的ListView中\N{\ren}if you are crazy,you put webView inside your list,then
Dialogue: 0,0:42:15.38,0:42:18.14,ch,,0,0,0,,这会导致ListView花费更多时间来侧脸自身\N{\ren}it's gonna take a lot of time for the ListView to measure itself
Dialogue: 0,0:42:18.14,0:42:20.96,ch,,0,0,0,,大说数时间,这并不是你想要的结果\N{\ren}and most of the time,that's really not what you want
Dialogue: 0,0:42:20.96,0:42:23.20,ch,,0,0,0,,因此,你要学着避免这么做\N{\ren}so just avoid it
Dialogue: 0,0:42:23.20,0:42:25.94,ch,,0,0,0,,要么你对ListView的height设置成fill_parent\N{\ren}either you fill_parent as the height of your the ListView
Dialogue: 0,0:42:25.94,0:42:28.58,ch,,0,0,0,,要么如果其在线性布局中时,你可以把其高度设置为0\N{\ren}or if you're in the LinearLayout,you can set the height to 0
Dialogue: 0,0:42:28.58,0:42:33.02,ch,,0,0,0,,然后利用layout_weight来告诉列表共享\N{\ren}and you can use the layout_weight to tell the list to share
Dialogue: 0,0:42:33.02,0:42:34.72,ch,,0,0,0,,布局中剩余的空间\N{\ren}remaining available space
Dialogue: 0,0:42:34.72,0:42:37.26,ch,,0,0,0,,再有就是你可以把你的ListView的高度设置成固定值\N{\ren}and you can also set the height of your ListView to a fixed amounts
Dialogue: 0,0:42:37.26,0:42:41.20,ch,,0,0,0,,比方说200dip,这在G1中就是200像素高\N{\ren}like you can set 200dip (?? to) 200 pixels on the G1
Dialogue: 0,0:42:44.50,0:42:46.64,ch,,0,0,0,,那么,有多少人想这么干过\N{\ren}so how many people have wanted to do this before
Dialogue: 0,0:42:46.64,0:42:48.64,ch,,0,0,0,,在ScrollView中放置一个ListView\N{\ren}a ListView inside of a ScrollView
Dialogue: 0,0:42:48.64,0:42:51.54,ch,,0,0,0,,同志们,举起手来\N{\ren}once again,don't be shy,come on,hands up
Dialogue: 0,0:42:51.56,0:42:52.66,ch,,0,0,0,,\N{\ren}ok
Dialogue: 0,0:42:52.66,0:42:54.66,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:42:54.66,0:42:56.66,ch,,0,0,0,,这样干会出什么事儿呢\N{\ren}what happens here
Dialogue: 0,0:42:56.66,0:43:00.20,ch,,0,0,0,,如果ScrollView会滚动,ListView也会滚动\N{\ren}ScrollView scrolls,ListView scrolls
Dialogue: 0,0:43:00.20,0:43:02.42,ch,,0,0,0,,那么哪一个应该滚动当你手指开始移动的时候\N{\ren}which one should scroll when you start moving
Dialogue: 0,0:43:02.42,0:43:06.18,ch,,0,0,0,,实际上,在这个会谈的之前的周末,我们就被问到过一个问题\N{\ren}we actually get moderator question for this over the weekend for the session already
Dialogue: 0,0:43:06.18,0:43:11.58,ch,,0,0,0,,问我们是否可以对ListView添加一个元素或者一个属性\N{\ren}asking if we could add an element,an attribute rather to ListView to say
Dialogue: 0,0:43:11.60,0:43:15.20,ch,,0,0,0,,用于关闭自己的滚动能力\N{\ren}you know,can i make my ListView scrollable equals false
Dialogue: 0,0:43:15.20,0:43:18.60,ch,,0,0,0,,这样就可以将其放在ScrollView中,\N然后让ScrollView来进行滚动了\N{\ren}so that i can put it inside the ScrollView and just let the ScrollView take care of it
Dialogue: 0,0:43:18.60,0:43:20.60,ch,,0,0,0,,快速的答案是这可不成\N{\ren}well,the quick answer to that is nope.
Dialogue: 0,0:43:20.60,0:43:23.36,ch,,0,0,0,,原因是\N{\ren}and the reason for that is that
Dialogue: 0,0:43:23.36,0:43:28.74,ch,,0,0,0,,ListView中可能会有成千山万的表项\N{\ren}once again,a ListView can have tons of thousands possibly even millions of items inside of it
Dialogue: 0,0:43:28.76,0:43:29.76,ch,,0,0,0,,那么\N{\ren}and
Dialogue: 0,0:43:29.76,0:43:34.44,ch,,0,0,0,,正确的答案是,在这种情况下,不可能把这么多的视图\N{\ren}the correct answer in that case is almost never to open up that many views
Dialogue: 0,0:43:34.44,0:43:39.36,ch,,0,0,0,,都打开然后填充到ScrollView中,这样会使得系统\N{\ren}throw them all into a ScrollView and just sort of let the system
Dialogue: 0,0:43:39.38,0:43:42.22,ch,,0,0,0,,死掉,使系统缓慢直至崩溃\N{\ren}die,trying to (chug) long processing all of that
Dialogue: 0,0:43:42.22,0:43:44.22,ch,,0,0,0,,\N{\ren}so
Dialogue: 0,0:43:44.24,0:43:48.72,ch,,0,0,0,,通常,这个问题是很多工程师要问的\N{\ren}generally,this is where,you know,any engineer asks the question
Dialogue: 0,0:43:48.72,0:43:50.72,ch,,0,0,0,,好吧,那么你到底想干什么\N{\ren}"ok,what is you're trying to do"
Dialogue: 0,0:43:50.72,0:43:56.24,ch,,0,0,0,,通常,这里的回答是,我想让我的列表中\N有一些特别的东西,位于列表之上或者之下\N{\ren}and generally the answer to that is well i wanna have something special either above or below my list
Dialogue: 0,0:43:56.24,0:43:59.44,ch,,0,0,0,,同时我还想只把我的列表内容放到ListView中\N{\ren}but i wanna have mostly just my list content (through) this view
Dialogue: 0,0:43:59.44,0:44:00.26,ch,,0,0,0,,那么\N{\ren}so
Dialogue: 0,0:44:00.26,0:44:06.14,ch,,0,0,0,,如果是那样的话,我们会建议你采用\NListView中头部和尾部的特性\N{\ren}for that,we will really like to point you towards the existing header  and footer features that already exist
Dialogue: 0,0:44:06.14,0:44:11.10,ch,,0,0,0,,如果你有一个布局,你想将其放在列表的上面或者下面\N同时还想让真个布局可以滚动\N{\ren}if you have a layout you wanna put above or below a list still have the entire thing scroll
Dialogue: 0,0:44:11.10,0:44:14.32,ch,,0,0,0,,那你就可以把这个列表外的布局设置成头部或者尾部\N{\ren}you can go ahead and set that as a list header or footer
Dialogue: 0,0:44:14.32,0:44:17.84,ch,,0,0,0,,顺便提一下,当我们告诉你\N不能把ListView放到ScrollView时\N{\ren}by the way,when we tell you to not put ListView inside of ScrollView
Dialogue: 0,0:44:17.84,0:44:21.52,ch,,0,0,0,,你也不能把ScrollView放到ListView中去\N{\ren}don't put ScrollView inside of ListView.that's equal(??) / yeah  that's true
Dialogue: 0,0:44:26.58,0:44:30.04,ch,,0,0,0,,正如我们在这次会谈开始的时候提到过\N{\ren}yeah,so we mention that before in the talk of the beginning
Dialogue: 0,0:44:30.04,0:44:31.98,ch,,0,0,0,,不过我还想再重复强调一下\N{\ren}but we really want to insist on that point
Dialogue: 0,0:44:31.98,0:44:35.90,ch,,0,0,0,,千万不能尝试着把视图缓存到你的适配器中,\N我曾经见过很多人这么干\N{\ren}like do not try to cache views inside your adapter,i've seen that done too (way) too many times
Dialogue: 0,0:44:35.90,0:44:39.52,ch,,0,0,0,,人们这么干的原因有很多\N{\ren}there are various reasons why people try to do it
Dialogue: 0,0:44:39.52,0:44:40.52,ch,,0,0,0,,\N{\ren}and
Dialogue: 0,0:44:40.52,0:44:43.10,ch,,0,0,0,,问题在于,这可能起效\N{\ren}the problem is that it might work
Dialogue: 0,0:44:43.10,0:44:44.60,ch,,0,0,0,,大多数情况下,你的列表可以正常工作\N{\ren}most of the time,your list might work
Dialogue: 0,0:44:44.60,0:44:47.68,ch,,0,0,0,,之后,突然间,你的列表中会发生很诡异的事情\N{\ren}and then suddenly some (..?) something really weird is going to start happening
Dialogue: 0,0:44:47.68,0:44:49.70,ch,,0,0,0,,比方说,你可能会失去对表项的点击能力\N{\ren}like may be you won't be able to click the item
Dialogue: 0,0:44:49.70,0:44:53.30,ch,,0,0,0,,还有可能你的表项的动画不工作了\N{\ren}may be you have animation of the item that doesn't work anymore
Dialogue: 0,0:44:53.30,0:44:56.46,ch,,0,0,0,,这里的原因在于,ListView内部有很多种优化\N{\ren}the reason for that is that again,ListView has many optimizations
Dialogue: 0,0:44:56.46,0:44:58.46,ch,,0,0,0,,它有一个很复杂的回收器\N{\ren}it has a very complex recycler
Dialogue: 0,0:44:58.48,0:45:03.22,ch,,0,0,0,,它对屏幕上出现的视图的所有权做了很多的假设\N{\ren}it makes a lot of assumptions about the ownership of the views that on screen
Dialogue: 0,0:45:03.22,0:45:07.72,ch,,0,0,0,,为了让列表滚动的更快,ListView会把\N某些视图存到其自身的回收器中\N{\ren}and to make things even faster when ListView puts something in their recycler
Dialogue: 0,0:45:07.72,0:45:10.14,ch,,0,0,0,,那些已经不在屏幕上的视图\N{\ren}that view is not (really) on screen.Like the view
Dialogue: 0,0:45:10.14,0:45:14.54,ch,,0,0,0,,其自身认为自己多少还应该在屏幕上,\N但是ListView却不这么认为了\N{\ren}still think that is kind of on screen but the ListView knows that it's not really the case
Dialogue: 0,0:45:14.54,0:45:17.76,ch,,0,0,0,,所以,我们对ListView的优化做了很细很细的工作\N{\ren}so we handle that very very carefully
Dialogue: 0,0:45:17.76,0:45:19.76,ch,,0,0,0,,基于性能的原因\N{\ren}and again for performance reasons
Dialogue: 0,0:45:19.76,0:45:24.76,ch,,0,0,0,,每当你尝试着在你的适配器中尝试对\N离开屏幕的其他视图做操作时\N{\ren}and as soon as you try to play tricks in your adapter
Dialogue: 0,0:45:24.76,0:45:27.70,ch,,0,0,0,,你想操作的视图,在我们看来就是僵尸视图了\N{\ren}we were gonna end up with views that are basically zombie views
Dialogue: 0,0:45:27.70,0:45:32.90,ch,,0,0,0,,例如,如果你在getView方法中返回的视图\N同样存在于我们的回收器中\N{\ren}for instance,if from the getView return a view that we also have in our recycler
Dialogue: 0,0:45:32.90,0:45:37.16,ch,,0,0,0,,我们就会得到一个本来应该在屏幕上显示视图,\N但却不会被显示的视图\N{\ren}we will gonna have a view that's supposed to be on screen,but at the same time that's not on screen
Dialogue: 0,0:45:37.16,0:45:41.24,ch,,0,0,0,,这样干的话,framework之好耸耸肩说,你玩吧\N{\ren}so then the framework just gives us and say,"hi whatever like
Dialogue: 0,0:45:41.24,0:45:42.20,ch,,0,0,0,,我不玩了\N{\ren}i give up"
Dialogue: 0,0:45:42.20,0:45:46.06,ch,,0,0,0,,那么,千万不要假设离开屏幕的视图还能用\N{\ren}so just never ever ever ever ever ever do that
Dialogue: 0,0:45:46.06,0:45:49.18,ch,,0,0,0,,如果你想直接获取某个视图\N{\ren}if you need to access view directly
Dialogue: 0,0:45:49.20,0:45:52.90,ch,,0,0,0,,我们有一个方法叫做getFirstVisiblePosition()\N{\ren}we have a method called getFirstVisiblePosition
Dialogue: 0,0:45:52.90,0:45:59.30,ch,,0,0,0,,这个方法告诉你在你的适配器中,\N当前在屏幕上可见的第一个视图的位置\N{\ren}it tells you what is the position in your adapter of the first view that's visible on screen
Dialogue: 0,0:45:59.30,0:46:03.18,ch,,0,0,0,,通过运用这个方法getChildCount\N{\ren}so by using this method and getChildCount
Dialogue: 0,0:46:03.18,0:46:05.34,ch,,0,0,0,,这个方法会告诉你在屏幕上有多少个表项是可见的\N{\ren}that tells you how many items are visible on screen
Dialogue: 0,0:46:05.34,0:46:09.22,ch,,0,0,0,,你可以通过position来获取id\N{\ren}you can easily go back and forth between the index and position
Dialogue: 0,0:46:09.22,0:46:13.96,ch,,0,0,0,,如果基于某些原因,你想要改变\N屏幕上某个视图的颜色的话\N{\ren}so if you want to for some reason,like change the color of view on screen
Dialogue: 0,0:46:13.96,0:46:16.10,ch,,0,0,0,,同时,你不想调用notifyDatasetChanged的话\N{\ren}without doing it notifyDatasetChanged
Dialogue: 0,0:46:16.10,0:46:20.76,ch,,0,0,0,,那么你就用getChildAt这个方法来获取到你需要的视图\N{\ren}just use getChildAt of ListView to get the view that's you need
Dialogue: 0,0:46:23.36,0:46:24.50,ch,,0,0,0,,最后\N{\ren}so finally
Dialogue: 0,0:46:25.50,0:46:29.46,ch,,0,0,0,,最后,听了这么多,我认为我们对ListView的使用都清楚了\N{\ren}after all of this,i'm sure that we've sort of hammered home the point
Dialogue: 0,0:46:29.46,0:46:31.76,ch,,0,0,0,,ListView一个很复杂的控件\N{\ren}ListViews are really complex widget
Dialogue: 0,0:46:31.76,0:46:35.82,ch,,0,0,0,,它可能是最复杂的控件在整个android的框架中\N{\ren}it's probably the most complex one we have across the entire Android framework
Dialogue: 0,0:46:35.84,0:46:37.64,ch,,0,0,0,,我们团队花了很多时间在那儿\N{\ren}we spend a lot time in there
Dialogue: 0,0:46:37.64,0:46:42.62,ch,,0,0,0,,不光为了帮助开发者,还为了使其优化程度达到最高\N{\ren}just not only helping developers but just making sure that everything stays working fast optimized
Dialogue: 0,0:46:42.62,0:46:46.84,ch,,0,0,0,,它是为重复的,非绑定的数据进行优化的\N{\ren}and really,it's optimized for repeating unbound data
Dialogue: 0,0:46:47.90,0:46:49.94,ch,,0,0,0,,它对你的应用增加了不少复杂性\N{\ren}it adds a lot complexities to your app
Dialogue: 0,0:46:49.94,0:46:52.72,ch,,0,0,0,,因此,如果你的数据量不多\N{\ren}so if you have a small amount of data
Dialogue: 0,0:46:52.72,0:46:56.40,ch,,0,0,0,,你仅仅只是想要重复的展示相似的表项\N{\ren}that you just wanna have some sort of repeating presentation for
Dialogue: 0,0:46:56.40,0:46:58.82,ch,,0,0,0,,那么你可能不一定非用ListView不可\N{\ren}maybe you don't actually need a ListView for it at all
Dialogue: 0,0:46:58.82,0:47:03.80,ch,,0,0,0,,可能你所要做的仅仅是动态的生成一些视图\N{\ren}maybe all you need in this case is to dynamically generate some views
Dialogue: 0,0:47:03.80,0:47:07.20,ch,,0,0,0,,将其放入到一个垂直方向的线性布局中\N{\ren}put them inside a LinearLayout with a vertical orientation
Dialogue: 0,0:47:07.20,0:47:09.48,ch,,0,0,0,,然后再将这个线性布局放到ScrollView中\N{\ren}and put that layout inside of a ScrollView
Dialogue: 0,0:47:09.48,0:47:12.10,ch,,0,0,0,,这样就会让你的应用变得非常的简单\N{\ren}and this going to make your app a lot simpler
Dialogue: 0,0:47:12.10,0:47:15.66,ch,,0,0,0,,适用于当你的数据集很小时,已经其中有很多特殊项时\N{\ren}if you have a small dataset with a bunch of special cases inside it
Dialogue: 0,0:47:15.66,0:47:21.96,ch,,0,0,0,,这就省去了你大力改造ListView\N来满足你的应用需求的功夫\N{\ren}rather than trying to sort of bend ListView into whatever application you have for it
Dialogue: 0,0:47:22.62,0:47:24.48,ch,,0,0,0,,今天我们已经谈了不少内容了\N{\ren}and that's pretty much (we've talked) today
Dialogue: 0,0:47:24.48,0:47:27.80,ch,,0,0,0,,我们还可以继续去讨论ListView的其他特性,\N因为ListView中还有许多特性我们没谈到\N{\ren}we could go on for hours about ListView cause there are many features  we haven't talked about
Dialogue: 0,0:47:27.80,0:47:30.12,ch,,0,0,0,,还有很多知识你需要了解\N{\ren}there are many kind of set that you should know about
Dialogue: 0,0:47:30.12,0:47:32.94,ch,,0,0,0,,不过现在,我相信大家都对ListView感到厌烦了\N{\ren}but i'm sure by now,you all pretty bored about ListView
Dialogue: 0,0:47:32.94,0:47:37.54,ch,,0,0,0,,因此,我们要进入问答环节了,如果你要问问题的话,\N请到麦克风前\N{\ren}so we gonna start taking questions if you want to ask us questions,you can go to the microphones in the alleys
Dialogue: 0,0:47:37.56,0:47:40.88,ch,,0,0,0,,我们还会抽取一些网上的问题\N{\ren}and we also have questions may be on (moderator)
Dialogue: 0,0:47:40.88,0:47:42.88,ch,,0,0,0,,我们要把这个投影仪放下么\N{\ren}do we want to bring that up?
Dialogue: 0,0:47:43.80,0:47:44.50,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:47:46.32,0:47:48.38,ch,,0,0,0,,不要害羞,随便问\N{\ren}don't be shy,you can come ask questions
Dialogue: 0,0:47:49.30,0:47:51.30,ch,,0,0,0,,我们就在这儿.你可以问你想知道的任何问题\N{\ren}we are right here,you can ask us about anything you want
Dialogue: 0,0:47:51.98,0:47:53.04,ch,,0,0,0,,但是只能是关于android\N{\ren}that's really to Android
Dialogue: 0,0:47:58.92,0:47:59.52,ch,,0,0,0,,\N{\ren}hi
Dialogue: 0,0:47:59.88,0:48:03.28,ch,,0,0,0,,你刚谈到不能将ListView放到ScrollView中\N{\ren}you said not put ListView in ScrollViews
Dialogue: 0,0:48:03.28,0:48:08.02,ch,,0,0,0,,刚刚的假设是ScrollView是垂直滚动的\N{\ren}but the assumption behind that was the ScrollView be vertically scrolling
Dialogue: 0,0:48:08.02,0:48:11.86,ch,,0,0,0,,如果我们想要模拟Palm的Pre's pager\N{\ren}if we wanna emulate something like the Palm Pre's pager
Dialogue: 0,0:48:11.90,0:48:14.96,ch,,0,0,0,,其中包含着水平的换页和垂直的滚动\N{\ren}where we have vertically scrolling in the horizontal paging
Dialogue: 0,0:48:15.00,0:48:19.28,ch,,0,0,0,,我在论坛上或者其他地方看到有人在尝试\N{\ren}i have seen on forums and stuff,some people trying to do that
Dialogue: 0,0:48:19.30,0:48:22.08,ch,,0,0,0,,这点在Google的运动程序中也做到了\N{\ren}that's also good done with like Google sports application
Dialogue: 0,0:48:22.08,0:48:27.22,ch,,0,0,0,,但是那款我知道的应用,目前并不是开源的\N{\ren}but there's been that particular app as far as i can tell so forth closed source
Dialogue: 0,0:48:27.22,0:48:28.58,ch,,0,0,0,,但是我想要知道怎么做\N{\ren}but we'd like to do know how to do that
Dialogue: 0,0:48:28.58,0:48:32.32,ch,,0,0,0,,基本上,你有一个垂直滚动的ListView,其次\N{\ren}so basically,so you have vertically list scrolling in ListView
Dialogue: 0,0:48:32.32,0:48:34.82,ch,,0,0,0,,你还想要水平的翻页\N{\ren}and you want  to go from page to page horizontally on your right
Dialogue: 0,0:48:34.84,0:48:37.46,ch,,0,0,0,,是,各个ListView中包含相似的不同内容\N{\ren}yeah,many ListViews have similar different content / yeah
Dialogue: 0,0:48:37.46,0:48:40.20,ch,,0,0,0,,你的想法很有趣.你可以用一个水平的ScrollView\N{\ren}so,that is fun.like you can use a horizontal ScrollView
Dialogue: 0,0:48:40.20,0:48:44.24,ch,,0,0,0,,这里重点是,你滚动的两个方向不在同一个坐标轴上\N{\ren}what matters the two scroll that you have are not in the same axes
Dialogue: 0,0:48:44.24,0:48:48.14,ch,,0,0,0,,比方说,我们的home桌面,就有一个分页器,\N我们可以在里面放\N{\ren}yeah./ the home screen for instance has a pager,and we could puts
Dialogue: 0,0:48:48.16,0:48:50.28,ch,,0,0,0,,当你打开一个文件的话,这就是一个列表了\N{\ren}when you open the folder on home,it's a list
Dialogue: 0,0:48:50.28,0:48:53.88,ch,,0,0,0,,这里面你可以水平的翻页,也可以滚动列表\N{\ren}and you can still page horizontally and scroll that list
Dialogue: 0,0:48:53.88,0:48:57.04,ch,,0,0,0,,你可以查看启动器的源码\N{\ren}you can look at the source code of the launcher application
Dialogue: 0,0:48:57.04,0:49:00.90,ch,,0,0,0,,这个文件叫workspace.java\N{\ren}it's called workspace.java
Dialogue: 0,0:49:00.90,0:49:04.68,ch,,0,0,0,,我记得我们还有一些其他的应用也有这个特性\N{\ren}and i think we have that in other applications somewhere else
Dialogue: 0,0:49:04.68,0:49:09.64,ch,,0,0,0,,不过,就看workspace.java的源码就行了,\N你会发现很容易实现\N{\ren}but,look at the workspace.java in the launcher source code,and you will see it's pretty easy to do
Dialogue: 0,0:49:09.66,0:49:11.90,ch,,0,0,0,,好的/我们有过一些讨论\N{\ren}sure./ and we had a number of discussion about
Dialogue: 0,0:49:11.90,0:49:16.48,ch,,0,0,0,,是否给framework加入一种可以提供水平翻页的控件\N{\ren}specifically adding a widget capable of doing this sort of horizontal paging into the framework
Dialogue: 0,0:49:16.50,0:49:19.72,ch,,0,0,0,,目前我们还没有确定最好的做法\N{\ren}and so far we haven't decide on the best way to do it
Dialogue: 0,0:49:19.72,0:49:24.98,ch,,0,0,0,,目前只是把它放在那儿,以确保人们可以充分利用\N{\ren}just in terms of getting it out here,making sure the people are able to make good use of it
Dialogue: 0,0:49:24.98,0:49:26.50,ch,,0,0,0,,谢谢\N{\ren}thanks
Dialogue: 0,0:49:26.52,0:49:31.36,ch,,0,0,0,,我在我的应用,有一个视图\N{\ren}so,i have a view in may app that is
Dialogue: 0,0:49:31.36,0:49:33.78,ch,,0,0,0,,我这个想法是从Google市场的应用中得到激发的\N{\ren}i tried to have been inspired written from the market (app)
Dialogue: 0,0:49:33.78,0:49:39.08,ch,,0,0,0,,对每个独立的应用,它有一些头部,\N还有一些小列表在ListView中\N{\ren}the way the for an individual app,it has some headers and some little list inside lists
Dialogue: 0,0:49:39.08,0:49:40.92,ch,,0,0,0,,我觉得这种效果非常棒\N{\ren}i thought it was really great
Dialogue: 0,0:49:40.92,0:49:43.52,ch,,0,0,0,,我自己实现的过程中\N{\ren}and implementing that myself
Dialogue: 0,0:49:43.52,0:49:47.32,ch,,0,0,0,,我感到很无奈,没有看android源码的情况下\N{\ren}without like looking at how the market source code did was really tricky and
Dialogue: 0,0:49:47.32,0:49:51.72,ch,,0,0,0,,对我而言把线性布局放到\NScrollView中复杂度是似乎有点高啊\N{\ren}it's a little too complicate for me to wanna do the sort LinearLayout in ScrollView
Dialogue: 0,0:49:51.72,0:49:54.02,ch,,0,0,0,,这感觉像是一个ListView\N{\ren}feels like a ListView but
Dialogue: 0,0:49:54.02,0:49:56.92,ch,,0,0,0,,为了做到市场应用的效果\N{\ren}in order to do that,i mean
Dialogue: 0,0:49:56.92,0:49:59.22,ch,,0,0,0,,我最终写了很多的java代码\N{\ren}i end up having to do a lot java of code like
Dialogue: 0,0:49:59.24,0:50:02.42,ch,,0,0,0,,而且不是用一个大的XML文件\N{\ren}instead of one large xml file
Dialogue: 0,0:50:02.46,0:50:05.32,ch,,0,0,0,,而是用很多小的XML文件,\N然后在java中将这些文件给绑定在一起\N{\ren}it's a lot of small ones that get bound together through java work
Dialogue: 0,0:50:05.32,0:50:12.56,ch,,0,0,0,,我最终用了一个Merge适配器,这是Mark Murphy做的,\N这个适配器帮了我不少忙\N{\ren}i am end up using a merge adapter sort of general thing that (Mark Murphy)made was really helpful for that purpose
Dialogue: 0,0:50:12.56,0:50:17.56,ch,,0,0,0,,我就是觉得用了这么多不同的适配器,这好像有点过头了\N{\ren}it's just (unifying) a lot of different adapters together,it's just feels like overkill
Dialogue: 0,0:50:17.56,0:50:19.26,ch,,0,0,0,,是我没注意到某些东西么.请问你有实现的思路么\N{\ren}is there..am i missing something?and how to do that?
Dialogue: 0,0:50:19.26,0:50:20.84,ch,,0,0,0,,你做的并没有失误.我们几乎也是这么做的\N{\ren}no,that's pretty (much) what we to do it
Dialogue: 0,0:50:20.88,0:50:25.36,ch,,0,0,0,,这里的主要问题是,\NListView被设计为大量数据的列表展示\N{\ren}the big problem again we said ListView was most designed to we have long list of data
Dialogue: 0,0:50:25.36,0:50:27.40,ch,,0,0,0,,每个表项都是一样的\N{\ren}and every item is pretty much the same
Dialogue: 0,0:50:27.40,0:50:30.60,ch,,0,0,0,,我们的确也提供很多不同的表项,正如你刚说的\N{\ren}we do support very different items like you mentioned
Dialogue: 0,0:50:30.60,0:50:34.10,ch,,0,0,0,,但是,当你想要这么做的话,你需要自己干一些事情\N{\ren}but,yeah,when you wanna to do (unfortunately),you have some work to do
Dialogue: 0,0:50:34.10,0:50:36.84,ch,,0,0,0,,是的,那么merge适配器本身是一个非平凡的视图\N{\ren}right.and merge adapter itself is really nontrivial view
Dialogue: 0,0:50:36.86,0:50:41.00,ch,,0,0,0,,它会记录每个表项的位置,并且\N{\ren}in how it has to track what the position number of every item
Dialogue: 0,0:50:41.00,0:50:44.20,ch,,0,0,0,,当我需要的时候,传递给我正确的表项.\N这点对我来讲,我是不论如何都不想做的\N{\ren}and show the right i wanted,it just something i would never wanna do myself
Dialogue: 0,0:50:44.22,0:50:46.16,ch,,0,0,0,,但是我猜这情况就是那么个情况\N{\ren}but i guess just the way it is
Dialogue: 0,0:50:46.18,0:50:46.62,ch,,0,0,0,,\N{\ren}yeah
Dialogue: 0,0:50:46.62,0:50:47.52,ch,,0,0,0,,\N{\ren}ok
Dialogue: 0,0:50:47.54,0:50:52.52,ch,,0,0,0,,如果你有好的建议的话,我确定存在某种解决办法,\N但暂时还没有想到\N{\ren}sorry.but again,if you have suggestions like,i am sure there are solutions that we (haven't) thought of like
Dialogue: 0,0:50:52.52,0:50:55.12,ch,,0,0,0,,请与我们联系,或者给我发送bug文件\N{\ren}contact us and we can or (file) bugs
Dialogue: 0,0:50:55.12,0:50:56.56,ch,,0,0,0,,我们真的会去看的\N{\ren}we do look at them
Dialogue: 0,0:50:56.56,0:51:00.36,ch,,0,0,0,,这样我们就知道在未来的发布中做什么了\N{\ren}and we will see what we can do in the future release
Dialogue: 0,0:51:00.36,0:51:01.32,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:51:01.32,0:51:06.32,ch,,0,0,0,,我们接下来要看一个线上的问题.\N一位来自中国叫Larry的开发者问到\N{\ren}i am gonna take one of the (Google  wave?)questions so someone Larry from China ask us
Dialogue: 0,0:51:06.34,0:51:10.70,ch,,0,0,0,,长按列表项才能获取更多的操作选项\N对普通用户来讲是非常古怪的\N{\ren}long click to get more actions for an item is very weird for a normal user
Dialogue: 0,0:51:10.70,0:51:14.30,ch,,0,0,0,,我们是否可以有种跟联系人动作菜单类似的控件\N{\ren}can we have similar UI widget like contacts action menu
Dialogue: 0,0:51:14.30,0:51:16.50,ch,,0,0,0,,就像Twitter自己开发的那样\N{\ren}just like Twitter developed by themselves
Dialogue: 0,0:51:16.50,0:51:22.44,ch,,0,0,0,,那么我觉得他是指在android2.0中当你点击联系人的时\N那种弹出式菜单\N{\ren}so i think he is referring to that (little) pop up when you click on the contact in the address book since Android 2.0
Dialogue: 0,0:51:22.44,0:51:25.64,ch,,0,0,0,,我们的答案是,我们有你要的东西\N{\ren}and the answer to that is "yes,sure"
Dialogue: 0,0:51:25.68,0:51:26.94,ch,,0,0,0,,你可以有个这样的控件\N{\ren}you can have one
Dialogue: 0,0:51:26.96,0:51:29.52,ch,,0,0,0,,这里的Twitter会开源\N{\ren}the Twitter app is going to be open source
Dialogue: 0,0:51:29.52,0:51:33.32,ch,,0,0,0,,因此你可以获取到这种控件的源码,\N因此你可以用这个控件\N{\ren}so you know,you gonna have the source code for the widget so you'll be able to use it
Dialogue: 0,0:51:33.34,0:51:34.78,ch,,0,0,0,,这其实很简单就能做到\N{\ren}it's actually pretty easy to do
Dialogue: 0,0:51:34.78,0:51:38.06,ch,,0,0,0,,可能这对我来说是如此简单,因为我知道,这是怎么实现的\N{\ren}maybe it's easy for me to say that cause i know,i understand,but
Dialogue: 0,0:51:38.06,0:51:41.56,ch,,0,0,0,,不过一旦你查看了源代码的话,\N你就会发现这里面没有太多技术含量\N{\ren}once you see the source code,you will see there is no magic in there
Dialogue: 0,0:51:41.56,0:51:43.04,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:51:43.04,0:51:50.44,ch,,0,0,0,,当数据集的长度未知的时候,\N有什么建议关于适配器视图呢\N{\ren}yes,thanks.any tips on how to do a adapter view where the length of the dataset is not known
Dialogue: 0,0:51:50.46,0:51:53.96,ch,,0,0,0,,没听懂\N{\ren}pardon me?
Dialogue: 0,0:51:53.96,0:51:56.26,ch,,0,0,0,,数据集的长度未知\N{\ren}the length of the dataset is not known
Dialogue: 0,0:51:56.28,0:51:58.84,ch,,0,0,0,,这其实日历程序的数据集的长度就是未知的\N{\ren}yeah,actually that's where the calendar does
Dialogue: 0,0:51:58.84,0:52:02.64,ch,,0,0,0,,当你在日历中进入议程模式时\N{\ren}the calendar when you...i think when you go into the agenda mode
Dialogue: 0,0:52:02.64,0:52:05.54,ch,,0,0,0,,这里其实它拥有一个无限长的列表\N{\ren}they...basically an infinite list
Dialogue: 0,0:52:05.54,0:52:09.04,ch,,0,0,0,,是通过调用notifyDatasetChanged来改变数据集的\N{\ren}and they do that by just (playing with) notifyDatasetChanged
Dialogue: 0,0:52:09.06,0:52:10.66,ch,,0,0,0,,适配器返回的是\N{\ren}so they just
Dialogue: 0,0:52:10.66,0:52:15.40,ch,,0,0,0,,当前数据集的最大数量\N{\ren}say that they have integer that max value number of items
Dialogue: 0,0:52:15.42,0:52:17.42,ch,,0,0,0,,但是你可以对数据集进行更改\N{\ren}then they just populate (with) more stuff
Dialogue: 0,0:52:17.42,0:52:22.12,ch,,0,0,0,,每次当你调用notifyDatasetChanged时,\N你就能更改在适配器中数据集的个数\N{\ren}every time you call notifyDatasetChanged,you can change the number of items in the adapter
Dialogue: 0,0:52:22.12,0:52:23.90,ch,,0,0,0,,因此,你可以在最初的时候返回任意一个数值\N{\ren}so you can just grab a random number
Dialogue: 0,0:52:23.90,0:52:28.94,ch,,0,0,0,,之后,当你意识到你的表项增多时,你可以改变那个数值\N{\ren}and later on,if you realize you have more items you can change that number and keep going
Dialogue: 0,0:52:29.00,0:52:30.92,ch,,0,0,0,,多谢了\N{\ren}thank you
Dialogue: 0,0:52:30.92,0:52:35.92,ch,,0,0,0,,我注意到当我加载位图的时候\N{\ren}i noticed when i used bitmap to loads like (down net) also
Dialogue: 0,0:52:35.92,0:52:38.90,ch,,0,0,0,,整个视图都会被刷新\N{\ren}that the whole views have to be refreshed
Dialogue: 0,0:52:38.92,0:52:41.00,ch,,0,0,0,,有任何像这样的方法吗\N{\ren}is there any method like to say
Dialogue: 0,0:52:41.02,0:52:44.94,ch,,0,0,0,,这样的方法会通知你某个id的视图将会被改变\N{\ren}only one item,an specific item by id is gonna be changed
Dialogue: 0,0:52:44.94,0:52:50.84,ch,,0,0,0,,其实,当你想改变一个列表项的时候,\N你可以调用notifyDatasetChanged\N{\ren}actually,so if you are trying to change one item,you call notifyDatasetChanged
Dialogue: 0,0:52:50.84,0:52:51.52,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:52:51.52,0:52:57.42,ch,,0,0,0,,尽管整个视图都会被刷新,不过ListView其实很聪明,\N应为我们有复杂的回收器\N{\ren}yeah,the whole views is going to be refreshed,but actually ListView is pretty smart here,that's where we have our complex recycler
Dialogue: 0,0:52:57.44,0:53:02.74,ch,,0,0,0,,这个回收器知道视图所刷新的大部分内容\N跟刷新前相比是不变的\N{\ren}it's able to figure out that most of what you're changing is actually the same on screen
Dialogue: 0,0:53:02.76,0:53:04.70,ch,,0,0,0,,因此它会尽可能多的重用视图\N{\ren}so it's gonna reuse everything it can
Dialogue: 0,0:53:04.70,0:53:06.86,ch,,0,0,0,,他仍然会重新绘制整个屏幕\N{\ren}it's still gonna redraw the entire screen
Dialogue: 0,0:53:06.86,0:53:08.68,ch,,0,0,0,,但是如果这个操作对你来说是很致命的话\N{\ren}but if that's the really issue for you
Dialogue: 0,0:53:08.70,0:53:13.12,ch,,0,0,0,,你可以直接获取到这个视图,用getChildAt\N{\ren}you can directly grab the view,you can call getChildAt
Dialogue: 0,0:53:13.12,0:53:17.82,ch,,0,0,0,,这个方法要在getFirstVisiblePosition的条件体中\N然后调用getChildAt获取到相应的视图\N{\ren}that's (why you) use getFirstVisiblePosition to figure out what's translation between the position and index
Dialogue: 0,0:53:17.82,0:53:21.02,ch,,0,0,0,,然后你就可以对这个View设置图片了,\N或者干其他的事情了\N{\ren}and you can just call setImage or whatever you want on the view
Dialogue: 0,0:53:21.02,0:53:26.42,ch,,0,0,0,,如果你想看一个好的例子的话,你可以去\Nhttps://github.com/oceancx/shelves这里看我写的源码\N{\ren}if you wanna good example,you should look at the (https://github.com/oceancx/shelves)
Dialogue: 0,0:53:26.44,0:53:29.30,ch,,0,0,0,,这就是我在第一个幻灯片中写的app\N{\ren}this application i showed in one of the first slides
Dialogue: 0,0:53:29.30,0:53:37.00,ch,,0,0,0,,我写了很复杂的代码来支持这种操作,你可以拿去看,\N然后自己领悟吧\N{\ren}i have very complex code to support that kind of optimize operation,and you can look at it and see how to do it
Dialogue: 0,0:53:37.00,0:53:38.92,ch,,0,0,0,,那边的\N{\ren}oh,there
Dialogue: 0,0:53:38.92,0:53:41.06,ch,,0,0,0,,我有两个问题(一听就是中国的 ^ ^)\N{\ren}hi,i have two questions
Dialogue: 0,0:53:41.06,0:53:45.16,ch,,0,0,0,,第一个是,我试着在列表中采用相对布局\N{\ren}my first is we tried to use a RelativeLayout for a row in the list
Dialogue: 0,0:53:45.18,0:53:49.76,ch,,0,0,0,,列表似乎对相对布局的某些属性\N{\ren}and it seems to ignore the attributes in the RelativeLayout
Dialogue: 0,0:53:49.78,0:53:51.28,ch,,0,0,0,,好了,哥已经猜到了\N{\ren}uh ha..i know why
Dialogue: 0,0:53:51.30,0:53:53.84,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:53:53.84,0:53:56.74,ch,,0,0,0,,实际上,我还把这个问题写进了PPT中\N{\ren}and actually,i put the answer on the one of the slides
Dialogue: 0,0:53:56.74,0:54:02.34,ch,,0,0,0,,你的问题是,你的表项是相对布局,\N但是布局的某些属性被忽略掉了.对么\N{\ren}yeah,the problem is that you have a RelativeLayout,and you layout attributes are ignored.right?
Dialogue: 0,0:54:02.34,0:54:05.54,ch,,0,0,0,,这里的原因其实很简单\N{\ren}it's actually something very simple and that's
Dialogue: 0,0:54:05.54,0:54:07.54,ch,,0,0,0,,关于这点文档的说明很烂\N{\ren}documentation for that sucks
Dialogue: 0,0:54:07.54,0:54:11.64,ch,,0,0,0,,这仍然属于我们的失误,我们非常抱歉\N{\ren}and again,that's still our fault,i am very sorry,but
Dialogue: 0,0:54:11.68,0:54:13.50,ch,,0,0,0,,这里,看这个例子\N{\ren}so here,for instance
Dialogue: 0,0:54:13.50,0:54:17.60,ch,,0,0,0,,我们在调用inflate方法时,\N我们传入了null作为最后一个参数.\N{\ren}we are calling inflate and we are passing null as the last parameter
Dialogue: 0,0:54:17.62,0:54:22.28,ch,,0,0,0,,这个参数是你反射视图的父视图\N{\ren}null is the parent...the parameter is the parent of the view you're inflating
Dialogue: 0,0:54:22.28,0:54:26.08,ch,,0,0,0,,传入null的话,就相当于你告诉framework.\N"我不知道其父视图会是什么"\N{\ren}passing null,you're telling the framework,"well i don't know what the parent gonna be"
Dialogue: 0,0:54:26.10,0:54:29.60,ch,,0,0,0,,那么,当我们不知道父视图是什么的话,\N我们就不知道父布局参数的会是什么\N{\ren}now we don't know the parents,we don't know what the layout parameters will be
Dialogue: 0,0:54:29.60,0:54:32.30,ch,,0,0,0,,那么我们就不去获取父视图了,我就忽略掉父视图的参数了\N{\ren}so we just give up,we just don't get the parameter,so
Dialogue: 0,0:54:32.30,0:54:35.52,ch,,0,0,0,,那么你要做的工作就是调用这个版本的inflate\N{\ren}what you have to do is call this version of inflates
Dialogue: 0,0:54:35.52,0:54:38.72,ch,,0,0,0,,在你传入父视图的时候.\N这就是为啥getView返回parent参数的原因\N{\ren}when you pass the parents.and that's why in getView() would give you the parent
Dialogue: 0,0:54:38.72,0:54:42.28,ch,,0,0,0,,此时,你把父视图传递进去了,\N但是当你第三个参数传入true的话\N{\ren}so you pass the parents,but if pass true at the end
Dialogue: 0,0:54:42.28,0:54:45.78,ch,,0,0,0,,我们就会在父视图中调用addView,\N把你要反射的视图加入进去\N{\ren}we gonna call addView() on the parents with the view you're inflating
Dialogue: 0,0:54:45.78,0:54:49.58,ch,,0,0,0,,但是如果你在ListView中这么干的话,ListView会崩溃\N所以你不得不传入false\N{\ren}but if you do that on the ListView,it's gonna crash,so you have to pass false
Dialogue: 0,0:54:49.58,0:54:50.66,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:54:50.68,0:54:56.92,ch,,0,0,0,,无论何时你在ListView中反射视图的时候,就用这种写法\N{\ren}so whenever you're in getView and you inflate something always pass the parents and false in the (inflate called)
Dialogue: 0,0:54:56.92,0:54:58.22,ch,,0,0,0,,这就会解决掉你的问题了\N{\ren}and that will work
Dialogue: 0,0:54:58.22,0:55:00.22,ch,,0,0,0,,多谢,那么再问一个问题\N{\ren}thank you.my second question
Dialogue: 0,0:55:00.22,0:55:04.02,ch,,0,0,0,,我们试着用字母索引器来辅助快速滚动\N{\ren}we also use...we tried to use a AlphabetIndexer for a fast scrolling
Dialogue: 0,0:55:04.04,0:55:09.12,ch,,0,0,0,,但是如果列表中的数据被改变的话,\N似乎索引器不能被更新\N{\ren}and that data does change,it seems like that the AlphabetIndexer can't be updated
Dialogue: 0,0:55:09.16,0:55:13.80,ch,,0,0,0,,是的,这里是有这个限制,这是一个bug\N{\ren}yeah,that's currently (limitation).we have a bug field somewhere (internally)about that
Dialogue: 0,0:55:13.80,0:55:17.90,ch,,0,0,0,,我们可能会去把这个bug给解决了,\N但是这似乎在近期内不会实现\N{\ren}maybe we will do it,but i don't think it's gonna happen very soon
Dialogue: 0,0:55:17.90,0:55:21.70,ch,,0,0,0,,如果各位愿意为此写一个代码补丁的话,我会亲自审查\N{\ren}so if you guys want to write a (code patch),i am gonna read you it myself
Dialogue: 0,0:55:21.70,0:55:23.70,ch,,0,0,0,,我会很高兴接受你的补丁\N{\ren}i would be very glad to accept it
Dialogue: 0,0:55:23.70,0:55:25.70,ch,,0,0,0,,多谢\N{\ren}ok.thank you
Dialogue: 0,0:55:25.70,0:55:26.68,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:55:26.68,0:55:29.58,ch,,0,0,0,,你刚说你对android的问题知无不言\N{\ren}you said you take questions about Android in general
Dialogue: 0,0:55:29.58,0:55:30.96,ch,,0,0,0,,是的,放马过来\N{\ren}we can try
Dialogue: 0,0:55:30.96,0:55:34.58,ch,,0,0,0,,我现在有点赶时间,因为昨天家里有事儿呼叫我\N{\ren}ok,well,i am playing (catch-up) because family emergency (kept) me out yesterday
Dialogue: 0,0:55:34.60,0:55:37.10,ch,,0,0,0,,Froyo现在会发布吗,Froyo发布时间定了么\N{\ren}has Froyo been addressed or is there words when it will be
Dialogue: 0,0:55:37.10,0:55:38.62,ch,,0,0,0,,我没接到任何通知\N{\ren}nothing has been announced
Dialogue: 0,0:55:38.62,0:55:39.00,ch,,0,0,0,,好的\N{\ren}ok
Dialogue: 0,0:55:39.00,0:55:41.92,ch,,0,0,0,,它是不是已经加入AOSP中了呢\N{\ren}is it true it has hit AOSP already though
Dialogue: 0,0:55:41.92,0:55:42.92,ch,,0,0,0,,我没有接到任何通知\N{\ren}nothing has been announced
Dialogue: 0,0:55:42.92,0:55:43.16,ch,,0,0,0,,好,我问完了\N{\ren}ok
Dialogue: 0,0:55:45.34,0:55:45.70,ch,,0,0,0,,亲\N{\ren}hi
Dialogue: 0,0:55:45.70,0:55:50.10,ch,,0,0,0,,我们很善于躲避类似的问题呢\N{\ren}we have very very good (dodging) in these questions,don't even try
Dialogue: 0,0:55:50.10,0:55:51.52,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:55:51.52,0:55:54.42,ch,,0,0,0,,请麦克前的这位发言\N{\ren}the mic first...can you go the mic
Dialogue: 0,0:55:54.42,0:55:58.36,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:55:58.36,0:56:05.72,ch,,0,0,0,,这里每个幻灯片都会上传到GoogleIO网站上,\N你可以获取到视频以及幻灯片\N{\ren}yes,so the slides.every session within the next few weeks will be available on the Google IO website,you'll get the video and slides
Dialogue: 0,0:56:13.56,0:56:14.64,ch,,0,0,0,,我不清楚\N{\ren}i don't know
Dialogue: 0,0:56:14.64,0:56:15.70,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:56:15.70,0:56:17.10,ch,,0,0,0,,好了好了\N{\ren}that's ok
Dialogue: 0,0:56:17.10,0:56:22.30,ch,,0,0,0,,这里我有一个ListView,我的应用中的一部分是\N{\ren}ok,so,i have a ListView,the part of my app is
Dialogue: 0,0:56:22.30,0:56:27.04,ch,,0,0,0,,关于地理服务的,其两个设备之间用到了GPS\N{\ren}it's surveying app i am using a GPS between two devices,so
Dialogue: 0,0:56:27.06,0:56:30.08,ch,,0,0,0,,要说我为啥这么干的话就扯远了\N{\ren}long story it takes exactly what it does when i am doing that for
Dialogue: 0,0:56:30.08,0:56:32.08,ch,,0,0,0,,我就直接切入到ListView的问题吧\N{\ren}just get right the point with the ListView question
Dialogue: 0,0:56:32.22,0:56:35.42,ch,,0,0,0,,这里...\N{\ren}so ...one of the things...
Dialogue: 0,0:56:35.44,0:56:39.04,ch,,0,0,0,,我用到了SMS来收发消息\N{\ren}part of this is i am using sms to send message just back and forth
Dialogue: 0,0:56:39.04,0:56:42.24,ch,,0,0,0,,某人可以把自己的当前位置给发送出去\N{\ren}you can either send...somebody can send them current position
Dialogue: 0,0:56:42.24,0:56:45.44,ch,,0,0,0,,比方说发送当前的GPS坐标,或者可以发送\N{\ren}the current GPS coordinates,or they can send your message says like
Dialogue: 0,0:56:45.46,0:56:48.62,ch,,0,0,0,,这样的移动指令,你可以往右走10码么,等等\N{\ren}could you move like ten yards to the right or something like that
Dialogue: 0,0:56:48.62,0:56:50.92,ch,,0,0,0,,现在我用到了Java的正则表达式\N{\ren}so right now,i am using a java (reg X)
Dialogue: 0,0:56:50.92,0:56:54.24,ch,,0,0,0,,来给某人发送的GPS坐标进行匹配\N{\ren}to sort out between when somebody says your pair GPS coordinates
Dialogue: 0,0:56:54.26,0:56:57.88,ch,,0,0,0,,然后把这些信息填充到ListView中\N{\ren}and populating that in a ListView that has your positional data
Dialogue: 0,0:56:57.90,0:57:02.92,ch,,0,0,0,,这跟刚才你谈到聊天客户端的实现有些不同\N{\ren}(?versus)the chat window...the chat window which has a ListView
Dialogue: 0,0:57:02.92,0:57:07.32,ch,,0,0,0,,在ListView中,你刚刚谈到了一个类\N{\ren}you were talking earlier about a class which
Dialogue: 0,0:57:07.32,0:57:10.52,ch,,0,0,0,,会做一些预测的工作\N{\ren}will do sort of like predictive
Dialogue: 0,0:57:10.52,0:57:14.68,ch,,0,0,0,,这个类会在你输入的时候,对列表进行过滤.\N那叫什么来着\N{\ren}it was sort of sorting out of as you're typing or there is data comes in
Dialogue: 0,0:57:14.68,0:57:16.10,ch,,0,0,0,,嗯,这是过滤器类\N{\ren}yeah,it's a filtering
Dialogue: 0,0:57:16.10,0:57:23.50,ch,,0,0,0,,那么我的应用中是用java的RegX更快呢还是用过滤器类呢\N{\ren}i'm wondering,would the filter be more proper with that or am i just better (off) with this the (re-guess) gonna be faster
Dialogue: 0,0:57:23.50,0:57:28.80,ch,,0,0,0,,我认为,你可以对过滤器的实现采用regX,\N这完全取决于你的选择\N{\ren}i mean you can implement the Filter with the (reg X),so i mean it's really up to you
Dialogue: 0,0:57:28.80,0:57:29.20,ch,,0,0,0,,好吧\N{\ren}ok
Dialogue: 0,0:57:29.20,0:57:30.60,ch,,0,0,0,,我认为对你的应用来说.这无关紧要\N{\ren}i don't think it matters in your case
Dialogue: 0,0:57:30.60,0:57:35.30,ch,,0,0,0,,好吧,那就是说我不用对regX做任何修改了\N{\ren}ok,it's not...am i getting losing or gaining anything i going to java.regX
Dialogue: 0,0:57:35.32,0:57:36.32,ch,,0,0,0,,不用啊/那好吧\N{\ren}not at all/ ok
Dialogue: 0,0:57:36.32,0:57:37.36,ch,,0,0,0,,多谢了\N{\ren}all right.thanks
Dialogue: 0,0:57:37.36,0:57:41.70,ch,,0,0,0,,这个过滤器是不是最善于做交互用的呢\N{\ren}is the filtering is that mostly for interactive
Dialogue: 0,0:57:41.70,0:57:46.54,ch,,0,0,0,,你也可以把它用在非交互的操作上,但是这又扯远了\N{\ren}yes,you can use it on non-interactive actions,but it's not really matter for that
Dialogue: 0,0:57:46.54,0:57:48.18,ch,,0,0,0,,好的,谢谢\N{\ren}ok,all right,thanks
Dialogue: 0,0:57:48.20,0:57:51.38,ch,,0,0,0,,好的,来看看Dory上的问题\N{\ren}so,question from Dory
Dialogue: 0,0:57:51.38,0:57:54.72,ch,,0,0,0,,对ListView设置适配器可能会使UI线程受阻\N{\ren}setting the adapter to the ListView can become a block operation
Dialogue: 0,0:57:54.72,0:57:57.60,ch,,0,0,0,,如果适配器的数据源是来自网络的话,有啥建议么\N{\ren}if the adapter gets the data from the network,any tips?
Dialogue: 0,0:57:57.60,0:57:59.10,ch,,0,0,0,,请用线程\N{\ren}use threads
Dialogue: 0,0:57:59.10,0:58:00.48,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:58:00.48,0:58:01.82,ch,,0,0,0,,哥只能帮你到这儿了\N{\ren}that's pretty much all there is to it
Dialogue: 0,0:58:01.82,0:58:03.56,ch,,0,0,0,,这不会使UI线程受阻\N{\ren}just don't block the UI thread
Dialogue: 0,0:58:03.56,0:58:09.16,ch,,0,0,0,,这里需要注意的是,尽管你在另外的线程中从网络上获取数据\N{\ren}right.again,the trick here to make sure that even if you are collecting your data from the network
Dialogue: 0,0:58:09.16,0:58:12.02,ch,,0,0,0,,你必须在UI线程中执行提交操作\N{\ren}you have to perform the commit operation on the UI thread
Dialogue: 0,0:58:12.02,0:58:16.42,ch,,0,0,0,,你可以对你的UI线程发送一个消息\N来通知数据已经获取到\N{\ren}so you can go ahead just post a message to your UI thread through the normal event system
Dialogue: 0,0:58:16.42,0:58:20.00,ch,,0,0,0,,然后把你的最终得到的数据插入到适配器中\N{\ren}and take your big (blob)of data that you have the end
Dialogue: 0,0:58:20.00,0:58:24.10,ch,,0,0,0,,然后把变化提交给适配器,通过调用notifyDatasetChanged\N{\ren}and go ahead and commit changes to the adapter there,call notifyDatasetChanged
Dialogue: 0,0:58:24.10,0:58:26.70,ch,,0,0,0,,\N{\ren}
Dialogue: 0,0:58:26.70,0:58:28.98,ch,,0,0,0,,我有一个列表\N{\ren}i have a list
Dialogue: 0,0:58:28.98,0:58:32.18,ch,,0,0,0,,我用一个数组为此列表设置了一个列表适配器\N{\ren}that i set the list adapter from an array that i have in my program
Dialogue: 0,0:58:32.20,0:58:38.30,ch,,0,0,0,,点击监听器,大多数情况下,工作的很好.\N刚刚你们也谈到了过滤器类\N{\ren}and onClick,most of the time it works just great,i have the position and you guys were talking about filter
Dialogue: 0,0:58:38.30,0:58:40.24,ch,,0,0,0,,我的列表中的数据都有id,我在想\N{\ren}and there is an id,i am wondering
Dialogue: 0,0:58:40.24,0:58:45.72,ch,,0,0,0,,我可以用id来关联我的数组么,同时,\N由此获取到的数据的位置还应该是正确的\N{\ren}can i use that id and will it correlate to my array and the position it should be
Dialogue: 0,0:58:45.74,0:58:50.66,ch,,0,0,0,,因为如果用位置去匹配的话,假如说列表中有100项时\N{\ren}cause the position,if there are filters and then there's three items,hundred items in an array,then
Dialogue: 0,0:58:50.66,0:58:52.48,ch,,0,0,0,,选出来的表项就有问题\N{\ren}it picks the wrong item,so
Dialogue: 0,0:58:52.50,0:58:54.68,ch,,0,0,0,,我可以保证获取到那种正确的关联么\N{\ren}can i guarantee (that they'll) correlate
Dialogue: 0,0:58:54.70,0:58:56.76,ch,,0,0,0,,默认情况下,在数组适配器中\N{\ren}so by default,in an ArrayAdapter
Dialogue: 0,0:58:56.76,0:59:00.14,ch,,0,0,0,,表项的id就是你的数组的索引\N{\ren}the id is the index of the item inside of your array
Dialogue: 0,0:59:00.14,0:59:03.94,ch,,0,0,0,,当你对数组适配器进行过滤的时候\N{\ren}it's gonna...so when you filter the ArrayAdapter
Dialogue: 0,0:59:03.94,0:59:06.12,ch,,0,0,0,,这里的id就会变化,使得id不固定\N{\ren}the ids will change,so they are not stable
Dialogue: 0,0:59:06.12,0:59:10.52,ch,,0,0,0,,如果你想让过滤操作不改变id的话,\N你就需要自定义适配器\N{\ren}so if you wanna them to be stable across filtering,you have to implement your own adapter
Dialogue: 0,0:59:10.52,0:59:15.52,ch,,0,0,0,,你可以让过滤器存储一些额外的数据在表项中\N以便你搞清楚正确的表项是什么\N{\ren}and maybe change the filter to store some extra data in the item,so that you can know what item it is
Dialogue: 0,0:59:15.52,0:59:17.12,ch,,0,0,0,,好的,懂了\N{\ren}ok,ok
Dialogue: 0,0:59:17.12,0:59:20.56,ch,,0,0,0,,根本上来讲,我要做的是对交叉引用数据,然后做检查/是的\N{\ren}so i just basically have to cross reference the data and just check./yeah
Dialogue: 0,0:59:20.56,0:59:21.20,ch,,0,0,0,,好的,谢谢喽\N{\ren}ok.thank you
Dialogue: 0,0:59:21.22,0:59:23.18,ch,,0,0,0,,我们知道这样做不是很棒,但是没办法.\N{\ren}yeah,we know it's not great but sorry
Dialogue: 0,0:59:23.18,0:59:25.48,ch,,0,0,0,,很不幸,我们问答时间已经用完了\N{\ren}and (unfortunately),we are out of time for the questions
Dialogue: 0,0:59:25.48,0:59:28.68,ch,,0,0,0,,因此,如果你有更多的问题的话,\N请到Google群组中的Android版块提问\N{\ren}so if you have more questions,we have the Android Google Groups
Dialogue: 0,0:59:28.68,0:59:31.08,ch,,0,0,0,,你也可以在StackOverflow上提问\N{\ren}there are StackOverflow where you can ask questions online
Dialogue: 0,0:59:31.08,0:59:34.96,ch,,0,0,0,,我们团队中有人监视网上提出的问题,\N然后会尝试着帮你解决问题\N{\ren}like a few of us are monitoring everything and we will try to answer your questions when we have time
Dialogue: 0,0:59:34.96,0:59:35.90,ch,,0,0,0,,谢谢大家的到场\N{\ren}thank you very much
Dialogue: 0,0:59:35.90,0:59:40.00,ch,,0,0,0,,听完掌声吧\N{\ren}clap
Dialogue: 0,0:59:40.00,0:59:42.30,ch,,0,0,0,,{\ren\an8}微博求粉:Ocean-藏心.
Dialogue: 0,0:59:40.00,0:59:42.30,ch,,0,0,0,,我也谢谢大家把视频给看完了\N{\ren}thank you for watching.
